
1、TopViewActivity的代码：

```java
package com.mt.mtxx.mtxx;

import android.app.Activity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.Window;
import android.view.WindowManager;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.mt.mtxx.operate.MTXXHttp;
import com.mt.mtxx.operate.OptHistory;
import com.mt.mtxx.operate.OptMiddle;
import com.mt.mtxx.tools.FileTools;
import com.mt.mtxx.tools.SoftInf;
import java.io.File;
import java.util.Timer;
import java.util.TimerTask;

public class TopViewActivity
  extends Activity
{
  public static int backID;
  public int Background;
  private Button btn_about;
  private Button btn_beautyPic;//注释：美化图片
  private Button btn_newboyhelp;
  private Button btn_set;
  private TextView btn_versionName;
  private LinearLayout buttonsLayout;
  final Handler handler = new Handler()
  {
    public void handleMessage(Message paramAnonymousMessage)
    {
      if ((paramAnonymousMessage.what == 1) && (MyData.firestStart == 0))
      {
        TopViewActivity.this.buttonsLayout.setVisibility(0);
        TopViewActivity.this.tipView.setVisibility(0);
        TopViewActivity.this.tipBtnLayout.setVisibility(0);
        TopViewActivity.this.buttonsLayout.startAnimation(TopViewActivity.this.tipAnimation);
        TopViewActivity.this.tipView.startAnimation(TopViewActivity.this.tipAnimation);
        TopViewActivity.this.tipBtnLayout.startAnimation(TopViewActivity.this.tipAnimation);
        MyData.firestStart = 1;
      }
      super.handleMessage(paramAnonymousMessage);
    }
  };
  private LinearLayout layoutHide;
  public OptMiddle m_optMiddle = new OptMiddle();
  private Timer timer = new Timer();
  private Animation tipAnimation;
  private RelativeLayout tipBtnLayout;
  private ImageView tipView;
  private String versionName;
  
  private void findView()
  {
    this.btn_beautyPic = ((Button)findViewById(2131230929));
    this.btn_newboyhelp = ((Button)findViewById(2131230932));
    this.btn_about = ((Button)findViewById(2131230933));
    this.btn_set = ((Button)findViewById(2131230934));
    this.btn_versionName = ((TextView)findViewById(2131230925));
    this.layoutHide = ((LinearLayout)findViewById(2131230927));
    this.tipView = ((ImageView)findViewById(2131230930));
    this.buttonsLayout = ((LinearLayout)findViewById(2131230931));
    this.tipBtnLayout = ((RelativeLayout)findViewById(2131230928));
  }
  
  private void initSet()
  {
    try
    {
      MyData.SavePicID = getSharedPreferences("editType", 1).getInt("savaPic", 1);
      if (MyData.SavePicID == 0)
      {
        MyData.nOutPutWidth = 320;
        MyData.nOutPutHeight = 480;
        return;
      }
      if (MyData.SavePicID == 1)
      {
        MyData.nOutPutWidth = 480;
        MyData.nOutPutHeight = 640;
        return;
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
      return;
    }
    if (MyData.SavePicID == 2)
    {
      MyData.nOutPutWidth = 640;
      MyData.nOutPutHeight = 960;
      return;
    }
    MyData.nOutPutWidth = 480;
    MyData.nOutPutHeight = 640;
  }
  
  private void tip()
  {
    try
    {
      new Thread()
      {
        public void run()
        {
          try
          {
            if (MTXXHttp.IsHTTPConnect())
            {
              if (SoftInf.judgeFirstRun(TopViewActivity.this))
              {
                MTDebug.Print("First Run");
                MTXXHttp.SendMsgInstall(TopViewActivity.this);
                MTXXHttp.SendMsgRun(TopViewActivity.this);
                return;
              }
              MTDebug.Print("not First Run");
              MTXXHttp.SendMsgRun(TopViewActivity.this);
              return;
            }
          }
          catch (Exception localException)
          {
            localException.printStackTrace();
          }
        }
      }.start();
      TimerTask local3 = new TimerTask()
      {
        public void run()
        {
          Message localMessage = new Message();
          localMessage.what = 1;
          TopViewActivity.this.handler.sendMessage(localMessage);
        }
      };
      this.timer.schedule(local3, 800L);
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void chosePic()
  {
    Intent localIntent = new Intent();
    localIntent.setType("image/*");
    localIntent.setAction("android.intent.action.GET_CONTENT");
    startActivityForResult(localIntent, 1);
  }
  
  public void getName()
  {
    Object localObject = getPackageManager();
    try
    {
      localObject = ((PackageManager)localObject).getPackageInfo(getPackageName(), 0);
      String str = ((PackageInfo)localObject).packageName;
      int i = ((PackageInfo)localObject).versionCode;
      this.versionName = ((PackageInfo)localObject).versionName;
      MyData.strSoftVersion = MyPro.getVersionName(this);
      MTDebug.Print(str + "--------------" + i + "--------------" + this.versionName);
      return;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException) {}
  }
  
  public void onCreate(Bundle paramBundle)
  {
    getWindow().setFlags(1024, 1024);
    super.onCreate(paramBundle);
    setContentView(2130903055);
    findView();
    this.tipAnimation = AnimationUtils.loadAnimation(this, 2130968592);
    this.btn_beautyPic.setOnClickListener(new OnClickListenerBeautyPic());//注释：设置点击事件
    this.btn_beautyPic.setOnTouchListener(new OnTouchListenerBeautyPic());
    this.btn_newboyhelp.setOnTouchListener(new OnTouchListenerNewboyhelp());
    this.btn_newboyhelp.setOnClickListener(new OnClickListenerNewboyhelp());
    this.btn_about.setOnTouchListener(new OnTouchListenerAbout());
    this.btn_about.setOnClickListener(new OnClickListenerAbout());
    this.btn_set.setOnTouchListener(new OnTouchListenerSet());
    this.btn_set.setOnClickListener(new OnClickListenerSet());
    getName();
    this.btn_versionName.setText(this.versionName + " 正式版");
    this.btn_versionName.setTextSize(12.0F);
    try
    {
      paramBundle = getWindowManager().getDefaultDisplay();
      DisplayMetrics localDisplayMetrics = new DisplayMetrics();
      paramBundle.getMetrics(localDisplayMetrics);
      MyData.nScreenW = localDisplayMetrics.widthPixels;
      MyData.nScreenH = localDisplayMetrics.heightPixels;
      MyData.nBmpDstW = MyData.nScreenW;
      MyData.nBmpDstH = MyData.nScreenH - 100;
      MyData.nDensity = localDisplayMetrics.density;
      MTDebug.Print("nScreenW=" + MyData.nScreenW + " MyData.nScreenH=" + MyData.nScreenH + "MyData.nDensity" + MyData.nDensity);
      MyPro.allScan(this);
      initSet();
      MTDebug.memeryUsed("TopViewActivity onCreate");
      if (MyData.firestStart == 0) {
        tip();
      }
      if (MyData.firestStart == 1)
      {
        this.buttonsLayout.setVisibility(0);
        this.tipView.setVisibility(0);
        this.tipBtnLayout.setVisibility(0);
      }
      return;
    }
    catch (Exception paramBundle)
    {
      paramBundle.printStackTrace();
    }
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    if (paramInt == 4) {}
    try
    {
      MyData.firestStart = 0;
      int i = MyData.m_optMiddle.m_pHistory.m_nDoneListPos;
      FileTools.deleteFilesFromIndex(MyData.strTempSDCardPath + "/HISTORY/", i);
      FileTools.cleanFile(MyData.strTempSDCardPath + "/style");
      finish();
      return true;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    if (paramInt == 82) {
      return true;
    }
    return super.onKeyDown(paramInt, paramKeyEvent);
  }
  
  public void toMain()
  {
    Intent localIntent = new Intent();
    localIntent.setClass(this, MtxxActivity.class);
    startActivity(localIntent);
  }
  
  class OnClickListenerAbout
    implements View.OnClickListener
  {
    OnClickListenerAbout() {}
    
    public void onClick(View paramView)
    {
      paramView = new Intent();
      paramView.setClass(TopViewActivity.this, SysAboutActivity.class);
      TopViewActivity.this.startActivityForResult(paramView, 0);
      TopViewActivity.this.overridePendingTransition(2130968576, 2130968577);
    }
  }
  
  class OnClickListenerBeautyPic
    implements View.OnClickListener
  {
    OnClickListenerBeautyPic() {}
    
    public void onClick(View paramView)
    {
       //注释：打开ChoosePicActivity页面,这样我们就去看ChoosePicActivity的具体代码
      paramView = new Intent(TopViewActivity.this, ChoosePicActivity.class);
      TopViewActivity.this.startActivity(paramView);
      TopViewActivity.this.overridePendingTransition(2130968576, 2130968577);
    }
  }
  
  class OnClickListenerNewboyhelp
    implements View.OnClickListener
  {
    OnClickListenerNewboyhelp() {}
    
    public void onClick(View paramView)
    {
      paramView = new Intent();
      paramView.setClass(TopViewActivity.this, SysNewplayhelpActivity.class);
      TopViewActivity.this.startActivity(paramView);
      TopViewActivity.this.overridePendingTransition(2130968576, 2130968577);
    }
  }
  
  class OnClickListenerSet
    implements View.OnClickListener
  {
    OnClickListenerSet() {}
    
    public void onClick(View paramView)
    {
      paramView = new Intent();
      paramView.setClass(TopViewActivity.this, SysEditActivity.class);
      TopViewActivity.this.startActivityForResult(paramView, 0);
      TopViewActivity.this.overridePendingTransition(2130968576, 2130968577);
    }
  }
  
  class OnTouchListenerAbout
    implements View.OnTouchListener
  {
    OnTouchListenerAbout() {}
    
    public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
    {
      if (paramMotionEvent.getAction() == 0) {
        TopViewActivity.this.btn_about.setBackgroundResource(2130837630);
      }
      for (;;)
      {
        return false;
        if (paramMotionEvent.getAction() == 1) {
          TopViewActivity.this.btn_about.setBackgroundResource(2130837629);
        }
      }
    }
  }
  
  class OnTouchListenerBeautyPic
    implements View.OnTouchListener
  {
    OnTouchListenerBeautyPic() {}
    
    public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
    {
      if (paramMotionEvent.getAction() == 0) {
        TopViewActivity.this.btn_beautyPic.setBackgroundResource(2130837598);
      }
      for (;;)
      {
        return false;
        if (paramMotionEvent.getAction() == 1) {
          TopViewActivity.this.btn_beautyPic.setBackgroundResource(2130837596);
        }
      }
    }
  }
  
  class OnTouchListenerNewboyhelp
    implements View.OnTouchListener
  {
    OnTouchListenerNewboyhelp() {}
    
    public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
    {
      if (paramMotionEvent.getAction() == 0) {
        TopViewActivity.this.btn_newboyhelp.setBackgroundResource(2130837632);
      }
      for (;;)
      {
        return false;
        if (paramMotionEvent.getAction() == 1) {
          TopViewActivity.this.btn_newboyhelp.setBackgroundResource(2130837631);
        }
      }
    }
  }
  
  class OnTouchListenerSet
    implements View.OnTouchListener
  {
    OnTouchListenerSet() {}
    
    public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
    {
      if (paramMotionEvent.getAction() == 0) {
        TopViewActivity.this.btn_set.setBackgroundResource(2130837630);
      }
      for (;;)
      {
        return false;
        if (paramMotionEvent.getAction() == 1) {
          TopViewActivity.this.btn_set.setBackgroundResource(2130837629);
        }
      }
    }
  }
  
  class clickListenerChosePic
    implements View.OnClickListener
  {
    clickListenerChosePic() {}
    
    public void onClick(View paramView)
    {
      TopViewActivity.this.chosePic();
    }
  }
  
  class clickListenerPthone
    implements View.OnClickListener
  {
    clickListenerPthone() {}
    
    public void onClick(View paramView)
    {
      paramView = new Intent("android.media.action.IMAGE_CAPTURE");
      paramView.putExtra("output", Uri.fromFile(new File(Environment.getExternalStorageDirectory(), "MTXX/camera.jpg")));
      paramView.putExtra("android.intent.extra.videoQuality", 0);
      TopViewActivity.this.startActivityForResult(paramView, 0);
    }
  }
}
```

2、ChoosePicActivity的具体代码：

```java
package com.mt.mtxx.mtxx;

import android.app.Activity;
import android.content.ContentResolver;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.net.Uri;
import android.os.Bundle;
import android.view.Window;
import android.widget.Toast;
import com.mt.mtxx.tools.ChoosePicDialog;
import com.mt.mtxx.tools.ImageTestButton;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;

public class ChoosePicActivity
  extends Activity
{
   //注释：弹出一个选择图片的对话框
  private ChoosePicDialog mChooseDialog;
  
  public static byte[] getBytesFromInputStream(InputStream paramInputStream, int paramInt)
    throws IOException
  {
    int i = 0;
    byte[] arrayOfByte = new byte[4096];
    ByteBuffer localByteBuffer = ByteBuffer.allocate(paramInt);
    paramInt = i;
    for (;;)
    {
      i = paramInputStream.read(arrayOfByte);
      if (i == -1)
      {
        paramInputStream = new byte[paramInt];
        localByteBuffer.flip();
        localByteBuffer.get(paramInputStream, 0, paramInt);
        return paramInputStream;
      }
      localByteBuffer.put(arrayOfByte, 0, i);
      paramInt += i;
    }
  }
  
  public static Bitmap getPicFromBytes(byte[] paramArrayOfByte, BitmapFactory.Options paramOptions)
  {
    if (paramArrayOfByte != null)
    {
      if (paramOptions != null) {
        return BitmapFactory.decodeByteArray(paramArrayOfByte, 0, paramArrayOfByte.length, paramOptions);
      }
      return BitmapFactory.decodeByteArray(paramArrayOfByte, 0, paramArrayOfByte.length);
    }
    return null;
  }
  
  private void setBtns()
  {
    ImageTestButton localImageTestButton1 = (ImageTestButton)findViewById(2131230785);
    ImageTestButton localImageTestButton2 = (ImageTestButton)findViewById(2131230786);
    ImageTestButton localImageTestButton3 = (ImageTestButton)findViewById(2131230787);
    ImageTestButton localImageTestButton4 = (ImageTestButton)findViewById(2131230788);
    ImageTestButton localImageTestButton5 = (ImageTestButton)findViewById(2131230789);
    localImageTestButton1.setResources(2130837588, 2130837589);
    localImageTestButton2.setResources(2130837586, 2130837587);
    localImageTestButton3.setResources(2130837594, 2130837595);
    localImageTestButton4.setResources(2130837590, 2130837591);
    localImageTestButton5.setResources(2130837592, 2130837593);
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    do
    {
      do
      {
        try
        {
          MTDebug.Print("requestCode=" + paramInt1 + " resultCode=" + paramInt2);
          if ((paramInt1 != 0) || (paramInt2 != -1)) {
            continue;
          }
          if (this.mChooseDialog != null)
          {
            this.mChooseDialog.dismiss();
            this.mChooseDialog = null;
          }
          MtxxActivity.fromCamera = true;
          toMtxxActivity();
        }
        catch (Exception localException1)
        {
          for (;;)
          {
            Uri localUri;
            Cursor localCursor;
            localException1.printStackTrace();
            continue;
            try
            {
              MtxxActivity.loadPic = true;
              MyData.picSourceType = 0;
              toMtxxActivity();
            }
            catch (Exception localException2)
            {
              localException2.printStackTrace();
            }
            continue;
            if (localException2 != null)
            {
              String str = localException2.getPath();
              MTDebug.Print("path=" + str);
              MyData.strPicPath = str;
              try
              {
                MyData.bmpDst = null;
                System.gc();
                MtxxActivity.loadPic = true;
                MyData.picSourceType = 0;
                toMtxxActivity();
              }
              catch (Exception localException3)
              {
                localException3.printStackTrace();
              }
            }
          }
        }
        super.onActivityResult(paramInt1, paramInt2, paramIntent);
        return;
      } while ((paramInt1 != 1) || (paramInt2 != -1));
      if (this.mChooseDialog != null)
      {
        this.mChooseDialog.dismiss();
        this.mChooseDialog = null;
      }
    } while (paramIntent == null);
    localUri = paramIntent.getData();
    localCursor = getContentResolver().query(localUri, null, null, null, null);
    if (localCursor != null)
    {
      localCursor.moveToFirst();
      MyData.strPicPath = localCursor.getString(1);
      MTDebug.Print("MyData.strPicPath      " + MyData.strPicPath);
      if (!new File(MyData.strPicPath).exists())
      {
        finish();
        Toast.makeText(this, "加载图片失败", 0).show();
        MyPro.allScan(this);
        return;
      }
    }
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    getWindow().setFlags(1024, 1024);
    super.onCreate(paramBundle);
    setContentView(2130903046);
    System.gc();
    setBtns();
    this.mChooseDialog = new ChoosePicDialog(this);
    this.mChooseDialog.setDisplay();
    MTDebug.memeryUsed("ChoosePicActivity onCreate");
  }
  
  protected void onDestroy()
  {
    try
    {
      if (this.mChooseDialog != null)
      {
        this.mChooseDialog.dismiss();
        this.mChooseDialog = null;
      }
      super.onDestroy();
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
  }
  
  protected void onResume()
  {
    try
    {
      this.mChooseDialog.refreshView();
      super.onResume();
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
  }
  
  protected void onStart()
  {
    super.onStart();
  }
  
  //注释：进入到美图秀秀的具体效果设置修改页面，我们接着查看MtxxActivity的具体代码
  public void toMtxxActivity()
  {
    
    try
    {
      Intent localIntent = new Intent();
      localIntent.setClass(this, MtxxActivity.class);
      startActivity(localIntent);
      finish();
      overridePendingTransition(2130968577, 2130968578);
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
}


````

3、ChoosePicDialog对话框的具体代码

```java
package com.mt.mtxx.tools;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.net.Uri;
import android.os.Environment;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.Window;
import android.view.WindowManager.LayoutParams;
import android.widget.Button;
import android.widget.Toast;
import com.mt.mtxx.image.ImageProcess;
import com.mt.mtxx.mtxx.MTDebug;
import com.mt.mtxx.mtxx.MtxxActivity;
import com.mt.mtxx.mtxx.MyData;
import com.mt.mtxx.operate.OptHistory;
import com.mt.mtxx.operate.OptMiddle;
import java.io.File;

public class ChoosePicDialog
  extends Dialog
  implements View.OnClickListener, View.OnTouchListener
{
  private static Context context;
  public static Window window = null;
  //注释：这个按钮是我们需要的，选择一张具体的图片，我们查看他的点击事件
  private Button btn_choosePic_choosePic = null;
  private Button btn_choosePic_photograph = null;
  private Button btn_choosePic_returnLast = null;
  private Button btn_choosePic_returnMainView = null;
  private File f;
  private boolean isProcessing = false;
  private String lastPicPath;
  
  public ChoosePicDialog(Context paramContext)
  {
    super(paramContext);
    context = paramContext;
  }
  
  private void findView()
  {
    this.btn_choosePic_returnLast = ((Button)findViewById(2131230727));
    this.btn_choosePic_choosePic = ((Button)findViewById(2131230729));
    this.btn_choosePic_photograph = ((Button)findViewById(2131230731));
    this.btn_choosePic_returnMainView = ((Button)findViewById(2131230733));
  }
  
  private void initData()
  {
    try
    {
      MyData.m_optMiddle.m_pHistory = OptHistoryTools.ReadOptHistory();
      if (MyData.m_optMiddle.m_pHistory != null)
      {
        String str = MyData.m_optMiddle.m_pHistory.GetPicPath(MyData.m_optMiddle.m_pHistory.m_nDoneListPos);
        if (str != null)
        {
          MTDebug.Print("returnLastOpt index=" + str);
          this.lastPicPath = ("/sdcard/.MTXX/HISTORY/" + str + ".jpg");
          this.f = new File(this.lastPicPath);
          MTDebug.Print("MyData.m_optMiddle.m_pHistory.strPicPath" + MyData.m_optMiddle.m_pHistory.getStrPicPath());
          MyData.strPicPath = MyData.m_optMiddle.m_pHistory.getStrPicPath();
          MyData.fScaleCut = MyData.m_optMiddle.m_pHistory.getfScaleCut();
          MyData.nPicDstWidth = MyData.m_optMiddle.m_pHistory.getnPicDstWidth();
          if ((this.f.exists()) && (MyData.strPicPath != null)) {
            return;
          }
          MTDebug.Print("File is null");
          this.btn_choosePic_returnLast.setBackgroundResource(2130837597);
          this.btn_choosePic_returnLast.setEnabled(false);
          return;
        }
      }
      this.btn_choosePic_returnLast.setBackgroundResource(2130837597);
      this.btn_choosePic_returnLast.setEnabled(false);
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  private void photograph(Context paramContext)
  {
    try
    {
      MyData.strPicPath = "/sdcard/.MTXX/camera.jpg";
      Object localObject = new File(MyData.strPicPath);
      if (((File)localObject).exists()) {
        ((File)localObject).delete();
      }
      localObject = new Intent("android.media.action.IMAGE_CAPTURE");
      ((Intent)localObject).putExtra("output", Uri.fromFile(new File(Environment.getExternalStorageDirectory(), ".MTXX/camera.jpg")));
      ((Intent)localObject).putExtra("android.intent.extra.videoQuality", 0);
      ((Activity)paramContext).startActivityForResult((Intent)localObject, 0);
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  private void setListener()
  {
    this.btn_choosePic_returnLast.setOnClickListener(this);
    this.btn_choosePic_choosePic.setOnClickListener(this);
    this.btn_choosePic_photograph.setOnClickListener(this);
    this.btn_choosePic_returnMainView.setOnClickListener(this);
    this.btn_choosePic_returnLast.setOnTouchListener(this);
    this.btn_choosePic_choosePic.setOnTouchListener(this);
    this.btn_choosePic_photograph.setOnTouchListener(this);
    this.btn_choosePic_returnMainView.setOnTouchListener(this);
  }
  
  //注释：选择图片之后，获取到图片的具体路径，然后返回给之前的ChooseActivity
  public void choosePic()
  {
    try
    {
      Intent localIntent = new Intent();
      localIntent.setType("image/*");
      localIntent.setAction("android.intent.action.GET_CONTENT");
      ((Activity)context).startActivityForResult(localIntent, 1);
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public void onClick(View paramView)
  {
    if (this.isProcessing) {
      return;
    }
    this.isProcessing = true;
    if (paramView.getId() == 2131230727) {
      returnLastOpt(context);
    }
    for (;;)
    {
      this.isProcessing = false;
      return;
      if (paramView.getId() == 2131230729)
      {
        choosePic();
      }
      else if (paramView.getId() == 2131230731)
      {
        photograph(context);
      }
      else if (paramView.getId() == 2131230733)
      {
        dismiss();
        ((Activity)context).finish();
        ((Activity)context).overridePendingTransition(2130968577, 2130968578);
      }
    }
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    if (paramInt == 4)
    {
      dismiss();
      ((Activity)context).finish();
      ((Activity)context).overridePendingTransition(2130968577, 2130968578);
      return true;
    }
    return super.onKeyDown(paramInt, paramKeyEvent);
  }
  
  public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
  {
    int i = paramView.getId();
    int j = paramMotionEvent.getAction();
    if (i == 2131230727) {
      if (j == 1) {
        this.btn_choosePic_returnLast.setBackgroundResource(2130837559);
      }
    }
    for (;;)
    {
      return false;
      this.btn_choosePic_returnLast.setBackgroundResource(2130837560);
      continue;
      if (i == 2131230729)
      {
        if (j == 1) {
          this.btn_choosePic_choosePic.setBackgroundResource(2130837555);
        } else {
          this.btn_choosePic_choosePic.setBackgroundResource(2130837556);
        }
      }
      else if (i == 2131230731)
      {
        if (j == 1) {
          this.btn_choosePic_photograph.setBackgroundResource(2130837557);
        } else {
          this.btn_choosePic_photograph.setBackgroundResource(2130837558);
        }
      }
      else if (i == 2131230733) {
        if (j == 1) {
          this.btn_choosePic_returnMainView.setBackgroundResource(2130837561);
        } else {
          this.btn_choosePic_returnMainView.setBackgroundResource(2130837562);
        }
      }
    }
  }
  
  public void refreshView()
  {
    this.btn_choosePic_choosePic.setBackgroundResource(2130837555);
    this.btn_choosePic_photograph.setBackgroundResource(2130837557);
  }
  
  public void returnLastOpt(Context paramContext)
  {
    try
    {
      if (!this.f.exists())
      {
        ((Activity)paramContext).finish();
        Toast.makeText((Activity)paramContext, "加载图片失败", 0).show();
        return;
      }
      Bitmap localBitmap = ImageProcess.PreviewBigPic(this.lastPicPath, Bitmap.Config.ARGB_8888);
      MTDebug.Print("returnLastOpt MyData.nBmpDstW=" + MyData.nBmpDstW + " MyData.nBmpDstH=" + MyData.nBmpDstH);
      MyData.bmpDst = ImageProcess.FittingWindow(localBitmap, MyData.nBmpDstW, MyData.nBmpDstH, true);
      MTDebug.Print("returnLastOpt w=" + MyData.bmpDst.getWidth() + " MyData.strPicPath=" + MyData.strPicPath);
      MyData.isLoadLast = true;
      MtxxActivity.loadLastPic = true;
      paramContext.startActivity(new Intent(paramContext, MtxxActivity.class));
      ((Activity)paramContext).overridePendingTransition(2130968577, 2130968578);
      ((Activity)paramContext).finish();
      return;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
  }
  
  public void setDisplay()
  {
    setContentView(2130903041);
    setProperty();
    findView();
    setListener();
    initData();
    show();
  }
  
  public void setProperty()
  {
    window = getWindow();
    WindowManager.LayoutParams localLayoutParams = window.getAttributes();
    localLayoutParams.x = 0;
    localLayoutParams.y = 0;
    window.setBackgroundDrawableResource(2130837513);
    window.setAttributes(localLayoutParams);
  }
}

```

MtxxActivity的具体代码：

```java
package com.mt.mtxx.mtxx;

import android.app.Activity;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.ContentResolver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Toast;
import com.mt.mtxx.image.ImageProcess;
import com.mt.mtxx.operate.OptHistory;
import com.mt.mtxx.operate.OptMiddle;
import com.mt.mtxx.tools.ImageTestButton;
import com.mt.mtxx.tools.OptHistoryTools;
import java.io.File;

public class MtxxActivity
  extends Activity
{
  private static final int LOAD_PIC = 258;
  private static final int REFRESH_CAN_UNDO = 259;
  private static final int TIMER_INVALIDATE = 257;
  private static final int dialog1 = 0;
  private static final int dialog2 = 1;
  public static boolean fromCamera = false;
  public static boolean loadLastPic;
  public static boolean loadPic = false;
  private ImageTestButton btn_color;
  private ImageButton btn_cut;
  private RelativeLayout btn_cuts;
  private ImageTestButton btn_edit;
  private ImageTestButton btn_effect;
  private ImageTestButton btn_frame;
  private Button btn_last;
  private Button btn_next;
  private ImageButton btn_rotate;
  private RelativeLayout btn_rotates;
  private ImageButton btn_sharp;
  private RelativeLayout btn_sharps;
  private ImageTestButton btn_weak;
  private Animation closeAnimation;
  private float density = MyData.nDensity;
  private boolean isButtonDown = false;
  public boolean isLoadOver = false;
  boolean isSave = false;
  public int m_nTest = 0;
  private LinearLayout menuView;
  public ProgressDialog myDialog = null;
  Handler myHandler = new Handler()
  {
    public void handleMessage(Message paramAnonymousMessage)
    {
      switch (paramAnonymousMessage.what)
      {
      }
      for (;;)
      {
        super.handleMessage(paramAnonymousMessage);
        return;
        if ((MyData.bmpDst == null) || (MyData.bmpDst.isRecycled()))
        {
          MyData.strPicPath = null;
          MTDebug.Print("_______handleMessage   MyData.strPicPath = null");
          MtxxActivity.this.finish();
          Toast.makeText(MtxxActivity.this, "无法加载该图片!", 0).show();
          return;
        }
        MtxxActivity.this.viewmain.setPic();
        MtxxActivity.this.viewmain.invalidate();
        MtxxActivity.this.cando();
        continue;
        MtxxActivity.this.viewmain.setPic();
        MtxxActivity.this.viewmain.invalidate();
        MtxxActivity.this.cando();
        continue;
        MtxxActivity.this.cando();
      }
    }
  };
  public int nCurGallerySelect;
  public int[] nGalleryButtonId;
  public int nGalleryButtonNum;
  public int[] nGalleryButtonTextId;
  private Animation openAnimation;
  public String picFile;
  public String picName;
  public String picPath;
  private String[] sListId;
  String sSavePath = "";
  private int textlong;
  public ViewMain viewmain;
  
  static
  {
    loadLastPic = false;
    System.loadLibrary("mtimage-jni");
  }
  
  private boolean JniRelease(int paramInt)
  {
    switch (paramInt)
    {
    }
    for (;;)
    {
      return true;
      ImageProcess.SharpPreviewRelease();
    }
  }
  
  private Dialog buildReturnDialog(Context paramContext)
  {
    paramContext = new AlertDialog.Builder(paramContext);
    paramContext.setTitle("确定放弃该图片?");
    paramContext.setPositiveButton(2131099691, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        new Thread()
        {
          public void run()
          {
            try
            {
              MtxxActivity.this.saveHistory();
              return;
            }
            catch (Exception localException)
            {
              localException.printStackTrace();
              return;
            }
            finally
            {
              MtxxActivity.this.isSave = true;
            }
          }
        }.start();
        MtxxActivity.this.finish();
        MtxxActivity.this.overridePendingTransition(2130968577, 2130968578);
      }
    });
    paramContext.setNegativeButton(2131099692, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        MtxxActivity.this.dismissDialog(0);
        System.gc();
      }
    });
    return paramContext.create();
  }
  
  private boolean loadBitmap()
  {
    try
    {
      this.isLoadOver = false;
      new Thread()
      {
        ProgressDialog myDialog = ProgressDialog.show(MtxxActivity.this, "请稍等片刻...", "正在打开图片", true);
        
        public void run()
        {
          try
          {
            MyData.m_optMiddle.loadPic(MtxxActivity.this);
            MTDebug.Print("MyData.bmpDst w=" + MyData.bmpDst.getWidth());
            MyData.m_optMiddle.m_pHistory = new OptHistory();
            MyData.m_optMiddle.m_pHistory.AddDone(1001, 0.0F, MyData.bmpDst, true);
            MyData.fScaleCut = 1.0F;
            MTDebug.Print("MyData.bmpDst2 w=" + MyData.bmpDst.getWidth());
            Message localMessage1;
            return;
          }
          catch (Exception localException)
          {
            localException.printStackTrace();
            Message localMessage2;
            return;
          }
          finally
          {
            this.myDialog.dismiss();
            MtxxActivity.this.isLoadOver = true;
            Message localMessage3 = new Message();
            localMessage3.what = 257;
            MtxxActivity.this.myHandler.sendMessage(localMessage3);
          }
        }
      }.start();
      return true;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
  }
  
  private boolean loadCameraPic()
  {
    try
    {
      new Thread()
      {
        ProgressDialog myDialog = ProgressDialog.show(MtxxActivity.this, "请稍等片刻...", "正在打开图片", true);
        
        public void run()
        {
          try
          {
            MyData.strPicPath = MyData.strTempSDCardPath + "/camera.jpg";
            MyData.picSourceType = 1;
            MyData.fScaleCut = 1.0F;
            MTDebug.Print("MyData.strPicPath" + MyData.strPicPath);
            if (!new File(MyData.strPicPath).exists())
            {
              localObject1 = MyPro.getPhotoPath();
              if (localObject1 != "")
              {
                MyData.strPicPath = (String)localObject1;
                if (!new File(MyData.strPicPath).exists())
                {
                  MtxxActivity.this.finish();
                  Toast.makeText(MtxxActivity.this, "该相机不支持本程序,请返回上一操作重新选择拍照软件!", 0).show();
                  this.myDialog.dismiss();
                  localObject1 = new Message();
                  ((Message)localObject1).what = 258;
                  MtxxActivity.this.myHandler.sendMessage((Message)localObject1);
                }
              }
              else
              {
                MtxxActivity.this.finish();
                Toast.makeText(MtxxActivity.this, "该相机不支持本程序,请返回上一操作重新选择拍照软件!", 0).show();
                this.myDialog.dismiss();
                localObject1 = new Message();
                ((Message)localObject1).what = 258;
                MtxxActivity.this.myHandler.sendMessage((Message)localObject1);
                return;
              }
            }
            MyData.m_optMiddle.loadPic(MtxxActivity.this);
            MyData.m_optMiddle.m_pHistory = new OptHistory();
            MyData.m_optMiddle.m_pHistory.AddDone(1001, 0.0F, MyData.bmpDst, true);
            MtxxActivity.fromCamera = false;
            this.myDialog.dismiss();
            Object localObject1 = new Message();
            ((Message)localObject1).what = 258;
            MtxxActivity.this.myHandler.sendMessage((Message)localObject1);
            return;
          }
          catch (Exception localException)
          {
            localException.printStackTrace();
            Message localMessage1;
            return;
          }
          finally
          {
            this.myDialog.dismiss();
            Message localMessage2 = new Message();
            localMessage2.what = 258;
            MtxxActivity.this.myHandler.sendMessage(localMessage2);
          }
        }
      }.start();
      return true;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
      MTDebug.Print("Load Camera false");
    }
    return false;
  }
  
  public boolean addStyle(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return true;
    case 2100: 
      try
      {
        MyData.m_optMiddle.m_pHistory.AddDone(1037, 0.0F, MyData.bmpDst, true);
        return true;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
        return true;
      }
    case 2101: 
      MyData.m_optMiddle.m_pHistory.AddDone(1019, 0.0F, MyData.bmpDst, true);
      return true;
    case 2102: 
      MyData.m_optMiddle.m_pHistory.AddDone(1020, 0.0F, MyData.bmpDst, true);
      return true;
    case 2103: 
      MyData.m_optMiddle.m_pHistory.AddDone(1021, 0.0F, MyData.bmpDst, true);
      return true;
    case 2104: 
      MyData.m_optMiddle.m_pHistory.AddDone(1030, 0.0F, MyData.bmpDst, true);
      return true;
    case 2105: 
      MyData.m_optMiddle.m_pHistory.AddDone(1023, 0.0F, MyData.bmpDst, true);
      return true;
    case 2106: 
      MyData.m_optMiddle.m_pHistory.AddDone(1028, 0.0F, MyData.bmpDst, true);
      return true;
    case 2107: 
      MyData.m_optMiddle.m_pHistory.AddDone(1027, 0.0F, MyData.bmpDst, true);
      return true;
    case 2108: 
      MyData.m_optMiddle.m_pHistory.AddDone(1038, 0.0F, MyData.bmpDst, true);
      return true;
    case 2109: 
      MyData.m_optMiddle.m_pHistory.AddDone(1034, 0.0F, MyData.bmpDst, true);
      return true;
    case 2110: 
      MyData.m_optMiddle.m_pHistory.AddDone(1035, 0.0F, MyData.bmpDst, true);
      return true;
    case 2111: 
      MyData.m_optMiddle.m_pHistory.AddDone(1026, 0.0F, MyData.bmpDst, true);
      return true;
    case 2112: 
      MyData.m_optMiddle.m_pHistory.AddDone(1022, 0.0F, MyData.bmpDst, true);
      return true;
    case 2113: 
      MyData.m_optMiddle.m_pHistory.AddDone(1033, 0.0F, MyData.bmpDst, true);
      return true;
    case 2114: 
      MyData.m_optMiddle.m_pHistory.AddDone(1031, 0.0F, MyData.bmpDst, true);
      return true;
    case 2115: 
      MyData.m_optMiddle.m_pHistory.AddDone(1032, 0.0F, MyData.bmpDst, true);
      return true;
    }
    MyData.m_optMiddle.m_pHistory.AddDone(1048, 0.0F, MyData.bmpDst, true);
    return true;
  }
  
  public void cando()
  {
    if (MyData.m_optMiddle.m_pHistory.isCanUndo()) {
      this.btn_last.setBackgroundResource(2130837584);
    }
    while (MyData.m_optMiddle.m_pHistory.isCanRedo())
    {
      this.btn_next.setBackgroundResource(2130837575);
      return;
      this.btn_last.setBackgroundResource(2130837582);
    }
    this.btn_next.setBackgroundResource(2130837573);
  }
  
  protected void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    MTDebug.Print("requestCode=" + paramInt1 + " resultCode=" + paramInt2);
    MTDebug.printAvilableMemery2("onActivityResultMTXX");
    if ((paramInt1 != 0) || (paramInt2 != -1))
    {
      if ((paramInt1 != 1) || (paramInt2 != -1)) {
        break label181;
      }
      if (paramIntent == null) {}
    }
    Object localObject2;
    label181:
    label224:
    do
    {
      for (;;)
      {
        try
        {
          Uri localUri = paramIntent.getData();
          localObject2 = getContentResolver().query(localUri, null, null, null, null);
          if (localObject2 == null) {
            continue;
          }
          ((Cursor)localObject2).moveToFirst();
          MyData.strPicPath = ((Cursor)localObject2).getString(1);
        }
        catch (Exception localException2)
        {
          localException2.printStackTrace();
          continue;
          if (localException2 == null) {
            continue;
          }
          MyData.strPicPath = localException2.getPath();
          try
          {
            MyData.bmpDst = null;
            System.gc();
            loadPic = true;
            toMain();
          }
          catch (Exception localException3)
          {
            localException3.printStackTrace();
          }
          continue;
        }
        try
        {
          loadPic = true;
          toMain();
          super.onActivityResult(paramInt1, paramInt2, paramIntent);
          return;
        }
        catch (Exception localException1)
        {
          localException1.printStackTrace();
          continue;
        }
        try
        {
          JniRelease(paramInt1);
          if (paramInt1 != 3001) {
            break;
          }
          this.viewmain.refreshPic();
          return;
        }
        catch (Exception localException4)
        {
          localException4.printStackTrace();
        }
      }
      if (MyData.bmpDst != null) {
        break;
      }
      MTDebug.Print("onActivityResultMTXX MyData.bmpDst == null");
    } while (paramInt2 == 0);
    this.viewmain.refreshPic();
    switch (paramInt1)
    {
    }
    for (;;)
    {
      cando();
      break;
      if (!MyData.bmpDst.isRecycled()) {
        break label224;
      }
      MTDebug.Print("onActivityResultMTXX MyData.bmpDst.isRecycled()");
      break label224;
      float f1 = paramIntent.getIntExtra("left", 0);
      float f2 = paramIntent.getIntExtra("top", 0);
      float f3 = paramIntent.getIntExtra("right", 0);
      float f4 = paramIntent.getIntExtra("bottom", 0);
      float f5 = paramIntent.getFloatExtra("curScale", 0.0F);
      Object localObject1 = MyData.m_optMiddle.m_pHistory;
      localObject2 = MyData.bmpDst;
      ((OptHistory)localObject1).AddDone(1003, new float[] { f1, f2, f3, f4, f5 }, (Bitmap)localObject2);
      continue;
      f1 = paramIntent.getFloatExtra("angle", 0.0F);
      f2 = paramIntent.getFloatExtra("leftright", 0.0F);
      f3 = paramIntent.getFloatExtra("mirror", 0.0F);
      f4 = paramIntent.getFloatExtra("curScale", 0.0F);
      localObject1 = MyData.m_optMiddle.m_pHistory;
      localObject2 = MyData.bmpDst;
      ((OptHistory)localObject1).AddDone(1004, new float[] { f1, f2, f3, f4 }, (Bitmap)localObject2);
      MTDebug.printAvilableMemery(this);
      continue;
      localObject1 = new float[4];
      localObject1[0] = paramIntent.getFloatExtra("radius", -100.0F);
      localObject1[1] = paramIntent.getFloatExtra("depth", -100.0F);
      MyData.m_optMiddle.m_pHistory.AddDone(1012, (float[])localObject1, MyData.bmpDst);
      continue;
      addStyle(paramIntent.getIntExtra("select", -1));
      continue;
      localObject1 = paramIntent.getFloatArrayExtra("weak");
      if (localObject1.length > 0)
      {
        MyData.m_optMiddle.m_pHistory.AddDone(1017, (float[])localObject1, MyData.bmpDst);
        continue;
        f1 = paramIntent.getFloatExtra("bright", -100.0F);
        if (f1 > -100.0F) {
          MyData.m_optMiddle.m_pHistory.AddDone(1008, f1, MyData.bmpDst, true);
        }
        f1 = paramIntent.getFloatExtra("contrast", -100.0F);
        if (f1 > -100.0F) {
          MyData.m_optMiddle.m_pHistory.AddDone(1009, f1, MyData.bmpDst, true);
        }
        f1 = paramIntent.getFloatExtra("saturation", -100.0F);
        if (f1 > -100.0F)
        {
          MyData.m_optMiddle.m_pHistory.AddDone(1010, f1, MyData.bmpDst, true);
          continue;
          localObject1 = new float[1];
          localObject2 = new float[1];
          localObject1[0] = paramIntent.getIntExtra("white", -100);
          localObject2[0] = paramIntent.getIntExtra("microdermabrasion", -100);
          if (localObject1[0] > -100.0F) {
            MyData.m_optMiddle.m_pHistory.AddDone(1013, (float[])localObject1, MyData.bmpDst);
          }
          if (localObject2[0] > -100.0F)
          {
            MyData.m_optMiddle.m_pHistory.AddDone(1060, (float[])localObject2, MyData.bmpDst);
            continue;
            localObject1 = new float[3];
            localObject1[0] = paramIntent.getIntExtra("type", -1);
            localObject1[1] = paramIntent.getIntExtra("colorfultype", -1);
            localObject1[2] = paramIntent.getFloatExtra("curScale", 0.0F);
            int i = paramIntent.getIntExtra("select", -1);
            MTDebug.Print("result[0]=" + localObject1[0] + " nSelect=" + i);
            if ((localObject1[0] == 1.0F) && (i == 6))
            {
              MyData.m_optMiddle.m_pHistory.AddDone(1048, 0.0F, MyData.bmpDst, true);
            }
            else
            {
              localObject2 = paramIntent.getStringExtra("path");
              MyData.m_optMiddle.m_pHistory.AddDone(1050, (float[])localObject1, (String)localObject2, MyData.bmpDst);
            }
          }
        }
      }
    }
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    getWindow().setFlags(1024, 1024);
    setContentView(2130903047);
    System.gc();
    if ((MyData.nScreenW == 0) || (MyData.nScreenH == 0) || (MyData.nDensity == 0.0F))
    {
      paramBundle = getWindowManager().getDefaultDisplay();
      localObject = new DisplayMetrics();
      paramBundle.getMetrics((DisplayMetrics)localObject);
      MyData.nScreenW = ((DisplayMetrics)localObject).widthPixels;
      MyData.nScreenH = ((DisplayMetrics)localObject).heightPixels;
      MyData.nBmpDstW = MyData.nScreenW;
      MyData.nBmpDstH = MyData.nScreenH - 100;
      MyData.nDensity = ((DisplayMetrics)localObject).density;
      MTDebug.Print("MTXXActivity onCreate MyData.nScreenW=" + MyData.nScreenW + " MyData.nScreenH=" + MyData.nScreenH + " MyData.nDensity=" + MyData.nDensity);
    }
    MTDebug.Print("MTXXActivity1 onCreate MyData.nScreenW=" + MyData.nScreenW + " MyData.nScreenH=" + MyData.nScreenH + " MyData.nDensity=" + MyData.nDensity);
    this.viewmain = ((ViewMain)findViewById(2131230795));
    paramBundle = (Button)findViewById(2131230791);
    this.btn_last = ((Button)findViewById(2131230793));
    this.btn_next = ((Button)findViewById(2131230794));
    Object localObject = (Button)findViewById(2131230792);
    this.btn_edit = ((ImageTestButton)findViewById(2131230803));
    this.btn_edit.setResources(2130837588, 2130837589);
    this.btn_color = ((ImageTestButton)findViewById(2131230804));
    this.btn_color.setResources(2130837586, 2130837587);
    this.btn_weak = ((ImageTestButton)findViewById(2131230805));
    this.btn_weak.setResources(2130837594, 2130837595);
    this.btn_effect = ((ImageTestButton)findViewById(2131230806));
    this.btn_effect.setResources(2130837590, 2130837591);
    this.btn_frame = ((ImageTestButton)findViewById(2131230807));
    this.btn_frame.setResources(2130837592, 2130837593);
    paramBundle.setOnClickListener(new ClickListenerReturn());
    paramBundle.setOnTouchListener(new onTouchListenerReturn());
    this.btn_last.setOnClickListener(new ClickListenerLast());
    this.btn_last.setOnTouchListener(new onTouchListenerLast());
    this.btn_next.setOnClickListener(new ClickListenerNext());
    this.btn_next.setOnTouchListener(new onTouchListenerNext());
    ((Button)localObject).setOnClickListener(new ClickListenerSave());
    ((Button)localObject).setOnTouchListener(new onTouchListenerSave());
    this.btn_edit.setOnClickListener(new ClickListenerEdit(null));
    this.btn_color.setOnClickListener(new ClickListenerColor());
    this.btn_weak.setOnClickListener(new ClickListenerWeak());
    this.btn_effect.setOnClickListener(new ClickListenerEffect());
    this.btn_frame.setOnClickListener(new ClickListenerFrame());
    this.menuView = ((LinearLayout)findViewById(2131230796));
    this.btn_cut = ((ImageButton)findViewById(2131230798));
    this.btn_cut.setOnClickListener(new OnClickListenerCut());
    this.btn_cut.setOnTouchListener(new OnTouchListenerCut());
    this.btn_rotate = ((ImageButton)findViewById(2131230800));
    this.btn_rotate.setOnClickListener(new OnClickListenerRotate());
    this.btn_rotate.setOnTouchListener(new OnTouchListenerRotate());
    this.btn_sharp = ((ImageButton)findViewById(2131230802));
    this.btn_sharp.setOnClickListener(new OnClickListenerSharp());
    this.btn_sharp.setOnTouchListener(new OnTouchListenerSharp());
    this.btn_cuts = ((RelativeLayout)findViewById(2131230797));
    this.btn_cuts.setOnClickListener(new OnClickListenerCut());
    this.btn_cuts.setOnTouchListener(new OnTouchListenerCut());
    this.btn_rotates = ((RelativeLayout)findViewById(2131230799));
    this.btn_rotates.setOnClickListener(new OnClickListenerRotate());
    this.btn_rotates.setOnTouchListener(new OnTouchListenerRotate());
    this.btn_sharps = ((RelativeLayout)findViewById(2131230801));
    this.btn_sharps.setOnClickListener(new OnClickListenerSharp());
    this.btn_sharps.setOnTouchListener(new OnTouchListenerSharp());
    MTDebug.memeryUsed("MtxxActivity onCreate0");
    for (;;)
    {
      try
      {
        MTDebug.Print("MTXX1");
        if (MyData.bmpDst != null) {
          continue;
        }
        MTDebug.Print("2MTXX MyData.bmpDst == null");
        if (!fromCamera) {
          continue;
        }
        MTDebug.Print("MTXX2");
        loadCameraPic();
        System.gc();
        MTDebug.memeryUsed("MtxxActivity onCreate01");
      }
      catch (Exception paramBundle)
      {
        paramBundle.printStackTrace();
        continue;
        MTDebug.Print("MTXX3");
        this.viewmain.setVisibility(0);
        this.picPath = MyData.strPicPath;
        if ((this.picPath != "") && (this.picPath.lastIndexOf("/") >= 0) && (this.picPath.length() >= 4)) {
          continue;
        }
        MyData.strPicPath = null;
        finish();
        Toast.makeText(this, "无法加载该图片!", 0).show();
        return;
        if ((this.picPath == "") || (this.picPath.length() <= 4)) {
          continue;
        }
        paramBundle = this.picPath.substring(this.picPath.length() - 3, this.picPath.length());
        MTDebug.Print("___________extName=" + paramBundle);
        if ((paramBundle.equalsIgnoreCase("bmp")) || (paramBundle.equalsIgnoreCase("jpg")) || (paramBundle.equalsIgnoreCase("peg")) || (paramBundle.equalsIgnoreCase("png"))) {
          continue;
        }
        MyData.strPicPath = null;
        finish();
        Toast.makeText(this, "无法加载该图片!", 0).show();
        return;
        MTDebug.memeryUsed("MtxxActivity onCreate02");
        this.picFile = this.picPath.substring(0, this.picPath.lastIndexOf("/") + 1);
        this.picName = this.picPath.substring(this.picPath.lastIndexOf("/") + 1, this.picPath.length() - 4);
        if (!loadPic) {
          continue;
        }
        MTDebug.Print("MTXX4");
        loadBitmap();
        loadPic = false;
        MTDebug.memeryUsed("MtxxActivity onCreate03");
        if (MyData.bmpDst != null) {
          continue;
        }
        MTDebug.Print("21MTXX MyData.bmpDst == null");
        System.gc();
        if (MyData.bmpDst != null) {
          continue;
        }
        MTDebug.Print("22MTXX MyData.bmpDst == null");
        continue;
        if (!loadLastPic) {
          continue;
        }
        MTDebug.Print("MTXX5 MyData.strPicPath=" + MyData.strPicPath + " " + MyData.fScaleCut + " MyData.nPicDstWidth=" + MyData.nPicDstWidth);
        MyData.m_optMiddle.m_pHistory = OptHistoryTools.ReadOptHistory();
        if (MyData.m_optMiddle.m_pHistory != null) {
          continue;
        }
        MyData.m_optMiddle.m_pHistory = new OptHistory();
        if (MyData.bmpDst != null) {
          continue;
        }
        MTDebug.Print("0MTXX MyData.bmpDst == null");
        MyData.m_optMiddle.m_pHistory.AddDone(1001, 0.0F, MyData.bmpDst, true);
        if (MyData.bmpDst != null) {
          continue;
        }
        MTDebug.Print("2MTXX MyData.bmpDst == null");
        MyData.m_optMiddle.m_pHistory.setNeedSave();
        cando();
        continue;
        if (!MyData.bmpDst.isRecycled()) {
          continue;
        }
        MTDebug.Print("1tMTXX MyData.bmpDst.isRecycled()");
        continue;
        if (!MyData.bmpDst.isRecycled()) {
          continue;
        }
        MTDebug.Print("3MTXX MyData.bmpDst.isRecycled()");
        continue;
        if (!MyData.bmpDst.isRecycled()) {
          continue;
        }
        MTDebug.Print("31MTXX MyData.bmpDst.isRecycled()");
        continue;
        if (!MyData.bmpDst.isRecycled()) {
          continue;
        }
        MTDebug.Print("32MTXX MyData.bmpDst.isRecycled()");
        continue;
        if (!MyData.bmpDst.isRecycled()) {
          continue;
        }
        MTDebug.Print("5MTXX MyData.bmpDst.isRecycled()");
        continue;
      }
      MTDebug.memeryUsed("MtxxActivity onCreate04");
      this.openAnimation = AnimationUtils.loadAnimation(this, 2130968591);
      MTDebug.memeryUsed("MtxxActivity onCreate05");
      this.closeAnimation = AnimationUtils.loadAnimation(this, 2130968590);
      if (MyData.bmpDst != null) {
        continue;
      }
      MTDebug.Print("4MTXX MyData.bmpDst == null");
      MTDebug.memeryUsed("MtxxActivity onCreate");
      return;
      if (MyData.bmpDst.isRecycled()) {
        MTDebug.Print("3MTXX MyData.bmpDst.isRecycled()");
      }
    }
  }
  
  protected Dialog onCreateDialog(int paramInt)
  {
    if (paramInt == 0) {
      return buildReturnDialog(this);
    }
    return null;
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    if (paramInt == 4)
    {
      saveHistory();
      startActivity(new Intent(this, ChoosePicActivity.class));
      finish();
      overridePendingTransition(2130968577, 2130968578);
      return true;
    }
    if (paramInt == 82) {
      return true;
    }
    return super.onKeyDown(paramInt, paramKeyEvent);
  }
  
  protected void onStart()
  {
    try
    {
      long l = MyPro.readSDCard();
      if (l < 0L)
      {
        MTDebug.Print("存储卡不可用！");
        MyPro.closeSelf();
        return;
      }
      if (l < 10240L)
      {
        MTDebug.Print("存储卡剩余空间不足！");
        MyPro.closeSelf();
        return;
      }
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    for (;;)
    {
      super.onStart();
      return;
      if (MyData.strPicPath == null)
      {
        MTDebug.Print("MtxxActivity onStart MyData.strPicPath == null");
        MyPro.closeSelf();
        return;
      }
      System.gc();
      if ((MyData.bmpDst == null) || (MyData.bmpDst.isRecycled()))
      {
        Bitmap localBitmap = MyData.m_optMiddle.m_pHistory.getCurPic();
        if (localBitmap != null)
        {
          MTDebug.PrintError("[onStart] MyData.bmpDst=null");
          MyData.bmpDst = localBitmap;
          this.viewmain.refreshPic();
        }
      }
      MTDebug.memeryUsed("MtxxActivity onStart");
      this.btn_color.isDown = false;
      this.btn_weak.isDown = false;
      this.btn_effect.isDown = false;
      this.btn_frame.isDown = false;
      this.btn_color.setBackgroundDrawable(null);
      this.btn_weak.setBackgroundDrawable(null);
      this.btn_frame.setBackgroundDrawable(null);
      this.btn_effect.setBackgroundDrawable(null);
      if (MyData.bmpDst == null) {
        MTDebug.Print("onStartMTXX MyData.bmpDst == null");
      } else if (MyData.bmpDst.isRecycled()) {
        MTDebug.Print("onStartMTXX MyData.bmpDst.isRecycled()");
      }
    }
  }
  
  public boolean releaseFreeSpace()
  {
    try
    {
      MTDebug.printAvilableMemery2("releaseFreeSpace0");
      if ((this.viewmain.bmpBack != null) && (!this.viewmain.bmpBack.isRecycled()))
      {
        this.viewmain.bmpBack.recycle();
        this.viewmain.bmpBack = null;
      }
      return true;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
  }
  
  public boolean restoreFreeSpace()
  {
    this.viewmain.refreshPic();
    return true;
  }
  
  public boolean saveHistory()
  {
    try
    {
      MTDebug.Print("++++++++++++++save history MyData.strPicPath is" + MyData.strPicPath);
      MyData.m_optMiddle.m_pHistory.setStrPicPath(MyData.strPicPath);
      MyData.m_optMiddle.m_pHistory.setfScaleCut(MyData.fScaleCut);
      MyData.m_optMiddle.m_pHistory.setnPicDstWidth(MyData.nPicDstWidth);
      OptHistoryTools.saveOptHistory(MyData.m_optMiddle.m_pHistory);
      return true;
    }
    catch (Exception localException)
    {
      Log.i("save history", "fail");
    }
    return false;
  }
  
  public void toEdit(int paramInt)
  {
    for (;;)
    {
      try
      {
        localIntent = new Intent();
        switch (paramInt)
        {
        case 1100: 
          localIntent.putExtra("type", paramInt);
          startActivityForResult(localIntent, paramInt);
          overridePendingTransition(2130968576, 2130968577);
          return;
        }
      }
      catch (Exception localException)
      {
        Intent localIntent;
        localException.printStackTrace();
        return;
      }
      localIntent.setClass(this, EditCutActivity.class);
      continue;
      localException.setClass(this, EditRotateActivity.class);
      continue;
      localException.setClass(this, EditBrightActivity.class);
      continue;
      localException.setClass(this, EditSharpActivity.class);
      continue;
      localException.setClass(this, StyleEffectActivity.class);
      continue;
      localException.setClass(this, StyleWeakActivity.class);
      continue;
      localException.setClass(this, ModifyFrameActivity.class);
    }
  }
  
  public void toMain()
  {
    Intent localIntent = new Intent();
    localIntent.setClass(this, MtxxActivity.class);
    startActivity(localIntent);
    finish();
  }
  
  class ClickListenerColor
    implements View.OnClickListener
  {
    ClickListenerColor() {}
    
    public void onClick(View paramView)
    {
      if (!MtxxActivity.this.btn_color.isDown)
      {
        MtxxActivity.this.btn_color.isDown = true;
        MtxxActivity.this.btn_color.changeBtnState(true);
        MtxxActivity.this.menuView.setVisibility(4);
        MtxxActivity.this.btn_edit.isDown = false;
        MtxxActivity.this.btn_weak.isDown = false;
        MtxxActivity.this.btn_effect.isDown = false;
        MtxxActivity.this.btn_frame.isDown = false;
        MtxxActivity.this.btn_color.setBackgroundResource(2130837702);
        MtxxActivity.this.btn_edit.setBackgroundDrawable(null);
        MtxxActivity.this.btn_weak.setBackgroundDrawable(null);
        MtxxActivity.this.btn_effect.setBackgroundDrawable(null);
        MtxxActivity.this.btn_frame.setBackgroundDrawable(null);
      }
      MtxxActivity.this.toEdit(1300);
    }
  }
  
  private class ClickListenerEdit
    implements View.OnClickListener
  {
    private ClickListenerEdit() {}
    
    public void onClick(View paramView)
    {
      try
      {
        if (!MtxxActivity.this.btn_edit.isDown)
        {
          MtxxActivity.this.btn_edit.isDown = true;
          MtxxActivity.this.btn_edit.changeBtnState(true);
          MtxxActivity.this.menuView.setVisibility(0);
          MtxxActivity.this.menuView.startAnimation(MtxxActivity.this.openAnimation);
          MtxxActivity.this.btn_color.isDown = false;
          MtxxActivity.this.btn_weak.isDown = false;
          MtxxActivity.this.btn_effect.isDown = false;
          MtxxActivity.this.btn_frame.isDown = false;
          MtxxActivity.this.btn_edit.setBackgroundResource(2130837702);
          MtxxActivity.this.btn_color.setBackgroundDrawable(null);
          MtxxActivity.this.btn_weak.setBackgroundDrawable(null);
          MtxxActivity.this.btn_effect.setBackgroundDrawable(null);
          MtxxActivity.this.btn_frame.setBackgroundDrawable(null);
          return;
        }
        MtxxActivity.this.btn_edit.isDown = false;
        MtxxActivity.this.btn_edit.changeBtnState(false);
        MtxxActivity.this.menuView.startAnimation(MtxxActivity.this.closeAnimation);
        MtxxActivity.this.menuView.setVisibility(4);
        MtxxActivity.this.btn_edit.setBackgroundDrawable(null);
        return;
      }
      catch (Exception paramView)
      {
        paramView.printStackTrace();
      }
    }
  }
  
  class ClickListenerEffect
    implements View.OnClickListener
  {
    ClickListenerEffect() {}
    
    public void onClick(View paramView)
    {
      if (!MtxxActivity.this.btn_effect.isDown)
      {
        MtxxActivity.this.btn_effect.isDown = true;
        MtxxActivity.this.btn_effect.changeBtnState(true);
        MtxxActivity.this.menuView.setVisibility(4);
        MtxxActivity.this.btn_edit.isDown = false;
        MtxxActivity.this.btn_color.isDown = false;
        MtxxActivity.this.btn_weak.isDown = false;
        MtxxActivity.this.btn_frame.isDown = false;
        MtxxActivity.this.btn_effect.setBackgroundResource(2130837702);
        MtxxActivity.this.btn_edit.setBackgroundDrawable(null);
        MtxxActivity.this.btn_color.setBackgroundDrawable(null);
        MtxxActivity.this.btn_weak.setBackgroundDrawable(null);
        MtxxActivity.this.btn_frame.setBackgroundDrawable(null);
      }
      MtxxActivity.this.toEdit(1200);
    }
  }
  
  class ClickListenerFrame
    implements View.OnClickListener
  {
    ClickListenerFrame() {}
    
    public void onClick(View paramView)
    {
      if (!MtxxActivity.this.btn_frame.isDown)
      {
        MtxxActivity.this.btn_frame.isDown = true;
        MtxxActivity.this.btn_frame.changeBtnState(true);
        MtxxActivity.this.menuView.setVisibility(4);
        MtxxActivity.this.btn_edit.isDown = false;
        MtxxActivity.this.btn_color.isDown = false;
        MtxxActivity.this.btn_weak.isDown = false;
        MtxxActivity.this.btn_effect.isDown = false;
        MtxxActivity.this.btn_frame.setBackgroundResource(2130837702);
        MtxxActivity.this.btn_edit.setBackgroundDrawable(null);
        MtxxActivity.this.btn_color.setBackgroundDrawable(null);
        MtxxActivity.this.btn_weak.setBackgroundDrawable(null);
        MtxxActivity.this.btn_effect.setBackgroundDrawable(null);
      }
      MtxxActivity.this.toEdit(1400);
    }
  }
  
  class ClickListenerLast
    implements View.OnClickListener
  {
    ClickListenerLast() {}
    
    public void onClick(View paramView)
    {
      MTDebug.Print("ClickListenerLast");
      paramView = MyData.m_optMiddle.m_pHistory.Undo();
      if (paramView != null)
      {
        MyData.bmpDst = paramView;
        MtxxActivity.this.viewmain.refreshPic();
      }
      MtxxActivity.this.cando();
    }
  }
  
  class ClickListenerNext
    implements View.OnClickListener
  {
    ClickListenerNext() {}
    
    public void onClick(View paramView)
    {
      MTDebug.Print("ClickListenerNext");
      paramView = MyData.m_optMiddle.m_pHistory.Redo();
      if (paramView != null)
      {
        MyData.bmpDst = paramView;
        MtxxActivity.this.viewmain.refreshPic();
      }
      MtxxActivity.this.cando();
    }
  }
  
  class ClickListenerReturn
    implements View.OnClickListener
  {
    ClickListenerReturn() {}
    
    public void onClick(View paramView)
    {
      if (!MyData.m_optMiddle.m_pHistory.isNeedSave())
      {
        MtxxActivity.this.saveHistory();
        MtxxActivity.this.finish();
        MtxxActivity.this.overridePendingTransition(2130968577, 2130968578);
        return;
      }
      MtxxActivity.this.showDialog(0);
    }
  }
  
  class ClickListenerSave
    implements View.OnClickListener
  {
    boolean isSave = false;
    
    ClickListenerSave() {}
    
    public void onClick(View paramView)
    {
      try
      {
        MTDebug.Print("_______MtxxActivity.this, SaveAndShareActivity.class");
        paramView = new Intent();
        paramView.setClass(MtxxActivity.this, SaveAndShareActivity.class);
        Bundle localBundle = new Bundle();
        localBundle.putString("filePath", MyData.strPicPath);
        paramView.putExtras(localBundle);
        MtxxActivity.this.startActivityForResult(paramView, 3001);
        MtxxActivity.this.overridePendingTransition(2130968576, 2130968577);
        MtxxActivity.this.releaseFreeSpace();
        return;
      }
      catch (Exception paramView)
      {
        paramView.printStackTrace();
      }
    }
  }
  
  class ClickListenerWeak
    implements View.OnClickListener
  {
    ClickListenerWeak() {}
    
    public void onClick(View paramView)
    {
      if (MtxxActivity.this.isButtonDown) {
        return;
      }
      MtxxActivity.this.isButtonDown = true;
      if (!MtxxActivity.this.btn_weak.isDown)
      {
        MtxxActivity.this.btn_weak.isDown = true;
        MtxxActivity.this.btn_weak.changeBtnState(true);
        MtxxActivity.this.menuView.setVisibility(4);
        MtxxActivity.this.btn_edit.isDown = false;
        MtxxActivity.this.btn_color.isDown = false;
        MtxxActivity.this.btn_effect.isDown = false;
        MtxxActivity.this.btn_frame.isDown = false;
        MtxxActivity.this.btn_weak.setBackgroundResource(2130837702);
        MtxxActivity.this.btn_edit.setBackgroundDrawable(null);
        MtxxActivity.this.btn_color.setBackgroundDrawable(null);
        MtxxActivity.this.btn_effect.setBackgroundDrawable(null);
        MtxxActivity.this.btn_frame.setBackgroundDrawable(null);
      }
      MtxxActivity.this.toEdit(1201);
      MtxxActivity.this.isButtonDown = false;
    }
  }
  
  public class ImageApdater
    extends BaseAdapter
  {
    private Context myContext;
    
    public ImageApdater(Context paramContext)
    {
      this.myContext = paramContext;
    }
    
    public int getCount()
    {
      return MtxxActivity.this.nGalleryButtonNum;
    }
    
    public Object getItem(int paramInt)
    {
      return Integer.valueOf(paramInt);
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      localCanvas = null;
      for (;;)
      {
        try
        {
          MTDebug.Print("kkkkkkkkkkkkkkkkkkk");
          paramViewGroup = new ImageView(this.myContext);
          try
          {
            paramView = Bitmap.createBitmap((int)(66.0F * MtxxActivity.this.density), (int)(60.0F * MtxxActivity.this.density), Bitmap.Config.ARGB_8888);
            localCanvas = new Canvas(paramView);
            Object localObject = ImageProcess.FittingWindow(ImageProcess.LoadAssertsPic(MtxxActivity.this.sListId[paramInt], this.myContext.getAssets()), (int)(MtxxActivity.this.density * 29.0F), (int)(MtxxActivity.this.density * 29.0F), true);
            localCanvas.drawBitmap((Bitmap)localObject, 10.0F * MtxxActivity.this.density, 0.0F, null);
            if ((localObject != null) && (!((Bitmap)localObject).isRecycled())) {
              ((Bitmap)localObject).recycle();
            }
            localObject = new Paint(1);
            ((Paint)localObject).setStyle(Paint.Style.FILL);
            ((Paint)localObject).setColor(-1);
            ((Paint)localObject).setTextSize(11.0F * MtxxActivity.this.density);
            String str = MtxxActivity.this.getResources().getString(MtxxActivity.this.nGalleryButtonTextId[paramInt]);
            if (str.length() == 2)
            {
              MtxxActivity.this.textlong = ((int)(12.0F * MtxxActivity.this.density));
              localCanvas.drawText(str, MtxxActivity.this.textlong, 40.0F * MtxxActivity.this.density, (Paint)localObject);
              paramViewGroup.setImageBitmap(paramView);
              paramViewGroup.setScaleType(ImageView.ScaleType.FIT_XY);
              return paramViewGroup;
            }
            if (str.length() != 4) {
              continue;
            }
            MtxxActivity.this.textlong = ((int)(5.0F * MtxxActivity.this.density));
            continue;
            paramView.printStackTrace();
          }
          catch (Exception paramView) {}
        }
        catch (Exception paramView)
        {
          paramViewGroup = localCanvas;
          continue;
        }
        return paramViewGroup;
        MtxxActivity.this.textlong = 0;
      }
    }
  }
  
  class OnClickListenerCut
    implements View.OnClickListener
  {
    OnClickListenerCut() {}
    
    public void onClick(View paramView)
    {
      MtxxActivity.this.toEdit(1100);
    }
  }
  
  class OnClickListenerRotate
    implements View.OnClickListener
  {
    OnClickListenerRotate() {}
    
    public void onClick(View paramView)
    {
      MtxxActivity.this.toEdit(1101);
    }
  }
  
  class OnClickListenerSharp
    implements View.OnClickListener
  {
    OnClickListenerSharp() {}
    
    public void onClick(View paramView)
    {
      MtxxActivity.this.toEdit(1102);
    }
  }
  
  class OnTouchListenerCut
    implements View.OnTouchListener
  {
    OnTouchListenerCut() {}
    
    public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
    {
      if (paramMotionEvent.getAction() == 0) {
        MtxxActivity.this.btn_cut.setBackgroundResource(2130837624);
      }
      for (;;)
      {
        return false;
        if (paramMotionEvent.getAction() == 1) {
          MtxxActivity.this.btn_cut.setBackgroundResource(2130837588);
        }
      }
    }
  }
  
  class OnTouchListenerRotate
    implements View.OnTouchListener
  {
    OnTouchListenerRotate() {}
    
    public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
    {
      if (paramMotionEvent.getAction() == 0) {
        MtxxActivity.this.btn_rotate.setBackgroundResource(2130837626);
      }
      for (;;)
      {
        return false;
        if (paramMotionEvent.getAction() == 1) {
          MtxxActivity.this.btn_rotate.setBackgroundResource(2130837625);
        }
      }
    }
  }
  
  class OnTouchListenerSharp
    implements View.OnTouchListener
  {
    OnTouchListenerSharp() {}
    
    public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
    {
      if (paramMotionEvent.getAction() == 0) {
        MtxxActivity.this.btn_sharp.setBackgroundResource(2130837628);
      }
      for (;;)
      {
        return false;
        if (paramMotionEvent.getAction() == 1) {
          MtxxActivity.this.btn_sharp.setBackgroundResource(2130837627);
        }
      }
    }
  }
  
  class onTouchListenerLast
    implements View.OnTouchListener
  {
    onTouchListenerLast() {}
    
    public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
    {
      if (paramMotionEvent.getAction() == 0) {
        if (MyData.m_optMiddle.m_pHistory.isCanUndo()) {
          MtxxActivity.this.btn_last.setBackgroundResource(2130837583);
        }
      }
      for (;;)
      {
        return false;
        if (paramMotionEvent.getAction() == 1) {
          MtxxActivity.this.cando();
        }
      }
    }
  }
  
  class onTouchListenerNext
    implements View.OnTouchListener
  {
    onTouchListenerNext() {}
    
    public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
    {
      if (paramMotionEvent.getAction() == 0) {
        if (MyData.m_optMiddle.m_pHistory.isCanRedo()) {
          MtxxActivity.this.btn_next.setBackgroundResource(2130837574);
        }
      }
      for (;;)
      {
        return false;
        if (paramMotionEvent.getAction() == 1) {
          MtxxActivity.this.cando();
        }
      }
    }
  }
  
  class onTouchListenerReturn
    implements View.OnTouchListener
  {
    onTouchListenerReturn() {}
    
    public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
    {
      if (paramMotionEvent.getAction() == 0) {
        paramView.setBackgroundResource(2130837577);
      }
      for (;;)
      {
        return false;
        if (paramMotionEvent.getAction() == 1) {
          paramView.setBackgroundResource(2130837576);
        }
      }
    }
  }
  
  class onTouchListenerSave
    implements View.OnTouchListener
  {
    onTouchListenerSave() {}
    
    public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
    {
      if (paramMotionEvent.getAction() == 0) {
        paramView.setBackgroundResource(2130837579);
      }
      for (;;)
      {
        return false;
        if (paramMotionEvent.getAction() == 1) {
          paramView.setBackgroundResource(2130837578);
        }
      }
    }
  }
}

```

StyleEffectActivity的具体代码
```java
package com.mt.mtxx.mtxx;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Rect;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.ProgressBar;
import com.mt.mtxx.image.ImageProcess;
import com.mt.mtxx.tools.FileTools;
import com.mt.mtxx.tools.GalleryText;
import java.io.PrintStream;

public class StyleEffectActivity
  extends Activity
  implements AdapterView.OnItemClickListener
{
  private static final int TIMER_VIEW = 257;
  private static int beforeType;
  private static int effectType = 0;
  private static int lastBmp;
  private static int mBmpNum = 0;
  private static int nCurGallerySelect;
  public static int nGalleryButtonNum;
  public static int[] nGalleryButtonTextId;
  private final int CUR_STYLE_NUM = 17;
  private final int STYLE_LOMO_NUM = 11;
  private final int STYLE_STDIO_NUM = 7;
  private Button alleffectlable;
  private boolean canTouch = false;
  private float density = MyData.nDensity;
  private ProgressBar effectBar;
  private GalleryText effectGallery;
  private ViewEditGalleryText fakeEffectView;
  private boolean isProcessing = false;
  private Animation lastFakeAnimation;
  private Animation lastPicAnimation;
  private Button lomoeffectlable;
  Handler myHandler = new Handler()
  {
    public void handleMessage(Message paramAnonymousMessage)
    {
      switch (paramAnonymousMessage.what)
      {
      }
      for (;;)
      {
        super.handleMessage(paramAnonymousMessage);
        return;
        StyleEffectActivity.this.setGone();
        StyleEffectActivity.this.viewEffect.updateShow();
      }
    }
  };
  private int[] nGalleryLomo;
  private int[] nGalleryStdio;
  private int nSelectBmp = 0;
  int nTextLength;
  private int nType;
  private Animation nextFakeAnimation;
  private Animation nextPicAnimation;
  private boolean noPic = false;
  private Button photoeffectlable;
  private int[] sListTest;
  private int[] strAlleffect = { 2130837657, 2130837658, 2130837659, 2130837660, 2130837661, 2130837662, 2130837663, 2130837664, 2130837665, 2130837666, 2130837667, 2130837668, 2130837669, 2130837670, 2130837671, 2130837672, 2130837673 };
  private int[] strAlleffects = { 2130837675, 2130837676, 2130837677, 2130837678, 2130837679, 2130837680, 2130837681, 2130837682, 2130837683, 2130837684, 2130837685, 2130837686, 2130837687, 2130837688, 2130837689, 2130837690, 2130837691 };
  Thread threadWait = null;
  public int touchType = -1;
  private ViewEditGalleryText viewEffect;
  private int xDownSize;
  private int xUpSize;
  
  static
  {
    lastBmp = 0;
    beforeType = 0;
    System.loadLibrary("mtimage-jni");
  }
  
  public int getCharsLength(String paramString)
  {
    try
    {
      int i = paramString.replaceAll("[^\\x00-\\xff]", "**").length();
      return 0 + i;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return 0;
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    getWindow().setFlags(1024, 1024);
    super.onCreate(paramBundle);
    setContentView(2130903050);
    System.gc();
    this.nType = getIntent().getIntExtra("type", -1);
    if ((MyData.nScreenW == 0) || (MyData.nScreenH == 0) || (MyData.nDensity == 0.0F))
    {
      paramBundle = getWindowManager().getDefaultDisplay();
      DisplayMetrics localDisplayMetrics = new DisplayMetrics();
      paramBundle.getMetrics(localDisplayMetrics);
      MyData.nScreenW = localDisplayMetrics.widthPixels;
      MyData.nScreenH = localDisplayMetrics.heightPixels;
      MyData.nBmpDstW = MyData.nScreenW;
      MyData.nBmpDstH = MyData.nScreenH - 100;
      MyData.nDensity = localDisplayMetrics.density;
      MTDebug.Print("MTXXActivity onCreate MyData.nScreenW=" + MyData.nScreenW + " MyData.nScreenH=" + MyData.nScreenH + " MyData.nDensity=" + MyData.nDensity);
      this.density = MyData.nDensity;
    }
    this.viewEffect = ((ViewEditGalleryText)findViewById(2131230856));
    this.viewEffect.nType = this.nType;
    this.alleffectlable = ((Button)findViewById(2131230859));
    this.lomoeffectlable = ((Button)findViewById(2131230860));
    this.photoeffectlable = ((Button)findViewById(2131230861));
    this.alleffectlable.setOnClickListener(new OnClassListenerAlleffectlable());
    this.lomoeffectlable.setOnClickListener(new OnClassListenerLomoeffectlable());
    this.photoeffectlable.setOnClickListener(new OnClassListenerPhotoeffectlable());
    this.nGalleryLomo = new int[11];
    this.nGalleryLomo[0] = 0;
    this.nGalleryLomo[1] = 1;
    this.nGalleryLomo[2] = 16;
    this.nGalleryLomo[3] = 3;
    this.nGalleryLomo[4] = 4;
    this.nGalleryLomo[5] = 8;
    this.nGalleryLomo[6] = 11;
    this.nGalleryLomo[7] = 14;
    this.nGalleryLomo[8] = 12;
    this.nGalleryLomo[9] = 13;
    this.nGalleryLomo[10] = 15;
    this.nGalleryStdio = new int[7];
    this.nGalleryStdio[0] = 0;
    this.nGalleryStdio[1] = 2;
    this.nGalleryStdio[2] = 5;
    this.nGalleryStdio[3] = 6;
    this.nGalleryStdio[4] = 7;
    this.nGalleryStdio[5] = 10;
    this.nGalleryStdio[6] = 9;
    this.effectBar = ((ProgressBar)findViewById(2131230862));
    this.effectGallery = ((GalleryText)findViewById(2131230858));
    effectType = 0;
    setGalleryImages(effectType);
    setGalleryImages(effectType, 0, true);
    set(0);
    this.effectGallery.setOnItemClickListener(this);
    this.effectGallery.setOnTouchListener(new OnTouchListenerGallery());
    paramBundle = (ImageButton)findViewById(2131230852);
    paramBundle.setOnClickListener(new myClickListenerDelete());
    paramBundle.setOnTouchListener(new onTouchListenerDelete());
    paramBundle = (ImageButton)findViewById(2131230853);
    paramBundle.setOnClickListener(new myClickListenerOk());
    paramBundle.setOnTouchListener(new onTouchListenerOk());
    this.fakeEffectView = ((ViewEditGalleryText)findViewById(2131230855));
    this.fakeEffectView.recycleBmpsrc();
    this.nextPicAnimation = AnimationUtils.loadAnimation(this, 2130968583);
    this.lastPicAnimation = AnimationUtils.loadAnimation(this, 2130968581);
    this.nextFakeAnimation = AnimationUtils.loadAnimation(this, 2130968585);
    this.lastFakeAnimation = AnimationUtils.loadAnimation(this, 2130968582);
    MTDebug.memeryUsed("StyleEffectActivity onCreate");
  }
  
  public void onDestroy()
  {
    try
    {
      MTDebug.Print("88888888888888888888888888");
      this.viewEffect.Release();
      System.gc();
      super.onDestroy();
      return;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
  }
  
  public void onItemClick(AdapterView<?> paramAdapterView, View paramView, int paramInt, long paramLong)
  {
    if (this.isProcessing) {
      return;
    }
    set(paramInt);
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    if (paramInt == 4)
    {
      finish();
      overridePendingTransition(2130968577, 2130968578);
      return true;
    }
    if (paramInt == 82) {
      return true;
    }
    return super.onKeyDown(paramInt, paramKeyEvent);
  }
  
  protected void onStart()
  {
    long l = MyPro.readSDCard();
    if (l < 0L)
    {
      MTDebug.Print("存储卡不可用！");
      MyPro.closeSelf();
      return;
    }
    if (l < 10240L)
    {
      MTDebug.Print("存储卡剩余空间不足！");
      MyPro.closeSelf();
      return;
    }
    if (MyData.strPicPath == null)
    {
      MTDebug.Print("onStart MyData.strPicPath == null");
      MyPro.closeSelf();
      return;
    }
    super.onStart();
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if ((this.isProcessing) || (this.canTouch)) {
      return false;
    }
    for (;;)
    {
      try
      {
        i = paramMotionEvent.getAction();
        j = (int)paramMotionEvent.getX();
        k = (int)paramMotionEvent.getY() - this.effectGallery.getHeight();
        localRect = new Rect(0, this.viewEffect.getTop(), MyData.nScreenW, this.viewEffect.getBottom());
        if ((i != 0) || (!localRect.contains(j, k))) {
          continue;
        }
        this.xDownSize = ((int)paramMotionEvent.getX());
      }
      catch (Exception localException)
      {
        int j;
        int k;
        Rect localRect;
        localException.printStackTrace();
        continue;
        this.effectGallery.setSelection(i);
        continue;
        if (effectType != 1) {
          continue;
        }
        if (!this.noPic) {
          continue;
        }
        this.noPic = false;
        new Thread(new AnimationThread()).start();
        this.viewEffect.startAnimation(this.nextPicAnimation);
        this.fakeEffectView.startAnimation(this.nextFakeAnimation);
        set(0);
        if ((0 != 0) && (1 != 0)) {
          continue;
        }
        this.effectGallery.setSelection(2);
        continue;
        this.effectGallery.setSelection(0);
        continue;
        if ((this.nSelectBmp >= 10) || (this.nSelectBmp < 0)) {
          continue;
        }
        int i = this.nSelectBmp + 1;
        new Thread(new AnimationThread()).start();
        this.viewEffect.startAnimation(this.nextPicAnimation);
        this.fakeEffectView.startAnimation(this.nextFakeAnimation);
        set(i);
        if ((i != 0) && (i != 1)) {
          continue;
        }
        this.effectGallery.setSelection(2);
        continue;
        this.effectGallery.setSelection(i);
        continue;
        if (effectType != 2) {
          continue;
        }
        if (!this.noPic) {
          continue;
        }
        this.noPic = false;
        new Thread(new AnimationThread()).start();
        this.viewEffect.startAnimation(this.nextPicAnimation);
        this.fakeEffectView.startAnimation(this.nextFakeAnimation);
        set(0);
        if ((0 != 0) && (1 != 0)) {
          continue;
        }
        this.effectGallery.setSelection(2);
        continue;
        this.effectGallery.setSelection(0);
        continue;
        if ((this.nSelectBmp >= 6) || (this.nSelectBmp < 0)) {
          continue;
        }
        i = this.nSelectBmp + 1;
        new Thread(new AnimationThread()).start();
        this.viewEffect.startAnimation(this.nextPicAnimation);
        this.fakeEffectView.startAnimation(this.nextFakeAnimation);
        set(i);
        if ((i != 0) && (i != 1)) {
          continue;
        }
        this.effectGallery.setSelection(2);
        continue;
        this.effectGallery.setSelection(i);
        continue;
        if (this.xUpSize - this.xDownSize <= 10) {
          continue;
        }
        this.fakeEffectView.recycleBmpback();
        this.fakeEffectView.bmpBack = this.viewEffect.bmpBack.copy(MyData.mConfig, true);
        if (effectType != 0) {
          continue;
        }
        MTDebug.Print("~~~~~~~~nSelectBmp=" + this.nSelectBmp + "noPic=" + this.noPic);
        if ((this.nSelectBmp > 16) || (this.nSelectBmp <= 0)) {
          continue;
        }
        i = this.nSelectBmp - 1;
        new Thread(new AnimationThread()).start();
        this.viewEffect.startAnimation(this.lastPicAnimation);
        this.fakeEffectView.startAnimation(this.lastFakeAnimation);
        set(i);
        if ((i != 0) && (i != 1)) {
          continue;
        }
        this.effectGallery.setSelection(2);
        continue;
        this.effectGallery.setSelection(i);
        continue;
        if (effectType != 1) {
          continue;
        }
        MTDebug.Print("~~~~~~~~nSelectBmp=" + this.nSelectBmp + "noPic=" + this.noPic);
        if ((this.nSelectBmp > 10) || (this.nSelectBmp <= 0) || (this.noPic)) {
          continue;
        }
        i = this.nSelectBmp - 1;
        new Thread(new AnimationThread()).start();
        this.viewEffect.startAnimation(this.lastPicAnimation);
        this.fakeEffectView.startAnimation(this.lastFakeAnimation);
        set(i);
        if ((i != 0) && (i != 1)) {
          continue;
        }
        this.effectGallery.setSelection(2);
        continue;
        this.effectGallery.setSelection(i);
        continue;
        if ((effectType != 2) || (this.nSelectBmp > 6) || (this.nSelectBmp <= 0) || (this.noPic)) {
          continue;
        }
        i = this.nSelectBmp - 1;
        new Thread(new AnimationThread()).start();
        this.viewEffect.startAnimation(this.lastPicAnimation);
        this.fakeEffectView.startAnimation(this.lastFakeAnimation);
        set(i);
        if ((i != 0) && (i != 1)) {
          continue;
        }
        this.effectGallery.setSelection(2);
        continue;
        this.effectGallery.setSelection(i);
        continue;
      }
      return super.onTouchEvent(paramMotionEvent);
      if ((i == 1) && (localRect.contains(j, k)))
      {
        this.xUpSize = ((int)paramMotionEvent.getX());
        if (this.xUpSize - this.xDownSize >= -10) {
          continue;
        }
        this.fakeEffectView.recycleBmpback();
        this.fakeEffectView.bmpBack = this.viewEffect.bmpBack.copy(MyData.mConfig, true);
        if (effectType != 0) {
          continue;
        }
        if ((this.nSelectBmp < 16) && (this.nSelectBmp >= 0))
        {
          this.canTouch = true;
          i = this.nSelectBmp + 1;
          set(i);
          new Thread(new AnimationThread()).start();
          this.viewEffect.startAnimation(this.nextPicAnimation);
          this.fakeEffectView.startAnimation(this.nextFakeAnimation);
          if ((i != 0) && (i != 1)) {
            continue;
          }
          this.effectGallery.setSelection(2);
        }
      }
    }
  }
  
  public void set(int paramInt)
  {
    for (;;)
    {
      try
      {
        System.gc();
        MTDebug.memeryUsed("StyleEffectActivity set arg=" + paramInt);
        if (effectType != 0) {
          break label238;
        }
        nCurGallerySelect = paramInt + 2099;
        MTDebug.Print("nSelectBmp =" + this.nSelectBmp + "arg" + paramInt);
        if ((this.nSelectBmp == paramInt) && (effectType == beforeType)) {
          break label225;
        }
        setGalleryImages(effectType, paramInt, true);
        if (paramInt == 0)
        {
          MTDebug.Print("set arg == 0");
          this.viewEffect.showProcess(nCurGallerySelect);
          this.viewEffect.processEffect(nCurGallerySelect);
          this.viewEffect.refresh();
          System.gc();
          return;
        }
        if (!this.viewEffect.isUsed(nCurGallerySelect))
        {
          setVisible();
          new Thread(new myThread()).start();
          this.viewEffect.showProcess(nCurGallerySelect);
          continue;
        }
        this.viewEffect.showProcess(nCurGallerySelect);
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
        return;
      }
      this.viewEffect.processEffect(nCurGallerySelect);
      this.viewEffect.refresh();
      continue;
      label225:
      setGalleryImages(effectType, paramInt, true);
      continue;
      label238:
      if (effectType == 1)
      {
        MTDebug.Print("nSelectBmp =" + this.nSelectBmp + "arg" + paramInt);
        if ((this.nSelectBmp != paramInt) || (effectType != beforeType))
        {
          nCurGallerySelect = this.nGalleryLomo[paramInt] + 2099;
          if (!this.viewEffect.isUsed(nCurGallerySelect))
          {
            setVisible();
            new Thread(new myThread()).start();
            this.viewEffect.showProcess(nCurGallerySelect);
          }
          for (;;)
          {
            setGalleryImages(effectType, paramInt, true);
            break;
            this.viewEffect.showProcess(nCurGallerySelect);
            this.viewEffect.processEffect(nCurGallerySelect);
            this.viewEffect.refresh();
          }
        }
        setGalleryImages(effectType, paramInt, true);
      }
      else if (effectType == 2)
      {
        MTDebug.Print("nSelectBmp =" + this.nSelectBmp + "arg" + paramInt);
        if ((this.nSelectBmp != paramInt) || (effectType != beforeType))
        {
          nCurGallerySelect = this.nGalleryStdio[paramInt] + 2099;
          if (!this.viewEffect.isUsed(nCurGallerySelect))
          {
            setVisible();
            new Thread(new myThread()).start();
            this.viewEffect.showProcess(nCurGallerySelect);
          }
          for (;;)
          {
            setGalleryImages(effectType, paramInt, true);
            break;
            this.viewEffect.showProcess(nCurGallerySelect);
            this.viewEffect.processEffect(nCurGallerySelect);
            this.viewEffect.refresh();
          }
        }
        setGalleryImages(effectType, paramInt, true);
      }
    }
  }
  
  public boolean setGalleryImages(int paramInt)
  {
    for (;;)
    {
      try
      {
        switch (effectType)
        {
        case 0: 
          this.effectGallery.setAdapter(new ImageApdater(this));
          this.effectGallery.setSelection(2);
          return true;
        }
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
        return true;
      }
      this.sListTest = ((int[])this.strAlleffect.clone());
      nGalleryButtonNum = 17;
      nGalleryButtonTextId = new int[nGalleryButtonNum];
      nGalleryButtonTextId[0] = 2131099693;
      nGalleryButtonTextId[1] = 2131099713;
      nGalleryButtonTextId[2] = 2131099695;
      nGalleryButtonTextId[3] = 2131099696;
      nGalleryButtonTextId[4] = 2131099697;
      nGalleryButtonTextId[5] = 2131099706;
      nGalleryButtonTextId[6] = 2131099699;
      nGalleryButtonTextId[7] = 2131099704;
      nGalleryButtonTextId[8] = 2131099703;
      nGalleryButtonTextId[9] = 2131099714;
      nGalleryButtonTextId[10] = 2131099710;
      nGalleryButtonTextId[11] = 2131099711;
      nGalleryButtonTextId[12] = 2131099702;
      nGalleryButtonTextId[13] = 2131099698;
      nGalleryButtonTextId[14] = 2131099709;
      nGalleryButtonTextId[15] = 2131099707;
      nGalleryButtonTextId[16] = 2131099708;
      continue;
      nGalleryButtonNum = 11;
      this.sListTest = new int[nGalleryButtonNum];
      this.sListTest[0] = this.strAlleffect[this.nGalleryLomo[0]];
      this.sListTest[1] = this.strAlleffect[this.nGalleryLomo[1]];
      this.sListTest[2] = this.strAlleffect[this.nGalleryLomo[2]];
      this.sListTest[3] = this.strAlleffect[this.nGalleryLomo[3]];
      this.sListTest[4] = this.strAlleffect[this.nGalleryLomo[4]];
      this.sListTest[5] = this.strAlleffect[this.nGalleryLomo[5]];
      this.sListTest[6] = this.strAlleffect[this.nGalleryLomo[6]];
      this.sListTest[7] = this.strAlleffect[this.nGalleryLomo[7]];
      this.sListTest[8] = this.strAlleffect[this.nGalleryLomo[8]];
      this.sListTest[9] = this.strAlleffect[this.nGalleryLomo[9]];
      this.sListTest[10] = this.strAlleffect[this.nGalleryLomo[10]];
      nGalleryButtonTextId = new int[nGalleryButtonNum];
      nGalleryButtonTextId[0] = 2131099693;
      nGalleryButtonTextId[1] = 2131099713;
      nGalleryButtonTextId[2] = 2131099708;
      nGalleryButtonTextId[3] = 2131099696;
      nGalleryButtonTextId[4] = 2131099697;
      nGalleryButtonTextId[5] = 2131099703;
      nGalleryButtonTextId[6] = 2131099711;
      nGalleryButtonTextId[7] = 2131099709;
      nGalleryButtonTextId[8] = 2131099702;
      nGalleryButtonTextId[9] = 2131099698;
      nGalleryButtonTextId[10] = 2131099707;
      continue;
      nGalleryButtonNum = 7;
      this.sListTest = new int[nGalleryButtonNum];
      this.sListTest[0] = this.strAlleffect[this.nGalleryStdio[0]];
      this.sListTest[1] = this.strAlleffect[this.nGalleryStdio[1]];
      this.sListTest[2] = this.strAlleffect[this.nGalleryStdio[2]];
      this.sListTest[3] = this.strAlleffect[this.nGalleryStdio[3]];
      this.sListTest[4] = this.strAlleffect[this.nGalleryStdio[4]];
      this.sListTest[5] = this.strAlleffect[this.nGalleryStdio[5]];
      this.sListTest[6] = this.strAlleffect[this.nGalleryStdio[6]];
      nGalleryButtonTextId = new int[nGalleryButtonNum];
      nGalleryButtonTextId[0] = 2131099693;
      nGalleryButtonTextId[1] = 2131099695;
      nGalleryButtonTextId[2] = 2131099706;
      nGalleryButtonTextId[3] = 2131099699;
      nGalleryButtonTextId[4] = 2131099704;
      nGalleryButtonTextId[5] = 2131099710;
      nGalleryButtonTextId[6] = 2131099714;
    }
  }
  
  public boolean setGalleryImages(int paramInt1, int paramInt2, boolean paramBoolean)
  {
    this.noPic = false;
    do
    {
      for (;;)
      {
        try
        {
          Thread.sleep(150L);
          if (effectType == 0)
          {
            this.sListTest = ((int[])this.strAlleffect.clone());
            this.sListTest[paramInt2] = this.strAlleffects[paramInt2];
            this.nSelectBmp = paramInt2;
            mBmpNum = paramInt2;
            nGalleryButtonTextId[0] = 2131099693;
            nGalleryButtonTextId[1] = 2131099713;
            nGalleryButtonTextId[2] = 2131099695;
            nGalleryButtonTextId[3] = 2131099696;
            nGalleryButtonTextId[4] = 2131099697;
            nGalleryButtonTextId[5] = 2131099706;
            nGalleryButtonTextId[6] = 2131099699;
            nGalleryButtonTextId[7] = 2131099704;
            nGalleryButtonTextId[8] = 2131099703;
            nGalleryButtonTextId[9] = 2131099714;
            nGalleryButtonTextId[10] = 2131099710;
            nGalleryButtonTextId[11] = 2131099711;
            nGalleryButtonTextId[12] = 2131099702;
            nGalleryButtonTextId[13] = 2131099698;
            nGalleryButtonTextId[14] = 2131099709;
            nGalleryButtonTextId[15] = 2131099707;
            nGalleryButtonTextId[16] = 2131099708;
            paramInt1 = this.effectGallery.getSelectedItemPosition();
            this.effectGallery.setAdapter(new ImageApdater(this));
            if ((paramInt1 == 0) && (paramInt1 == 1)) {
              break label931;
            }
            this.effectGallery.setSelection(paramInt1);
            return true;
          }
          if (effectType != 1) {
            break;
          }
          this.sListTest = new int[11];
          this.sListTest[0] = this.strAlleffect[this.nGalleryLomo[0]];
          this.sListTest[1] = this.strAlleffect[this.nGalleryLomo[1]];
          this.sListTest[2] = this.strAlleffect[this.nGalleryLomo[2]];
          this.sListTest[3] = this.strAlleffect[this.nGalleryLomo[3]];
          this.sListTest[4] = this.strAlleffect[this.nGalleryLomo[4]];
          this.sListTest[5] = this.strAlleffect[this.nGalleryLomo[5]];
          this.sListTest[6] = this.strAlleffect[this.nGalleryLomo[6]];
          this.sListTest[7] = this.strAlleffect[this.nGalleryLomo[7]];
          this.sListTest[8] = this.strAlleffect[this.nGalleryLomo[8]];
          this.sListTest[9] = this.strAlleffect[this.nGalleryLomo[9]];
          this.sListTest[10] = this.strAlleffect[this.nGalleryLomo[10]];
          if (paramInt2 == 0)
          {
            this.sListTest[paramInt2] = this.strAlleffects[this.nGalleryLomo[paramInt2]];
            this.nSelectBmp = 0;
            if (lastBmp == 1) {
              mBmpNum = 0;
            }
            nGalleryButtonTextId = new int[11];
            nGalleryButtonTextId[0] = 2131099693;
            nGalleryButtonTextId[1] = 2131099713;
            nGalleryButtonTextId[2] = 2131099708;
            nGalleryButtonTextId[3] = 2131099696;
            nGalleryButtonTextId[4] = 2131099697;
            nGalleryButtonTextId[5] = 2131099703;
            nGalleryButtonTextId[6] = 2131099711;
            nGalleryButtonTextId[7] = 2131099709;
            nGalleryButtonTextId[8] = 2131099702;
            nGalleryButtonTextId[9] = 2131099698;
            nGalleryButtonTextId[10] = 2131099707;
            continue;
          }
          if (paramInt2 <= 0) {
            continue;
          }
        }
        catch (Exception localException)
        {
          localException.printStackTrace();
          return true;
        }
        if (paramInt2 < 11)
        {
          this.sListTest[paramInt2] = this.strAlleffects[this.nGalleryLomo[paramInt2]];
          this.nSelectBmp = paramInt2;
          mBmpNum = this.nGalleryLomo[paramInt2];
        }
      }
    } while (effectType != 2);
    this.sListTest = new int[7];
    this.sListTest[0] = this.strAlleffect[this.nGalleryStdio[0]];
    this.sListTest[1] = this.strAlleffect[this.nGalleryStdio[1]];
    this.sListTest[2] = this.strAlleffect[this.nGalleryStdio[2]];
    this.sListTest[3] = this.strAlleffect[this.nGalleryStdio[3]];
    this.sListTest[4] = this.strAlleffect[this.nGalleryStdio[4]];
    this.sListTest[5] = this.strAlleffect[this.nGalleryStdio[5]];
    this.sListTest[6] = this.strAlleffect[this.nGalleryStdio[6]];
    if (paramInt2 == 0)
    {
      this.sListTest[paramInt2] = this.strAlleffects[this.nGalleryStdio[paramInt2]];
      this.nSelectBmp = 0;
      if (lastBmp != 2) {}
    }
    for (mBmpNum = 0;; mBmpNum = this.nGalleryStdio[paramInt2])
    {
      do
      {
        nGalleryButtonTextId = new int[7];
        nGalleryButtonTextId[0] = 2131099693;
        nGalleryButtonTextId[1] = 2131099695;
        nGalleryButtonTextId[2] = 2131099706;
        nGalleryButtonTextId[3] = 2131099699;
        nGalleryButtonTextId[4] = 2131099704;
        nGalleryButtonTextId[5] = 2131099710;
        nGalleryButtonTextId[6] = 2131099714;
        break;
      } while ((paramInt2 <= 0) || (paramInt2 >= 7));
      this.sListTest[paramInt2] = this.strAlleffects[this.nGalleryStdio[paramInt2]];
      this.nSelectBmp = paramInt2;
    }
    label931:
    this.effectGallery.setSelection(2);
    return true;
  }
  
  public void setGone()
  {
    this.effectBar.setVisibility(4);
  }
  
  public void setVisible()
  {
    this.effectBar.setVisibility(0);
  }
  
  public void toMain(int paramInt)
  {
    
    try
    {
      if (!this.viewEffect.isAdjusted())
      {
        finish();
        overridePendingTransition(2130968577, 2130968578);
        return;
      }
      Bitmap localBitmap = this.viewEffect.getAfterBitmap();
      if ((localBitmap == null) || (localBitmap.isRecycled()))
      {
        finish();
        overridePendingTransition(2130968577, 2130968578);
        return;
      }
    }
    catch (Exception localException)
    {
      Log.e("StyleEffect", "~~~~~~~~~~~~~~~~~~~~~~~~~");
      localException.printStackTrace();
      return;
    }
    if ((MyData.bmpDst != null) && (MyData.bmpDst.isRecycled())) {
      MyData.bmpDst.recycle();
    }
    MyData.bmpDst = localException;
    Intent localIntent = new Intent();
    localIntent.putExtra("select", nCurGallerySelect);
    setResult(paramInt, localIntent);
    finish();
    overridePendingTransition(2130968577, 2130968578);
  }
  
  class AnimationThread
    implements Runnable
  {
    AnimationThread() {}
    
    public void run()
    {
      StyleEffectActivity.this.canTouch = true;
      try
      {
        Thread.sleep(500L);
        return;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
        return;
      }
      finally
      {
        StyleEffectActivity.this.canTouch = false;
      }
    }
  }
  
  public class ImageApdater
    extends BaseAdapter
  {
    private Context myContext;
    
    public ImageApdater(Context paramContext)
    {
      this.myContext = paramContext;
    }
    
    public int getCount()
    {
      return StyleEffectActivity.nGalleryButtonNum;
    }
    
    public Object getItem(int paramInt)
    {
      return Integer.valueOf(paramInt);
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      localCanvas = null;
      for (;;)
      {
        try
        {
          MTDebug.Print("Get Viewposition~~~~~~" + paramInt);
          paramViewGroup = new ImageView(this.myContext);
          try
          {
            paramView = Bitmap.createBitmap((int)(66.0F * StyleEffectActivity.this.density), (int)(78.0F * StyleEffectActivity.this.density), Bitmap.Config.ARGB_8888);
            localCanvas = new Canvas(paramView);
            Object localObject = ImageProcess.FittingWindow888(BitmapFactory.decodeResource(StyleEffectActivity.this.getResources(), StyleEffectActivity.this.sListTest[paramInt]), (int)(54.0F * StyleEffectActivity.this.density), (int)(52.0F * StyleEffectActivity.this.density), true);
            localCanvas.drawBitmap((Bitmap)localObject, 5.0F * StyleEffectActivity.this.density, 0.0F, null);
            if ((localObject != null) && (!((Bitmap)localObject).isRecycled())) {
              ((Bitmap)localObject).recycle();
            }
            localObject = new Paint(1);
            ((Paint)localObject).setStyle(Paint.Style.FILL);
            ((Paint)localObject).setColor(-1);
            ((Paint)localObject).setTextSize(12.0F * StyleEffectActivity.this.density);
            str = StyleEffectActivity.this.getResources().getString(StyleEffectActivity.nGalleryButtonTextId[paramInt]);
            if (StyleEffectActivity.this.getCharsLength(str) == 3)
            {
              StyleEffectActivity.this.nTextLength = ((int)(20.0F * StyleEffectActivity.this.density));
              localCanvas.drawText(str, StyleEffectActivity.this.nTextLength, 70.0F * StyleEffectActivity.this.density, (Paint)localObject);
              paramViewGroup.setImageBitmap(paramView);
              paramViewGroup.setScaleType(ImageView.ScaleType.FIT_XY);
              return paramViewGroup;
            }
            if (StyleEffectActivity.this.getCharsLength(str) != 4) {
              continue;
            }
            StyleEffectActivity.this.nTextLength = ((int)(20.0F * StyleEffectActivity.this.density));
            continue;
            paramView.printStackTrace();
          }
          catch (Exception paramView) {}
        }
        catch (Exception paramView)
        {
          String str;
          paramViewGroup = localCanvas;
          continue;
        }
        return paramViewGroup;
        if (StyleEffectActivity.this.getCharsLength(str) == 6) {
          StyleEffectActivity.this.nTextLength = ((int)(15.0F * StyleEffectActivity.this.density));
        } else if (StyleEffectActivity.this.getCharsLength(str) == 7) {
          StyleEffectActivity.this.nTextLength = ((int)(7.0F * StyleEffectActivity.this.density));
        } else if (StyleEffectActivity.this.getCharsLength(str) == 8) {
          StyleEffectActivity.this.nTextLength = ((int)(5.0F * StyleEffectActivity.this.density));
        } else {
          StyleEffectActivity.this.nTextLength = 0;
        }
      }
    }
  }
  
  class OnClassListenerAlleffectlable
    implements View.OnClickListener
  {
    int nSetSelect;
    
    OnClassListenerAlleffectlable() {}
    
    public void onClick(View paramView)
    {
      if (StyleEffectActivity.this.isProcessing) {
        return;
      }
      StyleEffectActivity.beforeType = StyleEffectActivity.effectType;
      if (StyleEffectActivity.effectType != 0)
      {
        this.nSetSelect = StyleEffectActivity.mBmpNum;
        StyleEffectActivity.effectType = 0;
        StyleEffectActivity.nGalleryButtonNum = 17;
        StyleEffectActivity.this.setGalleryImages(StyleEffectActivity.effectType);
        StyleEffectActivity.this.setGalleryImages(StyleEffectActivity.effectType, this.nSetSelect, true);
      }
      if ((this.nSetSelect == 0) || (this.nSetSelect == 1)) {
        StyleEffectActivity.this.effectGallery.setSelection(2);
      }
      for (;;)
      {
        StyleEffectActivity.lastBmp = 0;
        StyleEffectActivity.this.alleffectlable.setBackgroundResource(2130837570);
        StyleEffectActivity.this.lomoeffectlable.setBackgroundResource(2130837569);
        StyleEffectActivity.this.photoeffectlable.setBackgroundResource(2130837569);
        return;
        StyleEffectActivity.this.effectGallery.setSelection(this.nSetSelect);
      }
    }
  }
  
  class OnClassListenerLomoeffectlable
    implements View.OnClickListener
  {
    int nSetSelect;
    
    OnClassListenerLomoeffectlable() {}
    
    public void onClick(View paramView)
    {
      if (StyleEffectActivity.this.isProcessing) {}
      do
      {
        return;
        StyleEffectActivity.beforeType = StyleEffectActivity.effectType;
      } while (StyleEffectActivity.effectType == 1);
      switch (StyleEffectActivity.mBmpNum)
      {
      case 2: 
      case 5: 
      case 6: 
      case 7: 
      case 9: 
      case 10: 
      default: 
        this.nSetSelect = -1;
        StyleEffectActivity.effectType = 1;
        StyleEffectActivity.nGalleryButtonNum = 11;
        if (this.nSetSelect != -1)
        {
          StyleEffectActivity.this.noPic = false;
          StyleEffectActivity.this.setGalleryImages(StyleEffectActivity.effectType);
          StyleEffectActivity.this.setGalleryImages(StyleEffectActivity.effectType, this.nSetSelect, true);
          if ((this.nSetSelect == 0) || (this.nSetSelect == 1)) {
            StyleEffectActivity.this.effectGallery.setSelection(2);
          }
        }
        break;
      }
      for (;;)
      {
        StyleEffectActivity.lastBmp = 1;
        StyleEffectActivity.this.lomoeffectlable.setBackgroundResource(2130837570);
        StyleEffectActivity.this.alleffectlable.setBackgroundResource(2130837569);
        StyleEffectActivity.this.photoeffectlable.setBackgroundResource(2130837569);
        return;
        this.nSetSelect = 0;
        break;
        this.nSetSelect = 1;
        break;
        this.nSetSelect = 2;
        break;
        this.nSetSelect = 3;
        break;
        this.nSetSelect = 4;
        break;
        this.nSetSelect = 5;
        break;
        this.nSetSelect = 6;
        break;
        this.nSetSelect = 7;
        break;
        this.nSetSelect = 8;
        break;
        this.nSetSelect = 9;
        break;
        this.nSetSelect = 10;
        break;
        StyleEffectActivity.this.effectGallery.setSelection(this.nSetSelect);
        continue;
        StyleEffectActivity.this.noPic = true;
        StyleEffectActivity.this.setGalleryImages(StyleEffectActivity.effectType);
      }
    }
  }
  
  class OnClassListenerPhotoeffectlable
    implements View.OnClickListener
  {
    int nSetSelect;
    
    OnClassListenerPhotoeffectlable() {}
    
    public void onClick(View paramView)
    {
      if (StyleEffectActivity.this.isProcessing) {}
      do
      {
        return;
        StyleEffectActivity.beforeType = StyleEffectActivity.effectType;
      } while (StyleEffectActivity.effectType == 2);
      switch (StyleEffectActivity.mBmpNum)
      {
      case 1: 
      case 3: 
      case 4: 
      case 8: 
      default: 
        this.nSetSelect = -1;
        StyleEffectActivity.effectType = 2;
        StyleEffectActivity.nGalleryButtonNum = 7;
        System.out.println("nSetSelect = " + this.nSetSelect);
        if (this.nSetSelect != -1)
        {
          StyleEffectActivity.this.noPic = false;
          StyleEffectActivity.this.setGalleryImages(StyleEffectActivity.effectType);
          StyleEffectActivity.this.setGalleryImages(StyleEffectActivity.effectType, this.nSetSelect, true);
          if ((this.nSetSelect == 0) || (this.nSetSelect == 1)) {
            StyleEffectActivity.this.effectGallery.setSelection(2);
          }
        }
        break;
      }
      for (;;)
      {
        StyleEffectActivity.lastBmp = 2;
        StyleEffectActivity.this.photoeffectlable.setBackgroundResource(2130837570);
        StyleEffectActivity.this.lomoeffectlable.setBackgroundResource(2130837569);
        StyleEffectActivity.this.alleffectlable.setBackgroundResource(2130837569);
        return;
        this.nSetSelect = 0;
        break;
        this.nSetSelect = 1;
        break;
        this.nSetSelect = 2;
        break;
        this.nSetSelect = 3;
        break;
        this.nSetSelect = 4;
        break;
        this.nSetSelect = 5;
        break;
        this.nSetSelect = 6;
        break;
        StyleEffectActivity.this.effectGallery.setSelection(this.nSetSelect);
        continue;
        StyleEffectActivity.this.noPic = true;
        StyleEffectActivity.this.setGalleryImages(StyleEffectActivity.effectType);
      }
    }
  }
  
  class OnTouchListenerGallery
    implements View.OnTouchListener
  {
    OnTouchListenerGallery() {}
    
    public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
    {
      System.out.println("OnTouchListenerGallery~~~");
      if ((paramMotionEvent.getAction() == 1) && (StyleEffectActivity.this.effectGallery.getSelectedItemPosition() < 2)) {
        StyleEffectActivity.this.effectGallery.setSelection(2);
      }
      return false;
    }
  }
  
  class myClickListenerDelete
    implements View.OnClickListener
  {
    myClickListenerDelete() {}
    
    public void onClick(View paramView)
    {
      if (StyleEffectActivity.this.isProcessing) {
        return;
      }
      FileTools.cleanFile(MyData.strTempSDCardPath + "/style");
      StyleEffectActivity.this.finish();
      StyleEffectActivity.this.overridePendingTransition(2130968577, 2130968578);
    }
  }
  
  class myClickListenerOk
    implements View.OnClickListener
  {
    myClickListenerOk() {}
    
    public void onClick(View paramView)
    {
      if (StyleEffectActivity.this.isProcessing) {
        return;
      }
      StyleEffectActivity.this.toMain(StyleEffectActivity.this.nType);
    }
  }
  
  class myThread
    implements Runnable
  {
    myThread() {}
    
    public void run()
    {
      try
      {
        StyleEffectActivity.this.isProcessing = true;
        StyleEffectActivity.this.viewEffect.processEffect(StyleEffectActivity.nCurGallerySelect);
        Message localMessage = new Message();
        localMessage.what = 257;
        StyleEffectActivity.this.myHandler.sendMessage(localMessage);
        StyleEffectActivity.this.isProcessing = false;
        return;
      }
      catch (Exception localException)
      {
        Thread.currentThread().interrupt();
      }
    }
  }
  
  class onTouchListenerDelete
    implements View.OnTouchListener
  {
    onTouchListenerDelete() {}
    
    public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
    {
      if (paramMotionEvent.getAction() == 0) {
        paramView.setBackgroundResource(2130837638);
      }
      for (;;)
      {
        return false;
        if (paramMotionEvent.getAction() == 1) {
          paramView.setBackgroundResource(2130837637);
        }
      }
    }
  }
  
  class onTouchListenerOk
    implements View.OnTouchListener
  {
    onTouchListenerOk() {}
    
    public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
    {
      if (paramMotionEvent.getAction() == 0) {
        paramView.setBackgroundResource(2130837640);
      }
      for (;;)
      {
        return false;
        if (paramMotionEvent.getAction() == 1) {
          paramView.setBackgroundResource(2130837639);
        }
      }
    }
  }
}

```

ViewEditGalleryText的具体代码

```java
package com.mt.mtxx.mtxx;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Canvas;
import android.util.AttributeSet;
import android.view.View;
import com.mt.mtxx.image.ImageProcess;
import java.io.File;

public class ViewEditGalleryText
  extends View
{
  public int MIN = 0;
  public Bitmap bmpBack;
  public Bitmap bmpSrc;
  public float fScale = 1.0F;
  public float fSrcScale = 1.0F;
  public boolean isLoadOver = false;
  public boolean[] m_isEnable = new boolean[30];
  private int nCurUsedEffect = 0;
  public int nPicH = 0;
  public int nPicW = 0;
  public int nPicX = 0;
  public int nPicY = 0;
  private int nPosX = 0;
  private int nPosY = 0;
  public int nSrcPosX = 0;
  public int nSrcPosY = 0;
  public int nType;
  public int nViewHeight = 0;
  public int nViewWidth = 0;
  public Context pContext = null;

  public ViewEditGalleryText(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    this.pContext = paramContext;
    if (!new File(MyData.strTempSDCardPath + "/style").mkdirs()) {
      MTDebug.Print("Error!create style folder failed!");
    }
    this.m_isEnable[0] = true;
  }

  public boolean Release()
  {
    try
    {
      if ((this.bmpBack != null) && (!this.bmpBack.isRecycled()))
      {
        this.bmpBack.recycle();
        this.bmpBack = null;
      }
      if ((this.bmpSrc != null) && (!this.bmpSrc.isRecycled()))
      {
        this.bmpSrc.recycle();
        this.bmpSrc = null;
      }
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
    return true;
  }

  public Bitmap getAfterBitmap()
  {
    Object localObject = null;
    try
    {
      Bitmap localBitmap = this.bmpSrc;
      localObject = localBitmap;
      this.bmpSrc = null;
      return localBitmap;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return localObject;
  }

  public boolean isAdjusted()
  {
    if (this.nCurUsedEffect <= 2099)
    {
      MTDebug.Print("viewEditGallery equal");
      return false;
    }
    return true;
  }

  public boolean isUsed(int paramInt)
  {
    paramInt -= 2099;
    if (paramInt >= 0) {
      try
      {
        int i = this.m_isEnable[paramInt];
        return i != 0;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
    }
    return false;
  }

  protected void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    if (this.nViewWidth == 0) {
      setPic();
    }
    if ((this.bmpBack != null) && (!this.bmpBack.isRecycled())) {
      paramCanvas.drawBitmap(this.bmpBack, this.nPosX + this.nSrcPosX, this.nPosY + this.nSrcPosY, null);
    }
  }

  public boolean processEffect(int paramInt)
  {
    for (;;)
    {
      try
      {
        this.nCurUsedEffect = paramInt;
        int i = paramInt - 2099;
        str = "";
        MTDebug.Print("nId=" + i);
        if (i >= 0)
        {
          str = MyData.strTempSDCardPath + "/style/" + i + ".jpg";
          if (i == 0)
          {
            if ((this.bmpSrc != null) && (!this.bmpSrc.isRecycled()))
            {
              this.bmpSrc.recycle();
              if ((this.bmpBack != null) && (!this.bmpBack.isRecycled()))
              {
                this.bmpBack.recycle();
                this.bmpBack = null;
              }
              MTDebug.Print("nId == 0");
              this.bmpSrc = MyData.bmpDst.copy(MyData.mConfig, true);
              this.bmpBack = ImageProcess.FittingWindow(this.bmpSrc, (int)(this.nViewWidth - MyData.nDensity * 20.0F), (int)(this.nViewHeight - MyData.nDensity * 20.0F), false);
              return true;
            }
            MTDebug.Print("GGG bmpSrc != null && !bmpSrc.isRecycled()");
          }
          if (this.m_isEnable[i] != 0)
          {
            if ((this.bmpSrc != null) && (!this.bmpSrc.isRecycled()))
            {
              this.bmpSrc.recycle();
              this.bmpSrc = null;
            }
            BitmapFactory.Options localOptions = new BitmapFactory.Options();
            localOptions.inDither = false;
            this.bmpSrc = BitmapFactory.decodeFile(str, localOptions);
            if ((this.bmpBack != null) && (!this.bmpBack.isRecycled()))
            {
              this.bmpBack.recycle();
              this.bmpBack = null;
            }
            this.bmpBack = ImageProcess.FittingWindow(this.bmpSrc, (int)(this.nViewWidth - MyData.nDensity * 20.0F), (int)(this.nViewHeight - MyData.nDensity * 20.0F), false);
            this.isLoadOver = true;
            invalidate();
            return true;
          }
          this.m_isEnable[i] = true;
        }
        if ((this.bmpSrc != null) && (!this.bmpSrc.isRecycled()))
        {
          this.bmpSrc.recycle();
          this.bmpSrc = null;
        }
        MTDebug.Print("viewEditGallery kind=" + paramInt);
        switch (paramInt)
        {
        }
      }
      catch (Exception localException)
      {
        String str;
        localException.printStackTrace();
        continue;
        this.bmpSrc = ImageProcess.StyleElegant(MyData.bmpDst, false);
        continue;
        this.bmpSrc = ImageProcess.StyleFilm(MyData.bmpDst, false);
        continue;
        this.bmpSrc = ImageProcess.StyleRetro(MyData.bmpDst, false);
        continue;
        this.bmpSrc = ImageProcess.StyleBrightRed(MyData.bmpDst, this.pContext, false);
        continue;
        this.bmpSrc = ImageProcess.StyleJapanese(MyData.bmpDst, false);
        continue;
        this.bmpSrc = ImageProcess.StyleBaoColor(MyData.bmpDst, this.pContext, false);
        continue;
        this.bmpSrc = ImageProcess.StyleImpression(MyData.bmpDst, this.pContext, false);
        continue;
        this.bmpSrc = ImageProcess.StyleG(MyData.bmpDst, this.pContext, false);
        continue;
        this.bmpSrc = ImageProcess.StyleLomoC(MyData.bmpDst, false);
        continue;
        this.bmpSrc = ImageProcess.StyleLomoHDR(MyData.bmpDst, false);
        continue;
        this.bmpSrc = ImageProcess.StyleOldPhoto(MyData.bmpDst, this.pContext, false);
        continue;
        this.bmpSrc = ImageProcess.StyleCinnamon(MyData.bmpDst, false);
        continue;
        this.bmpSrc = ImageProcess.StyleLomoB(MyData.bmpDst, false);
        continue;
        this.bmpSrc = ImageProcess.StyleOldPhoto2(MyData.bmpDst, this.pContext, false);
        continue;
        this.bmpSrc = ImageProcess.StyleLomoA(MyData.bmpDst, this.pContext, false);
        continue;
        continue;
      }
      if (str != "") {
        ImageProcess.savePic(str, this.bmpSrc, 1);
      }
      this.isLoadOver = true;
      return true;
      this.bmpSrc = ImageProcess.StyleF(MyData.bmpDst, this.pContext, false);
    }
  }

  public boolean recycleBmpback()
  {
    if ((this.bmpBack != null) && (!this.bmpBack.isRecycled()))
    {
      this.bmpBack.recycle();
      this.bmpBack = null;
      return true;
    }
    return false;
  }

  public boolean recycleBmpsrc()
  {
    if ((this.bmpSrc != null) && (!this.bmpBack.isRecycled()))
    {
      this.bmpSrc.recycle();
      this.bmpSrc = null;
      return true;
    }
    return false;
  }

  public void refresh()
  {
    invalidate();
  }

  public boolean setPic()
  {
    try
    {
      this.nViewWidth = getWidth();
      this.nViewHeight = getHeight();
      if ((MyData.bmpDst == null) || (MyData.bmpDst.isRecycled())) {
        break label212;
      }
      if ((this.bmpSrc != null) && (!this.bmpSrc.isRecycled()))
      {
        this.bmpSrc.recycle();
        this.bmpSrc = null;
      }
      if ((this.bmpBack != null) && (!this.bmpBack.isRecycled()))
      {
        this.bmpBack.recycle();
        this.bmpBack = null;
      }
      this.bmpSrc = MyData.bmpDst.copy(Bitmap.Config.ARGB_8888, true);
      this.bmpBack = ImageProcess.FittingWindow(this.bmpSrc, (int)(this.nViewWidth - MyData.nDensity * 20.0F), (int)(this.nViewHeight - MyData.nDensity * 20.0F), false);
      this.nSrcPosX = ((this.nViewWidth - this.bmpBack.getWidth()) / 2);
      this.nSrcPosY = ((this.nViewHeight - this.bmpBack.getHeight()) / 2);
      this.fSrcScale = (1.0F * this.bmpBack.getWidth() / MyData.bmpDst.getWidth());
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
    return true;
    label212:
    return false;
  }

  public boolean showFrame(String paramString)
  {
    invalidate();
    return true;
  }

  public void showProcess(int paramInt)
  {
    this.nType = paramInt;
    this.MIN = 1;
    this.isLoadOver = false;
  }

  public void updateShow()
  {
    try
    {
      if (this.bmpSrc == null) {
        return;
      }
      if (this.bmpSrc.isRecycled()) {
        return;
      }
      if ((this.bmpBack != null) && (!this.bmpBack.isRecycled()))
      {
        this.bmpBack.recycle();
        this.bmpBack = null;
      }
      this.bmpBack = ImageProcess.FittingWindow(this.bmpSrc, (int)(this.nViewWidth - MyData.nDensity * 20.0F), (int)(this.nViewHeight - MyData.nDensity * 20.0F), false);
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
    invalidate();
    return;
  }
}

```

