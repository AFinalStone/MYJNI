


```java
package com.mt.mtxx.image;

import android.content.Context;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Canvas;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.media.ExifInterface;
import com.mt.mtxx.mtxx.MTDebug;
import com.mt.mtxx.mtxx.MyData;
import com.mt.mtxx.mtxx.MyPro;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

public class ImageProcess
{
  private static float[] DELTA_INDEX = { 0.0F, 0.01F, 0.02F, 0.04F, 0.05F, 0.06F, 0.07F, 0.08F, 0.1F, 0.11F, 0.12F, 0.14F, 0.15F, 0.16F, 0.17F, 0.18F, 0.2F, 0.21F, 0.22F, 0.24F, 0.25F, 0.27F, 0.28F, 0.3F, 0.32F, 0.34F, 0.36F, 0.38F, 0.4F, 0.42F, 0.44F, 0.46F, 0.48F, 0.5F, 0.53F, 0.56F, 0.59F, 0.62F, 0.65F, 0.68F, 0.71F, 0.74F, 0.77F, 0.8F, 0.83F, 0.86F, 0.89F, 0.92F, 0.95F, 0.98F, 1.0F, 1.06F, 1.12F, 1.18F, 1.24F, 1.3F, 1.36F, 1.42F, 1.48F, 1.54F, 1.6F, 1.66F, 1.72F, 1.78F, 1.84F, 1.9F, 1.96F, 2.0F, 2.12F, 2.25F, 2.37F, 2.5F, 2.62F, 2.75F, 2.87F, 3.0F, 3.2F, 3.4F, 3.6F, 3.8F, 4.0F, 4.3F, 4.7F, 4.9F, 5.0F, 5.5F, 6.0F, 6.5F, 6.8F, 7.0F, 7.3F, 7.5F, 7.8F, 8.0F, 8.4F, 8.7F, 9.0F, 9.4F, 9.6F, 9.8F, 10.0F };
  private static JNI jni = new JNI();
  
  public static Bitmap AutoWhiteBalance(Bitmap paramBitmap)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject1 = localObject2;
      int i = paramBitmap.getWidth();
      localObject1 = localObject2;
      int j = paramBitmap.getHeight();
      localObject1 = localObject2;
      paramBitmap = bitmap2ByteARGB(paramBitmap);
      localObject1 = localObject2;
      jni.AutoWhiteBalance(paramBitmap, i, j);
      localObject1 = localObject2;
      paramBitmap = bytesARGB2Bimap(paramBitmap, i, j);
      localObject1 = paramBitmap;
      long l2 = System.currentTimeMillis();
      localObject1 = paramBitmap;
      MTDebug.Print("AutoWhiteBalance time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  public static Bitmap BackWeak(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int paramInt1, int paramInt2, int paramInt3, int paramInt4, byte[] paramArrayOfByte, int paramInt5, int paramInt6)
  {
    try
    {
      MTDebug.Print("BackWeak width=" + paramInt1 + " height=" + paramInt2 + " total=" + paramInt1 * paramInt2 + " nOutsideRound=" + paramInt6);
      if (paramArrayOfInt1.length < paramInt1 * paramInt2)
      {
        MTDebug.PrintError("[BackWeak] DstImage.length=" + paramArrayOfInt1.length);
        return null;
      }
      if (paramArrayOfInt2.length < paramInt1 * paramInt2)
      {
        MTDebug.PrintError("[BackWeak] SrcImage.length=" + paramArrayOfInt2.length);
        return null;
      }
      int i = paramInt6 * 2 + 1;
      if (paramArrayOfByte.length >= i * i) {
        break label197;
      }
      MTDebug.PrintError("[BackWeak] alphaRect.length=" + paramArrayOfByte.length);
      return null;
    }
    catch (Exception paramArrayOfInt1)
    {
      for (;;)
      {
        paramArrayOfInt1.printStackTrace();
        paramArrayOfInt1 = null;
        continue;
        label197:
        if ((paramArrayOfInt1 != null) && (paramArrayOfInt2 != null)) {
          if (paramArrayOfByte != null) {}
        }
      }
    }
    MTDebug.Print("[Error][BackWeak] BackWeak");
    return null;
    jni.BackWeakOne(paramArrayOfInt1, paramArrayOfInt2, paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfByte, paramInt5, paramInt6);
    paramArrayOfInt1 = intARGB2Bimap(paramArrayOfInt1, paramInt1, paramInt2);
    return paramArrayOfInt1;
  }
  
  public static Bitmap BackWeak2(byte[] paramArrayOfByte1, int paramInt1, int paramInt2, int paramInt3, int paramInt4, byte[] paramArrayOfByte2, int paramInt5, int paramInt6)
  {
    try
    {
      if (paramArrayOfByte1.length < paramInt1 * paramInt2)
      {
        MTDebug.Print("[Error][BackWeakLine] SrcImage.length=" + paramArrayOfByte1.length);
        return null;
      }
      int i = paramInt6 * 2 + 1;
      if (paramArrayOfByte2.length < i * i)
      {
        MTDebug.Print("[Error][BackWeakLine] alphaRect.length=" + paramArrayOfByte2.length + " nOutsideRound=" + paramInt6);
        return null;
      }
      jni.BackWeak2(paramArrayOfByte1, paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfByte2, paramInt5, paramInt6);
      paramArrayOfByte1 = bytesARGB2Bimap(paramArrayOfByte1, paramInt1, paramInt2);
    }
    catch (Exception paramArrayOfByte1)
    {
      for (;;)
      {
        paramArrayOfByte1.printStackTrace();
        paramArrayOfByte1 = null;
      }
    }
    return paramArrayOfByte1;
  }
  
  public static Bitmap BackWeakLine(int[] paramArrayOfInt1, int[] paramArrayOfInt2, int paramInt1, int paramInt2, int[] paramArrayOfInt3, int[] paramArrayOfInt4, float paramFloat, int paramInt3, int paramInt4)
  {
    try
    {
      if (paramArrayOfInt1.length < paramInt1 * paramInt2)
      {
        MTDebug.PrintError("[Error][BackWeakLine] DstImage.length=" + paramArrayOfInt1.length);
        return null;
      }
      if (paramArrayOfInt2.length < paramInt1 * paramInt2)
      {
        MTDebug.PrintError("[Error][BackWeakLine] SrcImage.length=" + paramArrayOfInt2.length);
        return null;
      }
      if (paramArrayOfInt3.length != 8)
      {
        MTDebug.PrintError("[Error][BackWeakLine] x.length=" + paramArrayOfInt3.length);
        return null;
      }
      if (paramArrayOfInt4.length == 8) {
        break label168;
      }
      MTDebug.PrintError("[Error][BackWeakLine] y.length=" + paramArrayOfInt4.length);
      return null;
    }
    catch (Exception paramArrayOfInt1)
    {
      for (;;)
      {
        paramArrayOfInt1.printStackTrace();
        paramArrayOfInt1 = null;
        continue;
        label168:
        if ((paramArrayOfInt1 != null) && (paramArrayOfInt2 != null) && (paramArrayOfInt3 != null)) {
          if (paramArrayOfInt4 != null) {}
        }
      }
    }
    MTDebug.PrintError("[Error] BackWeakLine");
    return null;
    jni.BackWeakLine(paramArrayOfInt1, paramArrayOfInt2, paramInt1, paramInt2, paramArrayOfInt3, paramArrayOfInt4, paramFloat, paramInt3, paramInt4);
    paramArrayOfInt1 = intARGB2Bimap(paramArrayOfInt1, paramInt1, paramInt2);
    return paramArrayOfInt1;
  }
  
  public static Bitmap Bmp565ToBmp888(Bitmap paramBitmap, boolean paramBoolean)
  {
    Object localObject = null;
    try
    {
      if (paramBitmap.getConfig() == Bitmap.Config.RGB_565)
      {
        paramBitmap = paramBitmap.copy(Bitmap.Config.ARGB_8888, true);
        return paramBitmap;
      }
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      for (;;)
      {
        MTDebug.Print("FittingWindow " + paramBitmap.toString());
        paramBitmap.printStackTrace();
        paramBitmap = localObject;
      }
    }
  }
  
  public static Bitmap Clone(Bitmap paramBitmap)
  {
    try
    {
      paramBitmap = paramBitmap.copy(MyData.mConfig, true);
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return null;
  }
  
  public static Bitmap FaceBeauty(Bitmap paramBitmap, int paramInt, boolean paramBoolean)
  {
    try
    {
      int i = paramBitmap.getWidth();
      int j = paramBitmap.getHeight();
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      if (paramBoolean) {
        paramBitmap.recycle();
      }
      jni.FaceBeauty(arrayOfInt, i, j, paramInt);
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return null;
  }
  
  public static void FaceBeautyRelease()
  {
    try
    {
      jni.FaceBeautyRelease();
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public static Bitmap FittingWindow(Bitmap paramBitmap, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    Bitmap localBitmap2 = null;
    Bitmap localBitmap1 = localBitmap2;
    for (;;)
    {
      int j;
      int i;
      try
      {
        int k = paramBitmap.getWidth();
        localBitmap1 = localBitmap2;
        int m = paramBitmap.getHeight();
        float f;
        if (k * paramInt2 > m * paramInt1)
        {
          j = paramInt1;
          localBitmap1 = localBitmap2;
          i = m * paramInt1 / k;
          localBitmap1 = localBitmap2;
          f = j / k;
          localBitmap1 = localBitmap2;
          MTDebug.Print("scale=" + f);
          localBitmap1 = localBitmap2;
          f = (int)(f * 1000.0F) / 1000.0F;
          localBitmap1 = localBitmap2;
          Matrix localMatrix = new Matrix();
          localBitmap1 = localBitmap2;
          localMatrix.reset();
          localBitmap1 = localBitmap2;
          localMatrix.preScale(f, f);
          localBitmap1 = localBitmap2;
          MTDebug.Print("srcW=" + k + " srcH=" + m + " scale=" + f + " w=" + paramInt1 + " h=" + paramInt2);
          if (paramBitmap == null)
          {
            localBitmap1 = localBitmap2;
            MTDebug.Print("2aMTXX src == null");
            if ((k != j) || (m != i)) {
              break label388;
            }
            localBitmap1 = localBitmap2;
            localBitmap2 = paramBitmap.copy(paramBitmap.getConfig(), true);
            localBitmap1 = localBitmap2;
            MTDebug.Print("FittingWindow copy");
            if (!paramBoolean) {
              break;
            }
            localBitmap1 = localBitmap2;
            paramBitmap.recycle();
            return localBitmap2;
          }
        }
        else
        {
          i = paramInt2;
          localBitmap1 = localBitmap2;
          j = k * paramInt2 / m;
          localBitmap1 = localBitmap2;
          f = i / m;
          localBitmap1 = localBitmap2;
          MTDebug.Print("scale=" + f);
          continue;
        }
        localBitmap1 = localBitmap2;
      }
      catch (Exception paramBitmap)
      {
        MTDebug.Print("FittingWindow " + paramBitmap.toString());
        paramBitmap.printStackTrace();
        return localBitmap1;
      }
      if (paramBitmap.isRecycled())
      {
        localBitmap1 = localBitmap2;
        MTDebug.Print("3aMTXX src.isRecycled()");
        continue;
        label388:
        localBitmap1 = localBitmap2;
        localBitmap2 = createScaledBitmap(paramBitmap, j, i, paramBitmap.getConfig());
      }
    }
    return localBitmap2;
  }
  
  public static Bitmap FittingWindow888(Bitmap paramBitmap, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    Bitmap localBitmap2 = null;
    Bitmap localBitmap1 = localBitmap2;
    for (;;)
    {
      int i;
      int j;
      try
      {
        i = paramBitmap.getWidth();
        localBitmap1 = localBitmap2;
        j = paramBitmap.getHeight();
        int k;
        float f;
        if (i * paramInt2 > j * paramInt1)
        {
          localBitmap1 = localBitmap2;
          k = j * paramInt1 / i;
          localBitmap1 = localBitmap2;
          f = paramInt1 / i;
          localBitmap1 = localBitmap2;
          MTDebug.Print("scale=" + f);
          localBitmap1 = localBitmap2;
          f = (int)(f * 1000.0F) / 1000.0F;
          localBitmap1 = localBitmap2;
          Matrix localMatrix = new Matrix();
          localBitmap1 = localBitmap2;
          localMatrix.reset();
          localBitmap1 = localBitmap2;
          localMatrix.preScale(f, f);
          localBitmap1 = localBitmap2;
          MTDebug.Print("srcW=" + i + " srcH=" + j + " scale=" + f + " w=" + paramInt1 + " h=" + paramInt2);
          if (paramBitmap == null)
          {
            localBitmap1 = localBitmap2;
            MTDebug.Print("2aMTXX src == null");
            if (f != 1.0F) {
              break label372;
            }
            localBitmap1 = localBitmap2;
            localBitmap2 = paramBitmap.copy(Bitmap.Config.ARGB_8888, true);
            localBitmap1 = localBitmap2;
            MTDebug.Print("FittingWindow copy");
            if (!paramBoolean) {
              break;
            }
            localBitmap1 = localBitmap2;
            paramBitmap.recycle();
            return localBitmap2;
          }
        }
        else
        {
          localBitmap1 = localBitmap2;
          k = i * paramInt2 / j;
          localBitmap1 = localBitmap2;
          f = paramInt2 / j;
          localBitmap1 = localBitmap2;
          MTDebug.Print("scale=" + f);
          continue;
        }
        localBitmap1 = localBitmap2;
      }
      catch (Exception paramBitmap)
      {
        MTDebug.Print("FittingWindow " + paramBitmap.toString());
        paramBitmap.printStackTrace();
        return localBitmap1;
      }
      if (paramBitmap.isRecycled())
      {
        localBitmap1 = localBitmap2;
        MTDebug.Print("3aMTXX src.isRecycled()");
        continue;
        label372:
        localBitmap1 = localBitmap2;
        localBitmap2 = createScaledBitmap(paramBitmap, i, j, Bitmap.Config.ARGB_8888);
      }
    }
    return localBitmap2;
  }
  
  public static Bitmap FittingWindowSave(Bitmap paramBitmap, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    Bitmap localBitmap2 = null;
    localBitmap1 = localBitmap2;
    try
    {
      MTDebug.Print("FittingWindowSave w=" + paramInt1 + " h=" + paramInt2 + " srcW=" + paramBitmap.getWidth() + " srcH=" + paramBitmap.getHeight());
      localBitmap1 = localBitmap2;
      if (paramBitmap.getWidth() <= paramInt1)
      {
        localBitmap1 = localBitmap2;
        if (paramBitmap.getHeight() <= paramInt2) {
          return paramBitmap;
        }
      }
      localBitmap1 = localBitmap2;
      int i = paramBitmap.getWidth();
      localBitmap1 = localBitmap2;
      int j = paramBitmap.getHeight();
      float f;
      if (i * paramInt2 > j * paramInt1)
      {
        paramInt2 = paramInt1;
        localBitmap1 = localBitmap2;
        paramInt1 = j * paramInt1 / i;
        localBitmap1 = localBitmap2;
        f = paramInt2 / i;
        if ((i != paramInt2) || (j != paramInt1)) {
          break label272;
        }
        localBitmap1 = localBitmap2;
        localBitmap2 = paramBitmap.copy(MyData.mConfig, true);
        localBitmap1 = localBitmap2;
        MTDebug.Print("FittingWindowSave copy");
      }
      for (;;)
      {
        if (paramBoolean)
        {
          localBitmap1 = localBitmap2;
          paramBitmap.recycle();
        }
        localBitmap1 = localBitmap2;
        MTDebug.Print("w=" + localBitmap2.getWidth() + " h=" + localBitmap2.getHeight());
        localBitmap1 = localBitmap2;
        break label299;
        paramInt1 = paramInt2;
        localBitmap1 = localBitmap2;
        paramInt2 = i * paramInt2 / j;
        localBitmap1 = localBitmap2;
        f = paramInt1 / j;
        break;
        label272:
        localBitmap1 = localBitmap2;
        localBitmap2 = createScaledBitmap(paramBitmap, paramInt2, paramInt1, paramBitmap.getConfig());
      }
      return localBitmap1;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
  }
  
  public static Bitmap FrameColorful(Bitmap paramBitmap, String paramString, int paramInt, Context paramContext, boolean paramBoolean)
  {
    for (;;)
    {
      try
      {
        l1 = System.currentTimeMillis();
        i = paramBitmap.getWidth();
        j = paramBitmap.getHeight();
        int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
        if (paramBoolean) {
          paramBitmap.recycle();
        }
        paramBitmap = LoadAssertsPic(paramString, paramContext.getAssets());
        if ((i > j) && ((paramInt & 0x1) == 1))
        {
          paramBitmap = resize(rotate90(paramBitmap, true), i, j, true);
          paramString = bitmap2IntARGB(paramBitmap);
          MTDebug.Print("dataL=" + arrayOfInt.length + " maskL=" + paramString.length + " w=" + i + " height=" + j + " type=" + paramInt);
          paramBitmap.recycle();
          jni.FrameXCBK(arrayOfInt, paramString, i, j, paramInt);
          System.gc();
          paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
        }
      }
      catch (Exception paramString)
      {
        long l1;
        int i;
        int j;
        long l2;
        paramBitmap = null;
      }
      try
      {
        l2 = System.currentTimeMillis();
        MTDebug.Print("StyleMilk time=" + (l2 - l1));
        return paramBitmap;
      }
      catch (Exception paramString)
      {
        break;
      }
      paramBitmap = resize(paramBitmap, i, j, true);
    }
    paramString.printStackTrace();
    return paramBitmap;
  }
  
  public static Bitmap GaussIIRBlurBrush(Bitmap paramBitmap, int paramInt1, int paramInt2)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject1 = localObject2;
      int i = paramBitmap.getWidth();
      localObject1 = localObject2;
      int j = paramBitmap.getHeight();
      localObject1 = localObject2;
      paramBitmap = bitmap2IntARGB(paramBitmap);
      localObject1 = localObject2;
      jni.GaussIIRBlurBrush(paramBitmap, paramInt1, paramInt2, i, j);
      localObject1 = localObject2;
      paramBitmap = intARGB2Bimap(paramBitmap, i, j);
      localObject1 = paramBitmap;
      long l2 = System.currentTimeMillis();
      localObject1 = paramBitmap;
      MTDebug.Print("GaussIIRBlurBrush time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  public static int[] GaussIIRBlurBrush2(Bitmap paramBitmap, int paramInt1, int paramInt2)
  {
    int[] arrayOfInt = (int[])null;
    Object localObject = arrayOfInt;
    try
    {
      int i = paramBitmap.getWidth();
      localObject = arrayOfInt;
      int j = paramBitmap.getHeight();
      localObject = arrayOfInt;
      paramBitmap = bitmap2IntARGB(paramBitmap);
      localObject = paramBitmap;
      jni.GaussIIRBlurBrush(paramBitmap, paramInt1, paramInt2, i, j);
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject;
  }
  
  public static Bitmap GaussIIRBlurImage(Bitmap paramBitmap, int paramInt1, int paramInt2)
  {
    try
    {
      int i = paramBitmap.getWidth();
      int j = paramBitmap.getHeight();
      paramBitmap = bitmap2ByteARGB(paramBitmap);
      jni.GaussIIRBlurImage(paramBitmap, paramInt1, paramInt2, i, j);
      paramBitmap = bytesARGB2Bimap(paramBitmap, i, j);
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return null;
  }
  
  public static Bitmap Grayscale(Bitmap paramBitmap)
  {
    try
    {
      int i = paramBitmap.getWidth();
      int j = paramBitmap.getHeight();
      paramBitmap = bitmap2ByteARGB(paramBitmap);
      jni.Grayscale(paramBitmap, i, j);
      paramBitmap = bytesARGB2Bimap(paramBitmap, i, j);
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return null;
  }
  
  public static Bitmap LoadAssertsPic(String paramString, AssetManager paramAssetManager)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject1 = localObject2;
      MTDebug.Print("LoadAssertsPic path=" + paramString);
      localObject1 = localObject2;
      paramAssetManager = paramAssetManager.open(paramString);
      localObject1 = localObject2;
      paramString = new BitmapFactory.Options();
      localObject1 = localObject2;
      paramString.inDither = false;
      localObject1 = localObject2;
      paramString.inPreferredConfig = MyData.mConfig;
      localObject1 = localObject2;
      paramString = BitmapFactory.decodeStream(paramAssetManager, null, paramString);
      localObject1 = paramString;
      paramAssetManager.close();
      localObject1 = paramString;
      long l2 = System.currentTimeMillis();
      localObject1 = paramString;
      MTDebug.Print("LoadAssertsPic time=" + (l2 - l1));
      return paramString;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
    return localObject1;
  }
  
  public static Bitmap MoveBmpToMiddle(Bitmap paramBitmap, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    Object localObject = null;
    try
    {
      Bitmap localBitmap = Bitmap.createBitmap(paramInt1, paramInt2, paramBitmap.getConfig());
      localObject = localBitmap;
      Canvas localCanvas = new Canvas(localBitmap);
      localObject = localBitmap;
      paramInt1 = (paramInt1 - paramBitmap.getWidth()) / 2;
      localObject = localBitmap;
      paramInt2 = (paramInt2 - paramBitmap.getHeight()) / 2;
      localObject = localBitmap;
      Paint localPaint = new Paint();
      localObject = localBitmap;
      localPaint.setAntiAlias(true);
      localObject = localBitmap;
      localCanvas.drawBitmap(paramBitmap, paramInt1, paramInt2, localPaint);
      if (paramBoolean)
      {
        localObject = localBitmap;
        paramBitmap.recycle();
      }
      return localBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject;
  }
  
  public static Bitmap OpenPic(String paramString)
  {
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    localOptions.inDither = false;
    return BitmapFactory.decodeFile(paramString, localOptions);
  }
  
  public static Bitmap OpenPic(String paramString, int paramInt1, int paramInt2)
  {
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    localOptions.outWidth = paramInt1;
    localOptions.outHeight = paramInt2;
    return BitmapFactory.decodeFile(paramString, localOptions);
  }
  
  /* Error */
  public static Bitmap PreviewBigPic(String paramString, Bitmap.Config paramConfig)
  {
    // Byte code:
    //   0: new 450	java/io/File
    //   3: dup
    //   4: aload_0
    //   5: invokespecial 451	java/io/File:<init>	(Ljava/lang/String;)V
    //   8: astore 5
    //   10: ldc_w 453
    //   13: invokestatic 457	com/mt/mtxx/mtxx/MTDebug:memeryUsed	(Ljava/lang/String;)D
    //   16: pop2
    //   17: new 387	android/graphics/BitmapFactory$Options
    //   20: dup
    //   21: invokespecial 388	android/graphics/BitmapFactory$Options:<init>	()V
    //   24: astore 6
    //   26: aload 6
    //   28: iconst_1
    //   29: putfield 460	android/graphics/BitmapFactory$Options:inJustDecodeBounds	Z
    //   32: new 462	java/io/FileInputStream
    //   35: dup
    //   36: aload 5
    //   38: invokespecial 465	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   41: astore 7
    //   43: aload 7
    //   45: aconst_null
    //   46: aload 6
    //   48: invokestatic 401	android/graphics/BitmapFactory:decodeStream	(Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   51: pop
    //   52: aload 7
    //   54: invokevirtual 466	java/io/FileInputStream:close	()V
    //   57: aload 6
    //   59: getfield 441	android/graphics/BitmapFactory$Options:outWidth	I
    //   62: istore 4
    //   64: aload 6
    //   66: getfield 444	android/graphics/BitmapFactory$Options:outHeight	I
    //   69: istore_3
    //   70: new 151	java/lang/StringBuilder
    //   73: dup
    //   74: ldc_w 468
    //   77: invokespecial 156	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   80: iload 4
    //   82: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   85: ldc_w 470
    //   88: invokevirtual 184	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   91: iload_3
    //   92: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   95: invokevirtual 164	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   98: invokestatic 169	com/mt/mtxx/mtxx/MTDebug:Print	(Ljava/lang/String;)V
    //   101: iconst_1
    //   102: istore_2
    //   103: iload 4
    //   105: sipush 1200
    //   108: if_icmpge +215 -> 323
    //   111: iload_3
    //   112: sipush 1200
    //   115: if_icmpge +208 -> 323
    //   118: new 151	java/lang/StringBuilder
    //   121: dup
    //   122: ldc_w 472
    //   125: invokespecial 156	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   128: iload_2
    //   129: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   132: ldc_w 474
    //   135: invokevirtual 184	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   138: iload 4
    //   140: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   143: ldc_w 470
    //   146: invokevirtual 184	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   149: iload_3
    //   150: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   153: invokevirtual 164	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   156: invokestatic 169	com/mt/mtxx/mtxx/MTDebug:Print	(Ljava/lang/String;)V
    //   159: ldc_w 476
    //   162: invokestatic 457	com/mt/mtxx/mtxx/MTDebug:memeryUsed	(Ljava/lang/String;)D
    //   165: pop2
    //   166: iload_2
    //   167: iconst_1
    //   168: if_icmple +179 -> 347
    //   171: new 387	android/graphics/BitmapFactory$Options
    //   174: dup
    //   175: invokespecial 388	android/graphics/BitmapFactory$Options:<init>	()V
    //   178: astore_0
    //   179: aload_0
    //   180: iload_2
    //   181: putfield 479	android/graphics/BitmapFactory$Options:inSampleSize	I
    //   184: aload_0
    //   185: iconst_0
    //   186: putfield 460	android/graphics/BitmapFactory$Options:inJustDecodeBounds	Z
    //   189: aload_0
    //   190: iconst_0
    //   191: putfield 392	android/graphics/BitmapFactory$Options:inDither	Z
    //   194: aload_0
    //   195: aload_1
    //   196: putfield 395	android/graphics/BitmapFactory$Options:inPreferredConfig	Landroid/graphics/Bitmap$Config;
    //   199: new 151	java/lang/StringBuilder
    //   202: dup
    //   203: ldc_w 481
    //   206: invokespecial 156	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   209: iload_2
    //   210: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   213: ldc_w 474
    //   216: invokevirtual 184	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   219: iload 4
    //   221: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   224: ldc_w 470
    //   227: invokevirtual 184	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   230: iload_3
    //   231: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   234: invokevirtual 164	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   237: invokestatic 169	com/mt/mtxx/mtxx/MTDebug:Print	(Ljava/lang/String;)V
    //   240: new 462	java/io/FileInputStream
    //   243: dup
    //   244: aload 5
    //   246: invokespecial 465	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   249: astore_1
    //   250: aload_1
    //   251: aconst_null
    //   252: aload_0
    //   253: invokestatic 401	android/graphics/BitmapFactory:decodeStream	(Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   256: astore_0
    //   257: new 151	java/lang/StringBuilder
    //   260: dup
    //   261: ldc_w 483
    //   264: invokespecial 156	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   267: aload_0
    //   268: invokevirtual 135	android/graphics/Bitmap:getWidth	()I
    //   271: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   274: ldc_w 300
    //   277: invokevirtual 184	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   280: aload_0
    //   281: invokevirtual 138	android/graphics/Bitmap:getHeight	()I
    //   284: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   287: invokevirtual 164	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   290: invokestatic 169	com/mt/mtxx/mtxx/MTDebug:Print	(Ljava/lang/String;)V
    //   293: ldc_w 485
    //   296: invokestatic 457	com/mt/mtxx/mtxx/MTDebug:memeryUsed	(Ljava/lang/String;)D
    //   299: pop2
    //   300: aload_1
    //   301: invokevirtual 466	java/io/FileInputStream:close	()V
    //   304: aload_0
    //   305: areturn
    //   306: astore 7
    //   308: aload 7
    //   310: invokevirtual 409	java/io/IOException:printStackTrace	()V
    //   313: goto -256 -> 57
    //   316: astore_0
    //   317: aload_0
    //   318: invokevirtual 486	java/io/FileNotFoundException:printStackTrace	()V
    //   321: aconst_null
    //   322: areturn
    //   323: iload 4
    //   325: iconst_2
    //   326: idiv
    //   327: istore 4
    //   329: iload_3
    //   330: iconst_2
    //   331: idiv
    //   332: istore_3
    //   333: iload_2
    //   334: iconst_2
    //   335: imul
    //   336: istore_2
    //   337: goto -234 -> 103
    //   340: astore_1
    //   341: aload_1
    //   342: invokevirtual 409	java/io/IOException:printStackTrace	()V
    //   345: aload_0
    //   346: areturn
    //   347: new 151	java/lang/StringBuilder
    //   350: dup
    //   351: ldc_w 488
    //   354: invokespecial 156	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   357: iload_2
    //   358: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   361: invokevirtual 164	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   364: invokestatic 169	com/mt/mtxx/mtxx/MTDebug:Print	(Ljava/lang/String;)V
    //   367: new 387	android/graphics/BitmapFactory$Options
    //   370: dup
    //   371: invokespecial 388	android/graphics/BitmapFactory$Options:<init>	()V
    //   374: astore 5
    //   376: aload 5
    //   378: iconst_0
    //   379: putfield 392	android/graphics/BitmapFactory$Options:inDither	Z
    //   382: aload 5
    //   384: aload_1
    //   385: putfield 395	android/graphics/BitmapFactory$Options:inPreferredConfig	Landroid/graphics/Bitmap$Config;
    //   388: aload_0
    //   389: aload 5
    //   391: invokestatic 436	android/graphics/BitmapFactory:decodeFile	(Ljava/lang/String;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   394: astore_0
    //   395: aload_0
    //   396: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	397	0	paramString	String
    //   0	397	1	paramConfig	Bitmap.Config
    //   102	256	2	i	int
    //   69	264	3	j	int
    //   62	266	4	k	int
    //   8	382	5	localObject	Object
    //   24	41	6	localOptions	BitmapFactory.Options
    //   41	12	7	localFileInputStream	java.io.FileInputStream
    //   306	3	7	localIOException	IOException
    // Exception table:
    //   from	to	target	type
    //   52	57	306	java/io/IOException
    //   10	52	316	java/io/FileNotFoundException
    //   52	57	316	java/io/FileNotFoundException
    //   57	101	316	java/io/FileNotFoundException
    //   118	166	316	java/io/FileNotFoundException
    //   171	300	316	java/io/FileNotFoundException
    //   300	304	316	java/io/FileNotFoundException
    //   308	313	316	java/io/FileNotFoundException
    //   323	333	316	java/io/FileNotFoundException
    //   341	345	316	java/io/FileNotFoundException
    //   347	395	316	java/io/FileNotFoundException
    //   300	304	340	java/io/IOException
  }
  
  public static Bitmap Resample(Bitmap paramBitmap, float paramFloat)
  {
    try
    {
      int i = paramBitmap.getWidth();
      int j = paramBitmap.getHeight();
      int k = (int)(i * paramFloat);
      int m = (int)(j * paramFloat);
      paramBitmap = bitmap2ByteARGB(paramBitmap);
      byte[] arrayOfByte = new byte[k * m * 4];
      jni.Resample(arrayOfByte, k, m, 0, paramBitmap, i, j);
      paramBitmap = bytesARGB2Bimap(arrayOfByte, k, m);
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return null;
  }
  
  public static byte[] SetBackWeakRadius(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    int i = paramInt2 * 2 + 1;
    try
    {
      if (paramArrayOfByte.length < i * i)
      {
        MTDebug.PrintError("[Error][SetBackWeakRadius] alphaRect.length=" + paramArrayOfByte.length + "nOutsideRound=" + paramInt2);
        return null;
      }
      jni.SetBackWeakRadius(paramArrayOfByte, paramInt1, paramInt2);
    }
    catch (Exception localException)
    {
      for (;;)
      {
        localException.printStackTrace();
      }
    }
    return paramArrayOfByte;
  }
  
  public static Bitmap Sharp(Bitmap paramBitmap, float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    try
    {
      int i = paramBitmap.getWidth();
      int j = paramBitmap.getHeight();
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      if (paramBoolean) {
        paramBitmap.recycle();
      }
      jni.Sharp(arrayOfInt, i, j, paramFloat1, paramFloat2);
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return null;
  }
  
  public static Bitmap SharpPreview(Bitmap paramBitmap, float paramFloat1, float paramFloat2)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject1 = localObject2;
      int i = paramBitmap.getWidth();
      localObject1 = localObject2;
      int j = paramBitmap.getHeight();
      localObject1 = localObject2;
      paramBitmap = bitmap2IntARGB(paramBitmap);
      localObject1 = localObject2;
      jni.SharpPreview(paramBitmap, i, j, paramFloat1, paramFloat2);
      localObject1 = localObject2;
      paramBitmap = intARGB2Bimap(paramBitmap, i, j);
      localObject1 = paramBitmap;
      long l2 = System.currentTimeMillis();
      localObject1 = paramBitmap;
      MTDebug.Print("SharpPreview time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  public static void SharpPreviewRelease()
  {
    try
    {
      jni.SharpPreviewRelease();
      return;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
  }
  
  public static Bitmap SkinWhite(Bitmap paramBitmap, int paramInt, boolean paramBoolean)
  {
    try
    {
      int i = paramBitmap.getWidth();
      int j = paramBitmap.getHeight();
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      if (paramBoolean) {
        paramBitmap.recycle();
      }
      jni.SkinWhite(arrayOfInt, i, j, paramInt);
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return null;
  }
  
  public static Bitmap StyleBaoColor(Bitmap paramBitmap, Context paramContext, boolean paramBoolean)
  {
    Object localObject = null;
    paramContext = localObject;
    try
    {
      long l1 = System.currentTimeMillis();
      paramContext = localObject;
      int i = paramBitmap.getWidth();
      paramContext = localObject;
      int j = paramBitmap.getHeight();
      paramContext = localObject;
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      if (paramBoolean)
      {
        paramContext = localObject;
        paramBitmap.recycle();
      }
      paramContext = localObject;
      jni.StyleBaoColor(arrayOfInt, i, j);
      paramContext = localObject;
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      paramContext = paramBitmap;
      long l2 = System.currentTimeMillis();
      paramContext = paramBitmap;
      MTDebug.Print("StyleBaoColor time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return paramContext;
  }
  
  public static Bitmap StyleBrightRed(Bitmap paramBitmap, Context paramContext, boolean paramBoolean)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject1 = localObject2;
      int i = paramBitmap.getWidth();
      localObject1 = localObject2;
      int j = paramBitmap.getHeight();
      localObject1 = localObject2;
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      if (paramBoolean)
      {
        localObject1 = localObject2;
        paramBitmap.recycle();
      }
      localObject1 = localObject2;
      paramContext = LoadAssertsPic("style/mtxx_lianghong_001.jpg", paramContext.getAssets());
      localObject1 = localObject2;
      paramBitmap = resize(paramContext, i, j, false);
      localObject1 = localObject2;
      paramContext.recycle();
      localObject1 = localObject2;
      paramContext = bitmap2IntARGB(paramBitmap);
      localObject1 = localObject2;
      paramBitmap.recycle();
      localObject1 = localObject2;
      jni.StyleLomoBrightRed(arrayOfInt, paramContext, i, j);
      localObject1 = localObject2;
      paramBitmap = (int[])null;
      localObject1 = localObject2;
      System.gc();
      localObject1 = localObject2;
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      localObject1 = paramBitmap;
      long l2 = System.currentTimeMillis();
      localObject1 = paramBitmap;
      MTDebug.Print("StyleBrightRed time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  public static Bitmap StyleCinnamon(Bitmap paramBitmap, boolean paramBoolean)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject1 = localObject2;
      int i = paramBitmap.getWidth();
      localObject1 = localObject2;
      int j = paramBitmap.getHeight();
      localObject1 = localObject2;
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      if (paramBoolean)
      {
        localObject1 = localObject2;
        paramBitmap.recycle();
      }
      localObject1 = localObject2;
      jni.StyleCinnamon(arrayOfInt, i, j);
      localObject1 = localObject2;
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      localObject1 = paramBitmap;
      long l2 = System.currentTimeMillis();
      localObject1 = paramBitmap;
      MTDebug.Print("StyleCinnamon time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  public static Bitmap StyleClassic(Bitmap paramBitmap, float paramFloat, boolean paramBoolean)
  {
    int[] arrayOfInt1 = null;
    Object localObject = arrayOfInt1;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject = arrayOfInt1;
      int i = paramBitmap.getWidth();
      localObject = arrayOfInt1;
      int j = paramBitmap.getHeight();
      localObject = arrayOfInt1;
      int[] arrayOfInt2 = bitmap2IntARGB(paramBitmap);
      if (paramBoolean)
      {
        localObject = arrayOfInt1;
        paramBitmap.recycle();
      }
      localObject = arrayOfInt1;
      MTDebug.Print("ta d0=" + arrayOfInt2[0] + " d1=" + arrayOfInt2[1]);
      localObject = arrayOfInt1;
      jni.StyleClassic(arrayOfInt2, i, j, paramFloat);
      localObject = arrayOfInt1;
      paramBitmap = intARGB2Bimap(arrayOfInt2, i, j);
      localObject = paramBitmap;
      arrayOfInt1 = (int[])null;
      localObject = paramBitmap;
      System.gc();
      localObject = paramBitmap;
      long l2 = System.currentTimeMillis();
      localObject = paramBitmap;
      MTDebug.Print("StyleClassic time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject;
  }
  
  public static Bitmap StyleClassicStudio(Bitmap paramBitmap, boolean paramBoolean)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject1 = localObject2;
      int i = paramBitmap.getWidth();
      localObject1 = localObject2;
      int j = paramBitmap.getHeight();
      localObject1 = localObject2;
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      if (paramBoolean)
      {
        localObject1 = localObject2;
        paramBitmap.recycle();
      }
      localObject1 = localObject2;
      jni.StyleClassicStudio(arrayOfInt, i, j);
      localObject1 = localObject2;
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      localObject1 = paramBitmap;
      long l2 = System.currentTimeMillis();
      localObject1 = paramBitmap;
      MTDebug.Print("StyleClassicStudio time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  public static Bitmap StyleE(Bitmap paramBitmap, Context paramContext, boolean paramBoolean)
  {
    for (;;)
    {
      try
      {
        l1 = System.currentTimeMillis();
        i = paramBitmap.getWidth();
        j = paramBitmap.getHeight();
        localBitmap = LoadAssertsPic("style/mtxx_lomo3.jpg", paramContext.getAssets());
        if (i > j)
        {
          localBitmap = resize(rotate90(localBitmap, true), i, j, true);
          int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
          if (paramBoolean) {
            paramBitmap.recycle();
          }
          paramBitmap = bitmap2IntARGB(localBitmap);
          localBitmap.recycle();
          jni.StyleEP1(arrayOfInt, paramBitmap, i, j);
          paramBitmap = (int[])null;
          paramBitmap = LoadAssertsPic("style/mtxx_lomo1_2.jpg", paramContext.getAssets());
          if (i <= j) {
            continue;
          }
          paramBitmap = resize(rotate90(paramBitmap, true), i, j, true);
          paramContext = bitmap2IntARGB(paramBitmap);
          paramBitmap.recycle();
          jni.StyleEP2(arrayOfInt, paramContext, i, j);
          paramBitmap = (int[])null;
          paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
        }
      }
      catch (Exception paramContext)
      {
        long l1;
        int i;
        int j;
        Bitmap localBitmap;
        long l2;
        paramBitmap = null;
      }
      try
      {
        l2 = System.currentTimeMillis();
        MTDebug.Print("StyleE time=" + (l2 - l1));
        return paramBitmap;
      }
      catch (Exception paramContext)
      {
        break;
      }
      localBitmap = resize(localBitmap, i, j, true);
      continue;
      paramBitmap = resize(paramBitmap, i, j, true);
    }
    paramContext.printStackTrace();
    return paramBitmap;
  }
  
  public static Bitmap StyleElegant(Bitmap paramBitmap, boolean paramBoolean)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject1 = localObject2;
      int i = paramBitmap.getWidth();
      localObject1 = localObject2;
      int j = paramBitmap.getHeight();
      localObject1 = localObject2;
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      if (paramBoolean)
      {
        localObject1 = localObject2;
        paramBitmap.recycle();
      }
      localObject1 = localObject2;
      jni.StyleElegant(arrayOfInt, i, j);
      localObject1 = localObject2;
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      localObject1 = paramBitmap;
      long l2 = System.currentTimeMillis();
      localObject1 = paramBitmap;
      MTDebug.Print("StyleElegant time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  public static Bitmap StyleElegantNew(Bitmap paramBitmap, boolean paramBoolean)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject1 = localObject2;
      int i = paramBitmap.getWidth();
      localObject1 = localObject2;
      int j = paramBitmap.getHeight();
      localObject1 = localObject2;
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      if (paramBoolean)
      {
        localObject1 = localObject2;
        paramBitmap.recycle();
      }
      localObject1 = localObject2;
      jni.StyleElegantNew(arrayOfInt, i, j);
      localObject1 = localObject2;
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      localObject1 = paramBitmap;
      long l2 = System.currentTimeMillis();
      localObject1 = paramBitmap;
      MTDebug.Print("StyleElegantNew time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  /* Error */
  public static Bitmap StyleF(Bitmap paramBitmap, Context paramContext, boolean paramBoolean)
  {
    // Byte code:
    //   0: invokestatic 129	java/lang/System:currentTimeMillis	()J
    //   3: lstore 5
    //   5: aload_0
    //   6: invokevirtual 135	android/graphics/Bitmap:getWidth	()I
    //   9: istore_3
    //   10: aload_0
    //   11: invokevirtual 138	android/graphics/Bitmap:getHeight	()I
    //   14: istore 4
    //   16: ldc_w 581
    //   19: aload_1
    //   20: invokevirtual 332	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   23: invokestatic 336	com/mt/mtxx/image/ImageProcess:LoadAssertsPic	(Ljava/lang/String;Landroid/content/res/AssetManager;)Landroid/graphics/Bitmap;
    //   26: astore 9
    //   28: new 151	java/lang/StringBuilder
    //   31: dup
    //   32: ldc_w 583
    //   35: invokespecial 156	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   38: aload_0
    //   39: invokevirtual 135	android/graphics/Bitmap:getWidth	()I
    //   42: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   45: ldc_w 585
    //   48: invokevirtual 184	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   51: aload_0
    //   52: invokevirtual 138	android/graphics/Bitmap:getHeight	()I
    //   55: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   58: invokevirtual 164	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   61: invokestatic 169	com/mt/mtxx/mtxx/MTDebug:Print	(Ljava/lang/String;)V
    //   64: iload_3
    //   65: iload 4
    //   67: if_icmple +230 -> 297
    //   70: aload 9
    //   72: iconst_1
    //   73: invokestatic 339	com/mt/mtxx/image/ImageProcess:rotate90	(Landroid/graphics/Bitmap;Z)Landroid/graphics/Bitmap;
    //   76: iload_3
    //   77: iload 4
    //   79: iconst_1
    //   80: invokestatic 342	com/mt/mtxx/image/ImageProcess:resize	(Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;
    //   83: astore 9
    //   85: new 151	java/lang/StringBuilder
    //   88: dup
    //   89: ldc_w 587
    //   92: invokespecial 156	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   95: aload 9
    //   97: invokevirtual 135	android/graphics/Bitmap:getWidth	()I
    //   100: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   103: ldc_w 300
    //   106: invokevirtual 184	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   109: aload 9
    //   111: invokevirtual 138	android/graphics/Bitmap:getHeight	()I
    //   114: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   117: invokevirtual 164	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   120: invokestatic 169	com/mt/mtxx/mtxx/MTDebug:Print	(Ljava/lang/String;)V
    //   123: aload_0
    //   124: invokestatic 263	com/mt/mtxx/image/ImageProcess:bitmap2IntARGB	(Landroid/graphics/Bitmap;)[I
    //   127: astore 10
    //   129: iload_2
    //   130: ifeq +7 -> 137
    //   133: aload_0
    //   134: invokevirtual 266	android/graphics/Bitmap:recycle	()V
    //   137: aload 9
    //   139: invokestatic 263	com/mt/mtxx/image/ImageProcess:bitmap2IntARGB	(Landroid/graphics/Bitmap;)[I
    //   142: astore_0
    //   143: aload 9
    //   145: invokevirtual 266	android/graphics/Bitmap:recycle	()V
    //   148: getstatic 117	com/mt/mtxx/image/ImageProcess:jni	Lcom/mt/mtxx/image/JNI;
    //   151: aload 10
    //   153: aload_0
    //   154: iload_3
    //   155: iload 4
    //   157: invokevirtual 590	com/mt/mtxx/image/JNI:StyleFP1	([I[III)V
    //   160: aconst_null
    //   161: checkcast 368	[I
    //   164: astore_0
    //   165: ldc_w 563
    //   168: aload_1
    //   169: invokevirtual 332	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   172: invokestatic 336	com/mt/mtxx/image/ImageProcess:LoadAssertsPic	(Ljava/lang/String;Landroid/content/res/AssetManager;)Landroid/graphics/Bitmap;
    //   175: astore_0
    //   176: iload_3
    //   177: iload 4
    //   179: if_icmple +132 -> 311
    //   182: aload_0
    //   183: iconst_1
    //   184: invokestatic 339	com/mt/mtxx/image/ImageProcess:rotate90	(Landroid/graphics/Bitmap;Z)Landroid/graphics/Bitmap;
    //   187: iload_3
    //   188: iload 4
    //   190: iconst_1
    //   191: invokestatic 342	com/mt/mtxx/image/ImageProcess:resize	(Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;
    //   194: astore_0
    //   195: new 151	java/lang/StringBuilder
    //   198: dup
    //   199: ldc_w 592
    //   202: invokespecial 156	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   205: aload_0
    //   206: invokevirtual 135	android/graphics/Bitmap:getWidth	()I
    //   209: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   212: ldc_w 300
    //   215: invokevirtual 184	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   218: aload_0
    //   219: invokevirtual 138	android/graphics/Bitmap:getHeight	()I
    //   222: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   225: invokevirtual 164	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   228: invokestatic 169	com/mt/mtxx/mtxx/MTDebug:Print	(Ljava/lang/String;)V
    //   231: aload_0
    //   232: invokestatic 263	com/mt/mtxx/image/ImageProcess:bitmap2IntARGB	(Landroid/graphics/Bitmap;)[I
    //   235: astore_1
    //   236: aload_0
    //   237: invokevirtual 266	android/graphics/Bitmap:recycle	()V
    //   240: getstatic 117	com/mt/mtxx/image/ImageProcess:jni	Lcom/mt/mtxx/image/JNI;
    //   243: aload 10
    //   245: aload_1
    //   246: iload_3
    //   247: iload 4
    //   249: invokevirtual 595	com/mt/mtxx/image/JNI:StyleFP2	([I[III)V
    //   252: aconst_null
    //   253: checkcast 368	[I
    //   256: astore_0
    //   257: aload 10
    //   259: iload_3
    //   260: iload 4
    //   262: invokestatic 207	com/mt/mtxx/image/ImageProcess:intARGB2Bimap	([III)Landroid/graphics/Bitmap;
    //   265: astore_0
    //   266: invokestatic 129	java/lang/System:currentTimeMillis	()J
    //   269: lstore 7
    //   271: new 151	java/lang/StringBuilder
    //   274: dup
    //   275: ldc_w 597
    //   278: invokespecial 156	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   281: lload 7
    //   283: lload 5
    //   285: lsub
    //   286: invokevirtual 160	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   289: invokevirtual 164	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   292: invokestatic 169	com/mt/mtxx/mtxx/MTDebug:Print	(Ljava/lang/String;)V
    //   295: aload_0
    //   296: areturn
    //   297: aload 9
    //   299: iload_3
    //   300: iload 4
    //   302: iconst_1
    //   303: invokestatic 342	com/mt/mtxx/image/ImageProcess:resize	(Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;
    //   306: astore 9
    //   308: goto -223 -> 85
    //   311: aload_0
    //   312: iload_3
    //   313: iload 4
    //   315: iconst_1
    //   316: invokestatic 342	com/mt/mtxx/image/ImageProcess:resize	(Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;
    //   319: astore_0
    //   320: goto -125 -> 195
    //   323: astore_1
    //   324: aconst_null
    //   325: astore_0
    //   326: aload_1
    //   327: invokevirtual 172	java/lang/Exception:printStackTrace	()V
    //   330: aload_0
    //   331: areturn
    //   332: astore_1
    //   333: goto -7 -> 326
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	336	0	paramBitmap	Bitmap
    //   0	336	1	paramContext	Context
    //   0	336	2	paramBoolean	boolean
    //   9	304	3	i	int
    //   14	300	4	j	int
    //   3	281	5	l1	long
    //   269	13	7	l2	long
    //   26	281	9	localBitmap	Bitmap
    //   127	131	10	arrayOfInt	int[]
    // Exception table:
    //   from	to	target	type
    //   0	64	323	java/lang/Exception
    //   70	85	323	java/lang/Exception
    //   85	129	323	java/lang/Exception
    //   133	137	323	java/lang/Exception
    //   137	176	323	java/lang/Exception
    //   182	195	323	java/lang/Exception
    //   195	266	323	java/lang/Exception
    //   297	308	323	java/lang/Exception
    //   311	320	323	java/lang/Exception
    //   266	295	332	java/lang/Exception
  }
  
  public static Bitmap StyleFilm(Bitmap paramBitmap, boolean paramBoolean)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject1 = localObject2;
      int i = paramBitmap.getWidth();
      localObject1 = localObject2;
      int j = paramBitmap.getHeight();
      localObject1 = localObject2;
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      if (paramBoolean)
      {
        localObject1 = localObject2;
        paramBitmap.recycle();
      }
      localObject1 = localObject2;
      jni.StyleFilm(arrayOfInt, i, j);
      localObject1 = localObject2;
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      localObject1 = paramBitmap;
      long l2 = System.currentTimeMillis();
      localObject1 = paramBitmap;
      MTDebug.Print("StyleFilm time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  /* Error */
  public static Bitmap StyleG(Bitmap paramBitmap, Context paramContext, boolean paramBoolean)
  {
    // Byte code:
    //   0: new 151	java/lang/StringBuilder
    //   3: dup
    //   4: ldc_w 605
    //   7: invokespecial 156	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   10: aload_0
    //   11: invokevirtual 135	android/graphics/Bitmap:getWidth	()I
    //   14: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   17: ldc_w 300
    //   20: invokevirtual 184	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   23: aload_0
    //   24: invokevirtual 138	android/graphics/Bitmap:getHeight	()I
    //   27: invokevirtual 179	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   30: invokevirtual 164	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   33: invokestatic 169	com/mt/mtxx/mtxx/MTDebug:Print	(Ljava/lang/String;)V
    //   36: invokestatic 129	java/lang/System:currentTimeMillis	()J
    //   39: lstore 5
    //   41: aload_0
    //   42: invokevirtual 135	android/graphics/Bitmap:getWidth	()I
    //   45: istore_3
    //   46: aload_0
    //   47: invokevirtual 138	android/graphics/Bitmap:getHeight	()I
    //   50: istore 4
    //   52: ldc_w 607
    //   55: aload_1
    //   56: invokevirtual 332	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   59: invokestatic 336	com/mt/mtxx/image/ImageProcess:LoadAssertsPic	(Ljava/lang/String;Landroid/content/res/AssetManager;)Landroid/graphics/Bitmap;
    //   62: astore 9
    //   64: iload_3
    //   65: iload 4
    //   67: if_icmple +182 -> 249
    //   70: aload 9
    //   72: iconst_1
    //   73: invokestatic 339	com/mt/mtxx/image/ImageProcess:rotate90	(Landroid/graphics/Bitmap;Z)Landroid/graphics/Bitmap;
    //   76: iload_3
    //   77: iload 4
    //   79: iconst_1
    //   80: invokestatic 342	com/mt/mtxx/image/ImageProcess:resize	(Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;
    //   83: astore 9
    //   85: aload 9
    //   87: invokestatic 263	com/mt/mtxx/image/ImageProcess:bitmap2IntARGB	(Landroid/graphics/Bitmap;)[I
    //   90: astore 11
    //   92: aload 9
    //   94: invokevirtual 266	android/graphics/Bitmap:recycle	()V
    //   97: aload_0
    //   98: invokestatic 263	com/mt/mtxx/image/ImageProcess:bitmap2IntARGB	(Landroid/graphics/Bitmap;)[I
    //   101: astore 9
    //   103: iload_2
    //   104: ifeq +7 -> 111
    //   107: aload_0
    //   108: invokevirtual 266	android/graphics/Bitmap:recycle	()V
    //   111: ldc_w 609
    //   114: aload_1
    //   115: invokestatic 615	com/mt/mtxx/mtxx/MyPro:getBytesFromAssets	(Ljava/lang/String;Landroid/content/Context;)[B
    //   118: astore 10
    //   120: getstatic 117	com/mt/mtxx/image/ImageProcess:jni	Lcom/mt/mtxx/image/JNI;
    //   123: aload 9
    //   125: aload 11
    //   127: iload_3
    //   128: iload 4
    //   130: aload 10
    //   132: aload 10
    //   134: arraylength
    //   135: invokevirtual 619	com/mt/mtxx/image/JNI:StyleGP1	([I[III[BI)V
    //   138: aconst_null
    //   139: checkcast 368	[I
    //   142: astore_0
    //   143: ldc_w 621
    //   146: aload_1
    //   147: invokevirtual 332	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   150: invokestatic 336	com/mt/mtxx/image/ImageProcess:LoadAssertsPic	(Ljava/lang/String;Landroid/content/res/AssetManager;)Landroid/graphics/Bitmap;
    //   153: astore_0
    //   154: iload_3
    //   155: iload 4
    //   157: if_icmple +106 -> 263
    //   160: aload_0
    //   161: iconst_1
    //   162: invokestatic 339	com/mt/mtxx/image/ImageProcess:rotate90	(Landroid/graphics/Bitmap;Z)Landroid/graphics/Bitmap;
    //   165: iload_3
    //   166: iload 4
    //   168: iconst_1
    //   169: invokestatic 342	com/mt/mtxx/image/ImageProcess:resize	(Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;
    //   172: astore_0
    //   173: aload_0
    //   174: invokestatic 263	com/mt/mtxx/image/ImageProcess:bitmap2IntARGB	(Landroid/graphics/Bitmap;)[I
    //   177: astore_1
    //   178: aload_0
    //   179: invokevirtual 266	android/graphics/Bitmap:recycle	()V
    //   182: getstatic 117	com/mt/mtxx/image/ImageProcess:jni	Lcom/mt/mtxx/image/JNI;
    //   185: aload 9
    //   187: aload_1
    //   188: iload_3
    //   189: iload 4
    //   191: aload 10
    //   193: aload 10
    //   195: arraylength
    //   196: invokevirtual 624	com/mt/mtxx/image/JNI:StyleGP2	([I[III[BI)V
    //   199: aconst_null
    //   200: checkcast 368	[I
    //   203: astore_0
    //   204: aload 9
    //   206: iload_3
    //   207: iload 4
    //   209: invokestatic 207	com/mt/mtxx/image/ImageProcess:intARGB2Bimap	([III)Landroid/graphics/Bitmap;
    //   212: astore_0
    //   213: aconst_null
    //   214: checkcast 368	[I
    //   217: astore_1
    //   218: invokestatic 129	java/lang/System:currentTimeMillis	()J
    //   221: lstore 7
    //   223: new 151	java/lang/StringBuilder
    //   226: dup
    //   227: ldc_w 626
    //   230: invokespecial 156	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   233: lload 7
    //   235: lload 5
    //   237: lsub
    //   238: invokevirtual 160	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   241: invokevirtual 164	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   244: invokestatic 169	com/mt/mtxx/mtxx/MTDebug:Print	(Ljava/lang/String;)V
    //   247: aload_0
    //   248: areturn
    //   249: aload 9
    //   251: iload_3
    //   252: iload 4
    //   254: iconst_1
    //   255: invokestatic 342	com/mt/mtxx/image/ImageProcess:resize	(Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;
    //   258: astore 9
    //   260: goto -175 -> 85
    //   263: aload_0
    //   264: iload_3
    //   265: iload 4
    //   267: iconst_1
    //   268: invokestatic 342	com/mt/mtxx/image/ImageProcess:resize	(Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;
    //   271: astore_0
    //   272: goto -99 -> 173
    //   275: astore_1
    //   276: aconst_null
    //   277: astore_0
    //   278: aload_1
    //   279: invokevirtual 172	java/lang/Exception:printStackTrace	()V
    //   282: aload_0
    //   283: areturn
    //   284: astore_1
    //   285: goto -7 -> 278
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	288	0	paramBitmap	Bitmap
    //   0	288	1	paramContext	Context
    //   0	288	2	paramBoolean	boolean
    //   45	220	3	i	int
    //   50	216	4	j	int
    //   39	197	5	l1	long
    //   221	13	7	l2	long
    //   62	197	9	localObject	Object
    //   118	76	10	arrayOfByte	byte[]
    //   90	36	11	arrayOfInt	int[]
    // Exception table:
    //   from	to	target	type
    //   0	64	275	java/lang/Exception
    //   70	85	275	java/lang/Exception
    //   85	103	275	java/lang/Exception
    //   107	111	275	java/lang/Exception
    //   111	154	275	java/lang/Exception
    //   160	173	275	java/lang/Exception
    //   173	213	275	java/lang/Exception
    //   249	260	275	java/lang/Exception
    //   263	272	275	java/lang/Exception
    //   213	247	284	java/lang/Exception
  }
  
  public static Bitmap StyleImpression(Bitmap paramBitmap, Context paramContext, boolean paramBoolean)
  {
    Object localObject = null;
    paramContext = localObject;
    try
    {
      long l1 = System.currentTimeMillis();
      paramContext = localObject;
      int i = paramBitmap.getWidth();
      paramContext = localObject;
      int j = paramBitmap.getHeight();
      paramContext = localObject;
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      if (paramBoolean)
      {
        paramContext = localObject;
        paramBitmap.recycle();
      }
      paramContext = localObject;
      jni.StyleImpression(arrayOfInt, i, j);
      paramContext = localObject;
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      paramContext = paramBitmap;
      long l2 = System.currentTimeMillis();
      paramContext = paramBitmap;
      MTDebug.Print("StyleImpression time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return paramContext;
  }
  
  public static Bitmap StyleJapanese(Bitmap paramBitmap, boolean paramBoolean)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject1 = localObject2;
      int i = paramBitmap.getWidth();
      localObject1 = localObject2;
      int j = paramBitmap.getHeight();
      localObject1 = localObject2;
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      if (paramBoolean)
      {
        localObject1 = localObject2;
        paramBitmap.recycle();
      }
      localObject1 = localObject2;
      jni.StyleJapanese(arrayOfInt, i, j);
      localObject1 = localObject2;
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      localObject1 = paramBitmap;
      long l2 = System.currentTimeMillis();
      localObject1 = paramBitmap;
      MTDebug.Print("StyleJapanese time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  public static Bitmap StyleLomo(Bitmap paramBitmap, Context paramContext, boolean paramBoolean)
  {
    try
    {
      long l1 = System.currentTimeMillis();
      int i = paramBitmap.getWidth();
      int j = paramBitmap.getHeight();
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      if (paramBoolean) {
        paramBitmap.recycle();
      }
      Object localObject = LoadAssertsPic("style/lomo1.jpg", paramContext.getAssets());
      paramBitmap = resize((Bitmap)localObject, i, j, false);
      ((Bitmap)localObject).recycle();
      localObject = bitmap2IntARGB(paramBitmap);
      paramBitmap.recycle();
      jni.LOMO1(arrayOfInt, i, j, (int[])localObject);
      paramBitmap = (int[])null;
      paramContext = LoadAssertsPic("style/lomo2.jpg", paramContext.getAssets());
      paramBitmap = resize(paramContext, i, j, false);
      paramContext.recycle();
      paramContext = bitmap2IntARGB(paramBitmap);
      paramBitmap.recycle();
      jni.LOMO2(arrayOfInt, i, j, paramContext);
      paramBitmap = (int[])null;
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      long l2;
      paramContext.printStackTrace();
    }
    catch (Exception paramContext)
    {
      try
      {
        l2 = System.currentTimeMillis();
        MTDebug.Print("StyleLomo time=" + (l2 - l1));
        return paramBitmap;
      }
      catch (Exception paramContext)
      {
        break label178;
      }
      paramContext = paramContext;
      paramBitmap = null;
    }
    label178:
    return paramBitmap;
  }
  
  public static Bitmap StyleLomoA(Bitmap paramBitmap, Context paramContext, boolean paramBoolean)
  {
    for (;;)
    {
      try
      {
        l1 = System.currentTimeMillis();
        i = paramBitmap.getWidth();
        j = paramBitmap.getHeight();
        int[] arrayOfInt1 = bitmap2IntARGB(paramBitmap);
        if (paramBoolean) {
          paramBitmap.recycle();
        }
        paramBitmap = LoadAssertsPic("style/mtxx_lomo1_1.jpg", paramContext.getAssets());
        if (i > j)
        {
          paramBitmap = resize(rotate90(paramBitmap, true), i, j, true);
          int[] arrayOfInt2 = bitmap2IntARGB(paramBitmap);
          paramBitmap.recycle();
          byte[] arrayOfByte = MyPro.getBytesFromAssets("eb/effect034.eb", paramContext);
          jni.StyleLomoAP1(arrayOfInt1, arrayOfInt2, i, j, arrayOfByte, arrayOfByte.length);
          paramBitmap = (int[])null;
          paramBitmap = LoadAssertsPic("style/mtxx_lomo1_2.jpg", paramContext.getAssets());
          if (i <= j) {
            continue;
          }
          paramBitmap = resize(rotate90(paramBitmap, true), i, j, true);
          paramContext = bitmap2IntARGB(paramBitmap);
          paramBitmap.recycle();
          jni.StyleLomoAP2(arrayOfInt1, paramContext, i, j, arrayOfByte, arrayOfByte.length);
          paramBitmap = (int[])null;
          paramBitmap = intARGB2Bimap(arrayOfInt1, i, j);
        }
      }
      catch (Exception paramContext)
      {
        long l1;
        int i;
        int j;
        long l2;
        paramBitmap = null;
      }
      try
      {
        l2 = System.currentTimeMillis();
        MTDebug.Print("StyleLomoA time=" + (l2 - l1));
        return paramBitmap;
      }
      catch (Exception paramContext)
      {
        break;
      }
      paramBitmap = resize(paramBitmap, i, j, true);
      continue;
      paramBitmap = resize(paramBitmap, i, j, true);
    }
    paramContext.printStackTrace();
    return paramBitmap;
  }
  
  public static Bitmap StyleLomoB(Bitmap paramBitmap, boolean paramBoolean)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject1 = localObject2;
      MTDebug.Print("StyleLomoB 0");
      localObject1 = localObject2;
      int i = paramBitmap.getWidth();
      localObject1 = localObject2;
      int j = paramBitmap.getHeight();
      localObject1 = localObject2;
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      localObject1 = localObject2;
      MTDebug.Print("StyleLomoB 1");
      if (paramBoolean)
      {
        localObject1 = localObject2;
        paramBitmap.recycle();
      }
      localObject1 = localObject2;
      MTDebug.Print("StyleLomoB 2");
      localObject1 = localObject2;
      jni.StyleLomoB(arrayOfInt, i, j);
      localObject1 = localObject2;
      MTDebug.Print("StyleLomoB 3");
      localObject1 = localObject2;
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      localObject1 = paramBitmap;
      long l2 = System.currentTimeMillis();
      localObject1 = paramBitmap;
      MTDebug.Print("StyleLomoB time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      MTDebug.Print("StyleLomoB Error!" + paramBitmap.toString());
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  public static Bitmap StyleLomoC(Bitmap paramBitmap, boolean paramBoolean)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject1 = localObject2;
      int i = paramBitmap.getWidth();
      localObject1 = localObject2;
      int j = paramBitmap.getHeight();
      localObject1 = localObject2;
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      if (paramBoolean)
      {
        localObject1 = localObject2;
        paramBitmap.recycle();
      }
      localObject1 = localObject2;
      jni.StyleLomoC(arrayOfInt, i, j);
      localObject1 = localObject2;
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      localObject1 = paramBitmap;
      long l2 = System.currentTimeMillis();
      localObject1 = paramBitmap;
      MTDebug.Print("StyleLomoC time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  public static Bitmap StyleLomoChristmas(Bitmap paramBitmap, Context paramContext, boolean paramBoolean)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject1 = localObject2;
      int i = paramBitmap.getWidth();
      localObject1 = localObject2;
      int j = paramBitmap.getHeight();
      localObject1 = localObject2;
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      if (paramBoolean)
      {
        localObject1 = localObject2;
        paramBitmap.recycle();
      }
      localObject1 = localObject2;
      paramContext = LoadAssertsPic("style/mtxx_festival_1b.jpg", paramContext.getAssets());
      localObject1 = localObject2;
      paramBitmap = resize(paramContext, i, j, false);
      localObject1 = localObject2;
      paramContext.recycle();
      localObject1 = localObject2;
      paramContext = bitmap2IntARGB(paramBitmap);
      localObject1 = localObject2;
      paramBitmap.recycle();
      localObject1 = localObject2;
      jni.StyleLomoChristmas(arrayOfInt, paramContext, i, j);
      localObject1 = localObject2;
      paramBitmap = (int[])null;
      localObject1 = localObject2;
      System.gc();
      localObject1 = localObject2;
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      localObject1 = paramBitmap;
      long l2 = System.currentTimeMillis();
      localObject1 = paramBitmap;
      MTDebug.Print("StyleLomoChristmas time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  public static Bitmap StyleLomoHDR(Bitmap paramBitmap, boolean paramBoolean)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject1 = localObject2;
      int i = paramBitmap.getWidth();
      localObject1 = localObject2;
      int j = paramBitmap.getHeight();
      localObject1 = localObject2;
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      if (paramBoolean)
      {
        localObject1 = localObject2;
        paramBitmap.recycle();
      }
      localObject1 = localObject2;
      jni.StyleLomoHDR(arrayOfInt, i, j);
      localObject1 = localObject2;
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      localObject1 = paramBitmap;
      long l2 = System.currentTimeMillis();
      localObject1 = paramBitmap;
      MTDebug.Print("StyleLomoHDR time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  /* Error */
  public static Bitmap StyleMilk(Bitmap paramBitmap, Context paramContext, boolean paramBoolean)
  {
    // Byte code:
    //   0: invokestatic 129	java/lang/System:currentTimeMillis	()J
    //   3: lstore 5
    //   5: aload_0
    //   6: invokevirtual 135	android/graphics/Bitmap:getWidth	()I
    //   9: istore_3
    //   10: aload_0
    //   11: invokevirtual 138	android/graphics/Bitmap:getHeight	()I
    //   14: istore 4
    //   16: aload_0
    //   17: invokestatic 263	com/mt/mtxx/image/ImageProcess:bitmap2IntARGB	(Landroid/graphics/Bitmap;)[I
    //   20: astore 10
    //   22: aload_0
    //   23: astore 9
    //   25: iload_2
    //   26: ifeq +10 -> 36
    //   29: aload_0
    //   30: invokevirtual 266	android/graphics/Bitmap:recycle	()V
    //   33: aconst_null
    //   34: astore 9
    //   36: ldc_w 698
    //   39: aload_1
    //   40: invokevirtual 332	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   43: invokestatic 336	com/mt/mtxx/image/ImageProcess:LoadAssertsPic	(Ljava/lang/String;Landroid/content/res/AssetManager;)Landroid/graphics/Bitmap;
    //   46: astore 11
    //   48: aload 11
    //   50: iload_3
    //   51: iload 4
    //   53: iconst_0
    //   54: invokestatic 342	com/mt/mtxx/image/ImageProcess:resize	(Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;
    //   57: astore_0
    //   58: aload 11
    //   60: invokevirtual 266	android/graphics/Bitmap:recycle	()V
    //   63: aload_0
    //   64: invokestatic 263	com/mt/mtxx/image/ImageProcess:bitmap2IntARGB	(Landroid/graphics/Bitmap;)[I
    //   67: astore 11
    //   69: aload_0
    //   70: invokevirtual 266	android/graphics/Bitmap:recycle	()V
    //   73: getstatic 117	com/mt/mtxx/image/ImageProcess:jni	Lcom/mt/mtxx/image/JNI;
    //   76: aload 10
    //   78: aload 11
    //   80: iload_3
    //   81: iload 4
    //   83: invokevirtual 701	com/mt/mtxx/image/JNI:StyleMilk1	([I[III)V
    //   86: aconst_null
    //   87: checkcast 368	[I
    //   90: astore_0
    //   91: invokestatic 355	java/lang/System:gc	()V
    //   94: ldc_w 703
    //   97: aload_1
    //   98: invokevirtual 332	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   101: invokestatic 336	com/mt/mtxx/image/ImageProcess:LoadAssertsPic	(Ljava/lang/String;Landroid/content/res/AssetManager;)Landroid/graphics/Bitmap;
    //   104: astore 11
    //   106: aload 11
    //   108: iload_3
    //   109: iload 4
    //   111: iconst_0
    //   112: invokestatic 342	com/mt/mtxx/image/ImageProcess:resize	(Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;
    //   115: astore_0
    //   116: aload 11
    //   118: invokevirtual 266	android/graphics/Bitmap:recycle	()V
    //   121: aload_0
    //   122: invokestatic 263	com/mt/mtxx/image/ImageProcess:bitmap2IntARGB	(Landroid/graphics/Bitmap;)[I
    //   125: astore 11
    //   127: aload_0
    //   128: invokevirtual 266	android/graphics/Bitmap:recycle	()V
    //   131: getstatic 117	com/mt/mtxx/image/ImageProcess:jni	Lcom/mt/mtxx/image/JNI;
    //   134: aload 10
    //   136: aload 11
    //   138: iload_3
    //   139: iload 4
    //   141: invokevirtual 706	com/mt/mtxx/image/JNI:StyleMilk2	([I[III)V
    //   144: aconst_null
    //   145: checkcast 368	[I
    //   148: astore_0
    //   149: aload 9
    //   151: invokestatic 263	com/mt/mtxx/image/ImageProcess:bitmap2IntARGB	(Landroid/graphics/Bitmap;)[I
    //   154: astore_0
    //   155: getstatic 117	com/mt/mtxx/image/ImageProcess:jni	Lcom/mt/mtxx/image/JNI;
    //   158: aload 10
    //   160: aload_0
    //   161: iload_3
    //   162: iload 4
    //   164: invokevirtual 709	com/mt/mtxx/image/JNI:StyleMilk3	([I[III)V
    //   167: aconst_null
    //   168: checkcast 368	[I
    //   171: astore_0
    //   172: ldc_w 711
    //   175: aload_1
    //   176: invokevirtual 332	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   179: invokestatic 336	com/mt/mtxx/image/ImageProcess:LoadAssertsPic	(Ljava/lang/String;Landroid/content/res/AssetManager;)Landroid/graphics/Bitmap;
    //   182: astore_1
    //   183: aload_1
    //   184: iload_3
    //   185: iload 4
    //   187: iconst_0
    //   188: invokestatic 342	com/mt/mtxx/image/ImageProcess:resize	(Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;
    //   191: astore_0
    //   192: aload_1
    //   193: invokevirtual 266	android/graphics/Bitmap:recycle	()V
    //   196: aload_0
    //   197: invokestatic 263	com/mt/mtxx/image/ImageProcess:bitmap2IntARGB	(Landroid/graphics/Bitmap;)[I
    //   200: astore_1
    //   201: aload_0
    //   202: invokevirtual 266	android/graphics/Bitmap:recycle	()V
    //   205: getstatic 117	com/mt/mtxx/image/ImageProcess:jni	Lcom/mt/mtxx/image/JNI;
    //   208: aload 10
    //   210: aload_1
    //   211: iload_3
    //   212: iload 4
    //   214: invokevirtual 714	com/mt/mtxx/image/JNI:StyleMilk4	([I[III)V
    //   217: aconst_null
    //   218: checkcast 368	[I
    //   221: astore_0
    //   222: aload 10
    //   224: iload_3
    //   225: iload 4
    //   227: invokestatic 207	com/mt/mtxx/image/ImageProcess:intARGB2Bimap	([III)Landroid/graphics/Bitmap;
    //   230: astore_0
    //   231: invokestatic 129	java/lang/System:currentTimeMillis	()J
    //   234: lstore 7
    //   236: new 151	java/lang/StringBuilder
    //   239: dup
    //   240: ldc_w 357
    //   243: invokespecial 156	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   246: lload 7
    //   248: lload 5
    //   250: lsub
    //   251: invokevirtual 160	java/lang/StringBuilder:append	(J)Ljava/lang/StringBuilder;
    //   254: invokevirtual 164	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   257: invokestatic 169	com/mt/mtxx/mtxx/MTDebug:Print	(Ljava/lang/String;)V
    //   260: aload_0
    //   261: areturn
    //   262: astore_1
    //   263: aconst_null
    //   264: astore_0
    //   265: aload_1
    //   266: invokevirtual 172	java/lang/Exception:printStackTrace	()V
    //   269: aload_0
    //   270: areturn
    //   271: astore_1
    //   272: goto -7 -> 265
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	275	0	paramBitmap	Bitmap
    //   0	275	1	paramContext	Context
    //   0	275	2	paramBoolean	boolean
    //   9	216	3	i	int
    //   14	212	4	j	int
    //   3	246	5	l1	long
    //   234	13	7	l2	long
    //   23	127	9	localBitmap	Bitmap
    //   20	203	10	arrayOfInt	int[]
    //   46	91	11	localObject	Object
    // Exception table:
    //   from	to	target	type
    //   0	22	262	java/lang/Exception
    //   29	33	262	java/lang/Exception
    //   36	231	262	java/lang/Exception
    //   231	260	271	java/lang/Exception
  }
  
  public static Bitmap StyleOldPhoto(Bitmap paramBitmap, Context paramContext, boolean paramBoolean)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject1 = localObject2;
      int i = paramBitmap.getWidth();
      localObject1 = localObject2;
      int j = paramBitmap.getHeight();
      localObject1 = localObject2;
      Object localObject3 = LoadAssertsPic("style/mtxx_lzp_b.jpg", paramContext.getAssets());
      localObject1 = localObject2;
      paramContext = resize((Bitmap)localObject3, i, j, false);
      localObject1 = localObject2;
      ((Bitmap)localObject3).recycle();
      localObject1 = localObject2;
      localObject3 = bitmap2IntARGB(paramBitmap);
      if (paramBoolean)
      {
        localObject1 = localObject2;
        paramBitmap.recycle();
      }
      localObject1 = localObject2;
      paramBitmap = bitmap2IntARGB(paramContext);
      localObject1 = localObject2;
      paramContext.recycle();
      localObject1 = localObject2;
      jni.StyleOldPhoto((int[])localObject3, paramBitmap, i, j);
      localObject1 = localObject2;
      paramBitmap = intARGB2Bimap((int[])localObject3, i, j);
      localObject1 = paramBitmap;
      long l2 = System.currentTimeMillis();
      localObject1 = paramBitmap;
      MTDebug.Print("StyleOldPhoto time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  public static Bitmap StyleOldPhoto2(Bitmap paramBitmap, Context paramContext, boolean paramBoolean)
  {
    for (;;)
    {
      int i;
      int j;
      try
      {
        MTDebug.memeryUsed("StyleOldPhoto2");
        l1 = System.currentTimeMillis();
        i = paramBitmap.getWidth();
        j = paramBitmap.getHeight();
        localObject = LoadAssertsPic("style/mtxx_laozhaop2_wenli1.jpg", paramContext.getAssets());
        if (i > j)
        {
          localObject = rotate90((Bitmap)localObject, true);
          MTDebug.memeryUsed("StyleOldPhoto21");
          localObject = resize((Bitmap)localObject, i, j, true);
          MTDebug.memeryUsed("StyleOldPhoto23");
          System.gc();
          MTDebug.memeryUsed("StyleOldPhoto231");
          int[] arrayOfInt = bitmap2IntARGB((Bitmap)localObject);
          ((Bitmap)localObject).recycle();
          localObject = bitmap2IntARGB(paramBitmap);
          if (paramBoolean) {
            paramBitmap.recycle();
          }
          System.gc();
          MTDebug.memeryUsed("StyleOldPhoto23");
          byte[] arrayOfByte = MyPro.getBytesFromAssets("eb/effect6.eb", paramContext);
          jni.StyleOldPhotoP1((int[])localObject, arrayOfInt, i, j, arrayOfByte, arrayOfByte.length);
          MTDebug.memeryUsed("StyleOldPhoto24");
          paramBitmap = (int[])null;
          System.gc();
          paramBitmap = LoadAssertsPic("style/mtxx_laozhaop2_wenli2.jpg", paramContext.getAssets());
          if (i <= j) {
            break label329;
          }
          paramBitmap = resize(rotate90(paramBitmap, true), i, j, true);
          MTDebug.memeryUsed("StyleOldPhoto26");
          paramContext = bitmap2IntARGB(paramBitmap);
          paramBitmap.recycle();
          jni.StyleOldPhotoP2((int[])localObject, paramContext, i, j, arrayOfByte, arrayOfByte.length);
          MTDebug.memeryUsed("StyleOldPhoto27");
          paramBitmap = (int[])null;
          System.gc();
          MTDebug.memeryUsed("StyleOldPhoto271");
          paramBitmap = (byte[])null;
          MTDebug.memeryUsed("StyleOldPhoto28");
          paramBitmap = intARGB2Bimap((int[])localObject, i, j);
        }
      }
      catch (Exception paramContext)
      {
        long l1;
        Object localObject;
        long l2;
        paramBitmap = null;
      }
      try
      {
        l2 = System.currentTimeMillis();
        MTDebug.Print("StyleOldPhoto2 time=" + (l2 - l1));
        return paramBitmap;
      }
      catch (Exception paramContext)
      {
        break label323;
      }
      localObject = resize((Bitmap)localObject, i, j, true);
      MTDebug.memeryUsed("StyleOldPhoto22");
      continue;
      label323:
      paramContext.printStackTrace();
      return paramBitmap;
      label329:
      paramBitmap = resize(paramBitmap, i, j, true);
    }
  }
  
  public static Bitmap StyleRetro(Bitmap paramBitmap, boolean paramBoolean)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      long l1 = System.currentTimeMillis();
      localObject1 = localObject2;
      int i = paramBitmap.getWidth();
      localObject1 = localObject2;
      int j = paramBitmap.getHeight();
      localObject1 = localObject2;
      int[] arrayOfInt = bitmap2IntARGB(paramBitmap);
      if (paramBoolean)
      {
        localObject1 = localObject2;
        paramBitmap.recycle();
      }
      localObject1 = localObject2;
      jni.StyleRetro(arrayOfInt, i, j);
      localObject1 = localObject2;
      paramBitmap = intARGB2Bimap(arrayOfInt, i, j);
      localObject1 = paramBitmap;
      long l2 = System.currentTimeMillis();
      localObject1 = paramBitmap;
      MTDebug.Print("StyleRetro time=" + (l2 - l1));
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  public static Bitmap White(Bitmap paramBitmap, int paramInt1, int paramInt2, int paramInt3, double paramDouble)
  {
    try
    {
      int i = paramBitmap.getWidth();
      int j = paramBitmap.getHeight();
      paramBitmap = bitmap2IntARGB(paramBitmap);
      jni.SSkinbeautify(paramBitmap, i, j, paramInt1, paramInt2, paramInt3, paramDouble);
      paramBitmap = intARGB2Bimap(paramBitmap, i, j);
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return null;
  }
  
  public static int add(int paramInt, byte paramByte)
  {
    return jni.add(paramInt, paramByte);
  }
  
  public static byte[] bitmap2Byte(Bitmap paramBitmap)
  {
    byte[] arrayOfByte2 = (byte[])null;
    byte[] arrayOfByte1 = arrayOfByte2;
    for (;;)
    {
      int n;
      int i;
      try
      {
        n = paramBitmap.getWidth();
        arrayOfByte1 = arrayOfByte2;
        int i1 = paramBitmap.getHeight();
        arrayOfByte1 = arrayOfByte2;
        arrayOfInt = new int[n * i1];
        arrayOfByte1 = arrayOfByte2;
        arrayOfByte2 = new byte[n * i1 * 3];
        arrayOfByte1 = arrayOfByte2;
        paramBitmap.getPixels(arrayOfInt, 0, n, 0, 0, n, i1);
        j = 0;
        k = 0;
        i = 0;
        if (i < i1) {
          break label171;
        }
        arrayOfByte1 = arrayOfByte2;
        paramBitmap = (int[])null;
        return arrayOfByte2;
      }
      catch (Exception paramBitmap)
      {
        int[] arrayOfInt;
        int j;
        int k;
        paramBitmap.printStackTrace();
        return arrayOfByte1;
      }
      arrayOfByte2[k] = ((byte)(arrayOfInt[j] & 0xFF));
      arrayOfByte2[(k + 1)] = ((byte)(arrayOfInt[j] >> 8 & 0xFF));
      arrayOfByte2[(k + 2)] = ((byte)(arrayOfInt[j] >> 16 & 0xFF));
      k += 3;
      j += 1;
      m += 1;
      break label174;
      label171:
      int m = 0;
      label174:
      if (m >= n) {
        i += 1;
      }
    }
  }
  
  public static byte[] bitmap2ByteARGB(Bitmap paramBitmap)
  {
    byte[] arrayOfByte2 = (byte[])null;
    byte[] arrayOfByte1 = arrayOfByte2;
    for (;;)
    {
      int n;
      int i;
      try
      {
        n = paramBitmap.getWidth();
        arrayOfByte1 = arrayOfByte2;
        int i1 = paramBitmap.getHeight();
        arrayOfByte1 = arrayOfByte2;
        arrayOfByte2 = new byte[n * i1 * 4];
        arrayOfByte1 = arrayOfByte2;
        arrayOfInt = new int[n * i1];
        arrayOfByte1 = arrayOfByte2;
        paramBitmap.getPixels(arrayOfInt, 0, n, 0, 0, n, i1);
        j = 0;
        k = 0;
        i = 0;
        if (i < i1) {
          break label187;
        }
        arrayOfByte1 = arrayOfByte2;
        paramBitmap = (int[])null;
        return arrayOfByte2;
      }
      catch (Exception paramBitmap)
      {
        int[] arrayOfInt;
        int j;
        int k;
        int i2;
        paramBitmap.printStackTrace();
        return arrayOfByte1;
      }
      i2 = arrayOfInt[j];
      arrayOfByte2[k] = ((byte)(i2 & 0xFF));
      arrayOfByte2[(k + 1)] = ((byte)(i2 >> 8 & 0xFF));
      arrayOfByte2[(k + 2)] = ((byte)(i2 >> 16 & 0xFF));
      arrayOfByte2[(k + 3)] = ((byte)(i2 >> 24 & 0xFF));
      k += 4;
      j += 1;
      m += 1;
      break label190;
      label187:
      int m = 0;
      label190:
      if (m >= n) {
        i += 1;
      }
    }
  }
  
  public static int[] bitmap2IntARGB(Bitmap paramBitmap)
  {
    int[] arrayOfInt2 = (int[])null;
    int[] arrayOfInt1 = arrayOfInt2;
    try
    {
      int i = paramBitmap.getWidth();
      arrayOfInt1 = arrayOfInt2;
      int j = paramBitmap.getHeight();
      arrayOfInt1 = arrayOfInt2;
      arrayOfInt2 = new int[i * j];
      arrayOfInt1 = arrayOfInt2;
      paramBitmap.getPixels(arrayOfInt2, 0, i, 0, 0, i, j);
      return arrayOfInt2;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return arrayOfInt1;
  }
  
  public static Bitmap bright(Bitmap paramBitmap, float paramFloat, boolean paramBoolean)
  {
    Object localObject = null;
    try
    {
      Bitmap localBitmap = Bitmap.createBitmap(paramBitmap.getWidth(), paramBitmap.getHeight(), paramBitmap.getConfig());
      localObject = localBitmap;
      Canvas localCanvas = new Canvas(localBitmap);
      float f = paramFloat;
      if (paramFloat < 0.0F) {
        f = 1.0F;
      }
      localObject = localBitmap;
      Paint localPaint = new Paint();
      localObject = localBitmap;
      ColorMatrix localColorMatrix = new ColorMatrix();
      localObject = localBitmap;
      localColorMatrix.set(new float[] { f, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, f, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, f, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F });
      localObject = localBitmap;
      localPaint.setColorFilter(new ColorMatrixColorFilter(localColorMatrix));
      localObject = localBitmap;
      localPaint.setAntiAlias(true);
      localObject = localBitmap;
      localPaint.setDither(false);
      localObject = localBitmap;
      localPaint.setFilterBitmap(true);
      localObject = localBitmap;
      localCanvas.drawBitmap(paramBitmap, 0.0F, 0.0F, localPaint);
      if (paramBoolean)
      {
        localObject = localBitmap;
        paramBitmap.recycle();
      }
      return localBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject;
  }
  
  public static Bitmap bytes2Bimap(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    for (;;)
    {
      int i;
      try
      {
        if (paramArrayOfByte.length != paramInt1 * paramInt2 * 3)
        {
          MTDebug.PrintError("bytes2Bimap data.length=" + paramArrayOfByte.length + " w*h*4=" + paramInt1 * paramInt2 * 3);
          return null;
        }
        if (paramArrayOfByte.length > 0)
        {
          Bitmap localBitmap = Bitmap.createBitmap(paramInt1, paramInt2, MyData.mConfig);
          if (localBitmap == null) {
            return null;
          }
          int[] arrayOfInt = new int[paramInt1 * paramInt2];
          i = 0;
          int k = 0;
          int j = 0;
          if (i >= paramInt2)
          {
            localBitmap.setPixels(arrayOfInt, 0, paramInt1, 0, 0, paramInt1, paramInt2);
            return localBitmap;
            arrayOfInt[j] = ((paramArrayOfByte[k] & 0xFF) + ((paramArrayOfByte[(k + 1)] & 0xFF) << 8) + ((paramArrayOfByte[(k + 2)] & 0xFF) << 16));
            k += 3;
            j += 1;
            m += 1;
            break label179;
          }
        }
        else
        {
          return null;
        }
      }
      catch (Exception paramArrayOfByte)
      {
        paramArrayOfByte.printStackTrace();
        return null;
      }
      int m = 0;
      label179:
      if (m >= paramInt1) {
        i += 1;
      }
    }
  }
  
  public static Bitmap bytesARGB2Bimap(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    for (;;)
    {
      int i;
      try
      {
        if (paramArrayOfByte.length > 0)
        {
          if (paramArrayOfByte.length != paramInt1 * paramInt2 * 4)
          {
            MTDebug.PrintError("bytesARGB2Bimap data.length=" + paramArrayOfByte.length + " w*h*4=" + paramInt1 * paramInt2 * 4);
            return null;
          }
          Bitmap localBitmap = Bitmap.createBitmap(paramInt1, paramInt2, MyData.mConfig);
          if (localBitmap == null) {
            return null;
          }
          int[] arrayOfInt = new int[paramInt1 * paramInt2];
          i = 0;
          int j = 0;
          int k = 0;
          if (i >= paramInt2)
          {
            localBitmap.setPixels(arrayOfInt, 0, paramInt1, 0, 0, paramInt1, paramInt2);
            paramArrayOfByte = (int[])null;
            return localBitmap;
            arrayOfInt[j] = ((paramArrayOfByte[k] & 0xFF) + ((paramArrayOfByte[(k + 1)] & 0xFF) << 8) + ((paramArrayOfByte[(k + 2)] & 0xFF) << 16) + ((paramArrayOfByte[(k + 3)] & 0xFF) << 24));
            k += 4;
            j += 1;
            m += 1;
            break label198;
          }
        }
        else
        {
          return null;
        }
      }
      catch (Exception paramArrayOfByte)
      {
        paramArrayOfByte.printStackTrace();
        return null;
      }
      int m = 0;
      label198:
      if (m >= paramInt1) {
        i += 1;
      }
    }
  }
  
  public static boolean changeARGB(byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i = 0;
    for (;;)
    {
      try
      {
        if (i < paramArrayOfByte.length) {
          break label43;
        }
      }
      catch (Exception paramArrayOfByte)
      {
        paramArrayOfByte.printStackTrace();
      }
      if (paramInt4 >= 0) {
        paramArrayOfByte[(i + 0)] = ((byte)paramInt4);
      }
      i += 4;
      continue;
      return true;
      label43:
      if (paramInt1 >= 0) {
        paramArrayOfByte[(i + 3)] = ((byte)paramInt1);
      }
      if (paramInt2 >= 0) {
        paramArrayOfByte[(i + 2)] = ((byte)paramInt2);
      }
      if (paramInt3 >= 0) {
        paramArrayOfByte[(i + 1)] = ((byte)paramInt3);
      }
    }
  }
  
  public static boolean changeIntARGB(int[] paramArrayOfInt, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i = 0;
    for (;;)
    {
      try
      {
        if (i < paramArrayOfInt.length) {
          break label57;
        }
      }
      catch (Exception paramArrayOfInt)
      {
        paramArrayOfInt.printStackTrace();
      }
      if ((paramInt4 >= 0) && (paramInt4 < 256)) {
        paramArrayOfInt[i] = ((paramArrayOfInt[i] & 0xFFFFFF00) + paramInt4);
      }
      i += 1;
      continue;
      return true;
      label57:
      if ((paramInt1 >= 0) && (paramInt1 < 256)) {
        paramArrayOfInt[i] = ((paramArrayOfInt[i] & 0xFFFFFF) + (paramInt1 << 24));
      }
      if ((paramInt2 >= 0) && (paramInt2 < 256)) {
        paramArrayOfInt[i] = ((paramArrayOfInt[i] & 0xFF00FFFF) + (paramInt2 << 16));
      }
      if ((paramInt3 >= 0) && (paramInt3 < 256)) {
        paramArrayOfInt[i] = ((paramArrayOfInt[i] & 0xFFFF00FF) + (paramInt3 << 8));
      }
    }
  }
  
  public static Bitmap colorRGB(Bitmap paramBitmap, int paramInt, float paramFloat)
  {
    Object localObject = null;
    for (;;)
    {
      Bitmap localBitmap;
      ColorMatrix localColorMatrix;
      try
      {
        localBitmap = Bitmap.createBitmap(paramBitmap.getWidth(), paramBitmap.getHeight(), paramBitmap.getConfig());
        localObject = localBitmap;
        Canvas localCanvas = new Canvas(localBitmap);
        localObject = localBitmap;
        Paint localPaint = new Paint();
        localObject = localBitmap;
        localColorMatrix = new ColorMatrix();
        if (paramInt == 0)
        {
          localObject = localBitmap;
          localColorMatrix.setScale(paramFloat, 1.0F, 1.0F, 255.0F);
          localObject = localBitmap;
          localPaint.setColorFilter(new ColorMatrixColorFilter(localColorMatrix));
          localObject = localBitmap;
          localPaint.setAntiAlias(true);
          localObject = localBitmap;
          localPaint.setDither(false);
          localObject = localBitmap;
          localCanvas.drawBitmap(paramBitmap, 0.0F, 0.0F, localPaint);
          return localBitmap;
        }
        if (paramInt == 0)
        {
          localObject = localBitmap;
          localColorMatrix.setScale(1.0F, paramFloat, 1.0F, 255.0F);
          continue;
        }
        if (paramInt != 0) {
          continue;
        }
      }
      catch (Exception paramBitmap)
      {
        paramBitmap.printStackTrace();
        return localObject;
      }
      localObject = localBitmap;
      localColorMatrix.setScale(1.0F, 1.0F, paramFloat, 255.0F);
    }
  }
  
  public static Bitmap combineBitmap(Bitmap paramBitmap1, int paramInt1, int paramInt2, int paramInt3, int paramInt4, Bitmap paramBitmap2, boolean paramBoolean)
  {
    Object localObject = null;
    try
    {
      Bitmap localBitmap2 = Bitmap.createBitmap(paramBitmap1.getWidth(), paramBitmap1.getHeight(), paramBitmap1.getConfig());
      Bitmap localBitmap1 = paramBitmap1;
      if (paramBoolean)
      {
        localObject = localBitmap2;
        paramBitmap1.recycle();
        localBitmap1 = null;
      }
      localObject = localBitmap2;
      paramBitmap1 = new Canvas(localBitmap2);
      localObject = localBitmap2;
      Paint localPaint = new Paint();
      localObject = localBitmap2;
      localPaint.setAntiAlias(true);
      localObject = localBitmap2;
      localPaint.setDither(false);
      localObject = localBitmap2;
      paramBitmap1.drawBitmap(localBitmap1, 0.0F, 0.0F, localPaint);
      localObject = localBitmap2;
      paramBitmap1.drawBitmap(paramBitmap2, new Rect(0, 0, paramBitmap2.getWidth(), paramBitmap2.getHeight()), new Rect(paramInt1, paramInt2, paramInt1 + paramInt3, paramInt2 + paramInt4), localPaint);
      return localBitmap2;
    }
    catch (Exception paramBitmap1)
    {
      paramBitmap1.printStackTrace();
    }
    return localObject;
  }
  
  public static Bitmap combineBitmap(Bitmap paramBitmap1, int paramInt1, int paramInt2, Bitmap paramBitmap2)
  {
    Object localObject = null;
    try
    {
      Bitmap localBitmap = Bitmap.createBitmap(paramBitmap1.getWidth(), paramBitmap1.getHeight(), paramBitmap1.getConfig());
      localObject = localBitmap;
      Canvas localCanvas = new Canvas(localBitmap);
      localObject = localBitmap;
      Paint localPaint = new Paint();
      localObject = localBitmap;
      localPaint.setAntiAlias(true);
      localObject = localBitmap;
      localPaint.setDither(false);
      localObject = localBitmap;
      localCanvas.drawBitmap(paramBitmap1, paramInt1, paramInt2, localPaint);
      localObject = localBitmap;
      localCanvas.drawBitmap(paramBitmap2, paramInt1, paramInt2, localPaint);
      return localBitmap;
    }
    catch (Exception paramBitmap1)
    {
      paramBitmap1.printStackTrace();
    }
    return localObject;
  }
  
  public static Bitmap contrast(Bitmap paramBitmap, int paramInt, boolean paramBoolean)
  {
    for (;;)
    {
      try
      {
        Bitmap localBitmap = Bitmap.createBitmap(paramBitmap.getWidth(), paramBitmap.getHeight(), paramBitmap.getConfig());
        Canvas localCanvas;
        Paint localPaint;
        ColorMatrix localColorMatrix;
        float f2;
        float f3;
        return localBitmap;
      }
      catch (Exception paramBitmap)
      {
        try
        {
          localCanvas = new Canvas(localBitmap);
          localPaint = new Paint();
          localColorMatrix = new ColorMatrix();
          paramInt = (paramInt * 3 / 5 - 30) * 2;
          if (paramInt < 0)
          {
            f1 = 127.0F + 1.0F * paramInt / 100.0F * 127.0F;
            f2 = f1 / 127.0F;
            localColorMatrix.set(new float[] { f2, 0.0F, 0.0F, 0.0F, 0.5F * (127.0F - f1), 0.0F, f2, 0.0F, 0.0F, 0.5F * (127.0F - f1), 0.0F, 0.0F, f2, 0.0F, (127.0F - f1) * 0.5F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
            localPaint.setColorFilter(new ColorMatrixColorFilter(localColorMatrix));
            localPaint.setAntiAlias(true);
            localPaint.setDither(false);
            localPaint.setFilterBitmap(true);
            localCanvas.drawBitmap(paramBitmap, 0.0F, 0.0F, localPaint);
            if (!paramBoolean) {
              break label361;
            }
            paramBitmap.recycle();
            return localBitmap;
          }
          f1 = paramInt % 1;
          if (f1 == 0.0F)
          {
            f1 = DELTA_INDEX[paramInt];
          }
          else
          {
            f2 = DELTA_INDEX[(paramInt << 0)];
            f3 = DELTA_INDEX[((paramInt << 0) + 1)];
            f1 = f1 * f3 + f2 * (1.0F - f1);
          }
        }
        catch (Exception paramBitmap)
        {
          continue;
        }
        paramBitmap = paramBitmap;
        localBitmap = null;
        paramBitmap.printStackTrace();
        return localBitmap;
      }
      label361:
      float f1 = f1 * 127.0F + 127.0F;
    }
  }
  
  public static Bitmap createScaledBitmap(Bitmap paramBitmap, int paramInt1, int paramInt2, Bitmap.Config paramConfig)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      Paint localPaint = new Paint();
      localObject1 = localObject2;
      localPaint.setDither(false);
      localObject1 = localObject2;
      localPaint.setAntiAlias(true);
      localObject1 = localObject2;
      localPaint.setFilterBitmap(true);
      localObject1 = localObject2;
      paramConfig = Bitmap.createBitmap(paramInt1, paramInt2, paramConfig);
      localObject1 = paramConfig;
      new Canvas(paramConfig).drawBitmap(paramBitmap, new Rect(0, 0, paramBitmap.getWidth(), paramBitmap.getHeight()), new Rect(0, 0, paramInt1, paramInt2), localPaint);
      return paramConfig;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  public static Bitmap cut(Bitmap paramBitmap, int paramInt1, int paramInt2, int paramInt3, int paramInt4, boolean paramBoolean)
  {
    Object localObject = null;
    int i = paramInt3;
    if (paramInt3 <= paramInt1) {
      i = paramInt1 + 1;
    }
    paramInt3 = paramInt4;
    if (paramInt4 < paramInt2) {
      paramInt3 = paramInt2 + 1;
    }
    try
    {
      Bitmap localBitmap = Bitmap.createBitmap(i - paramInt1, paramInt3 - paramInt2, paramBitmap.getConfig());
      localObject = localBitmap;
      Canvas localCanvas = new Canvas(localBitmap);
      localObject = localBitmap;
      Paint localPaint = new Paint();
      localObject = localBitmap;
      localPaint.setAntiAlias(true);
      localObject = localBitmap;
      localCanvas.drawBitmap(paramBitmap, new Rect(paramInt1, paramInt2, i, paramInt3), new Rect(0, 0, i - paramInt1, paramInt3 - paramInt2), localPaint);
      if (paramBoolean)
      {
        localObject = localBitmap;
        paramBitmap.recycle();
      }
      return localBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject;
  }
  
  public static Bitmap cutAndResizeRotate(Bitmap paramBitmap, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, boolean paramBoolean1, boolean paramBoolean2)
  {
    for (;;)
    {
      try
      {
        MTDebug.Print("cutAndResizeRotate DstW=" + paramInt1 + " DstH=" + paramInt2);
        MTDebug.Print("left=" + paramInt3 + " top=" + paramInt4 + " right" + paramInt5 + " bottom=" + paramInt6);
        MTDebug.Print("cutAndResizeRotate bmpw=" + paramBitmap.getWidth() + " bmph=" + paramBitmap.getHeight());
        System.gc();
        f = paramInt1 / (paramInt5 - paramInt3);
        if (f == 1.0F) {
          localObject1 = Bitmap.createBitmap(paramInt1, paramInt2, paramBitmap.getConfig());
        }
      }
      catch (Exception paramBitmap)
      {
        float f;
        Object localObject2;
        Paint localPaint;
        localObject1 = null;
        continue;
      }
      try
      {
        localObject2 = new Canvas((Bitmap)localObject1);
        localPaint = new Paint();
        localPaint.setAntiAlias(true);
        localPaint.setDither(true);
        localPaint.setFilterBitmap(true);
        ((Canvas)localObject2).drawBitmap(paramBitmap, new Rect(paramInt3, paramInt4, paramInt5, paramInt6), new Rect(0, 0, paramInt1, paramInt2), localPaint);
        if (!paramBoolean1) {
          break label435;
        }
        paramBitmap.recycle();
        paramBitmap = (Bitmap)localObject1;
      }
      catch (Exception paramBitmap)
      {
        continue;
        paramBitmap = null;
        continue;
        paramBitmap = (Bitmap)localObject1;
        continue;
      }
      localObject1 = paramBitmap;
      try
      {
        System.gc();
        return paramBitmap;
      }
      catch (Exception paramBitmap)
      {
        paramBitmap.printStackTrace();
        return localObject1;
      }
      if (f == 1.0F) {
        break label430;
      }
      MTDebug.Print("cutAndResizeRotate bmp.getWidth() * bmp.getHeight() <= 900 * 900");
      localObject2 = Bitmap.createBitmap(paramInt5 - paramInt3, paramInt6 - paramInt4, paramBitmap.getConfig());
      localObject1 = new Canvas((Bitmap)localObject2);
      localPaint = new Paint();
      localPaint.setAntiAlias(true);
      localPaint.setDither(true);
      localPaint.setFilterBitmap(true);
      ((Canvas)localObject1).drawBitmap(paramBitmap, -paramInt3, -paramInt4, localPaint);
      localObject1 = paramBitmap.getConfig();
      if (paramBoolean1) {
        paramBitmap.recycle();
      }
      if (paramBoolean2)
      {
        MTDebug.memeryUsed("cutAndResizeRotate0");
        if (f == 1.0F)
        {
          paramBitmap = (Bitmap)localObject2;
          localObject1 = paramBitmap;
          MTDebug.Print("FittingWindow copy");
          localObject1 = paramBitmap;
          MTDebug.memeryUsed("cutAndResizeRotate1");
        }
        else
        {
          paramBitmap = createScaledBitmap((Bitmap)localObject2, paramInt1, paramInt2, (Bitmap.Config)localObject1);
          localObject1 = paramBitmap;
          ((Bitmap)localObject2).recycle();
        }
      }
      else
      {
        paramBitmap = (Bitmap)localObject2;
      }
    }
  }
  
  public static Bitmap drawableToBitmap(Drawable paramDrawable)
  {
    Canvas localCanvas = null;
    localObject1 = localCanvas;
    try
    {
      int i = paramDrawable.getIntrinsicWidth();
      localObject1 = localCanvas;
      int j = paramDrawable.getIntrinsicHeight();
      localObject1 = localCanvas;
      if (paramDrawable.getOpacity() != -1) {
        localObject1 = localCanvas;
      }
      for (Object localObject2 = Bitmap.Config.RGB_565;; localObject2 = Bitmap.Config.RGB_565)
      {
        localObject1 = localCanvas;
        localObject2 = Bitmap.createBitmap(i, j, (Bitmap.Config)localObject2);
        localObject1 = localObject2;
        localCanvas = new Canvas((Bitmap)localObject2);
        localObject1 = localObject2;
        paramDrawable.setBounds(0, 0, paramDrawable.getIntrinsicWidth(), paramDrawable.getIntrinsicHeight());
        localObject1 = localObject2;
        paramDrawable.draw(localCanvas);
        return localObject2;
        localObject1 = localCanvas;
      }
      return localObject1;
    }
    catch (Exception paramDrawable)
    {
      paramDrawable.printStackTrace();
    }
  }
  
  public static String getJpgOritation(String paramString)
  {
    try
    {
      paramString = new ExifInterface(paramString).getAttribute("Orientation");
      return paramString;
    }
    catch (IOException paramString)
    {
      paramString.printStackTrace();
    }
    return "";
  }
  
  public static Bitmap gray(Bitmap paramBitmap)
  {
    Object localObject = null;
    try
    {
      Bitmap localBitmap = Bitmap.createBitmap(paramBitmap.getWidth(), paramBitmap.getHeight(), paramBitmap.getConfig());
      localObject = localBitmap;
      Canvas localCanvas = new Canvas(localBitmap);
      localObject = localBitmap;
      Paint localPaint = new Paint();
      localObject = localBitmap;
      ColorMatrix localColorMatrix = new ColorMatrix();
      localObject = localBitmap;
      localColorMatrix.setSaturation(0.0F);
      localObject = localBitmap;
      localPaint.setColorFilter(new ColorMatrixColorFilter(localColorMatrix));
      localObject = localBitmap;
      localPaint.setAntiAlias(true);
      localObject = localBitmap;
      localCanvas.drawBitmap(paramBitmap, 0.0F, 0.0F, localPaint);
      return localBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject;
  }
  
  public static Bitmap hue(Bitmap paramBitmap, float paramFloat, boolean paramBoolean)
  {
    Object localObject = null;
    Bitmap localBitmap;
    try
    {
      localBitmap = Bitmap.createBitmap(paramBitmap.getWidth(), paramBitmap.getHeight(), paramBitmap.getConfig());
      localObject = localBitmap;
      Canvas localCanvas = new Canvas(localBitmap);
      localObject = localBitmap;
      Paint localPaint = new Paint();
      localObject = localBitmap;
      ColorMatrix localColorMatrix = new ColorMatrix();
      localObject = localBitmap;
      int i = (int)(Math.min(180.0F, Math.max(-180.0F, paramFloat)) / 180.0F * 3.141592653589793D);
      localObject = localBitmap;
      paramFloat = (float)Math.cos(i);
      localObject = localBitmap;
      float f1 = (float)Math.sin(i);
      float f2 = -0.213F;
      float f3 = -0.715F;
      float f4 = -0.715F;
      float f5 = -0.072F;
      float f6 = -0.213F;
      float f7 = -0.072F;
      float f8 = -0.213F;
      localObject = localBitmap;
      localColorMatrix.set(new float[] { (1.0F - 0.213F) * paramFloat + 0.213F + f2 * f1, f3 * paramFloat + 0.715F + f4 * f1, f5 * paramFloat + 0.072F + (1.0F - 0.072F) * f1, 0.0F, 0.0F, f6 * paramFloat + 0.213F + 0.143F * f1, (1.0F - 0.715F) * paramFloat + 0.715F + 0.14F * f1, f7 * paramFloat + 0.072F + -0.283F * f1, 0.0F, 0.0F, -(1.0F - 0.213F) * f1 + (f8 * paramFloat + 0.213F), 0.715F * f1 + (-0.715F * paramFloat + 0.715F), paramFloat * (1.0F - 0.072F) + 0.072F + 0.072F * f1, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F });
      localObject = localBitmap;
      localPaint.setColorFilter(new ColorMatrixColorFilter(localColorMatrix));
      localObject = localBitmap;
      localPaint.setAntiAlias(true);
      localObject = localBitmap;
      localPaint.setDither(false);
      localObject = localBitmap;
      localCanvas.drawBitmap(paramBitmap, 0.0F, 0.0F, localPaint);
      if (paramBoolean)
      {
        localObject = localBitmap;
        paramBitmap.recycle();
        return localBitmap;
      }
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
      return localObject;
    }
    return localBitmap;
  }
  
  public static Bitmap intARGB2Bimap(int[] paramArrayOfInt, int paramInt1, int paramInt2)
  {
    try
    {
      if (paramArrayOfInt.length != paramInt1 * paramInt2)
      {
        MTDebug.PrintError("bytesARGB2Bimap data.length=" + paramArrayOfInt.length + " w*h=" + paramInt1 * paramInt2);
        return null;
      }
      if (paramArrayOfInt.length > 0)
      {
        Bitmap localBitmap = Bitmap.createBitmap(paramInt1, paramInt2, MyData.mConfig);
        if (localBitmap == null) {
          return null;
        }
        localBitmap.setPixels(paramArrayOfInt, 0, paramInt1, 0, 0, paramInt1, paramInt2);
        return localBitmap;
      }
    }
    catch (Exception paramArrayOfInt)
    {
      paramArrayOfInt.printStackTrace();
    }
    return null;
  }
  
  public static Bitmap mirror(Bitmap paramBitmap, int paramInt, boolean paramBoolean)
  {
    Bitmap localBitmap2 = null;
    Bitmap localBitmap1 = localBitmap2;
    for (;;)
    {
      try
      {
        MTDebug.Print("mirror kind=" + paramInt);
        localBitmap1 = localBitmap2;
        localMatrix = new Matrix();
        switch (paramInt)
        {
        case 1: 
          localBitmap1 = localBitmap2;
          localMatrix.preScale(-1.0F, 1.0F);
          localBitmap1 = localBitmap2;
          if (paramBitmap.getConfig() != Bitmap.Config.RGB_565) {
            continue;
          }
          localBitmap1 = localBitmap2;
          MTDebug.Print("mirror bmpSrc.getConfig() == Config.RGB_565");
        }
      }
      catch (Exception paramBitmap)
      {
        Matrix localMatrix;
        paramBitmap.printStackTrace();
        return localBitmap1;
        localBitmap1 = localBitmap2;
        localMatrix.preScale(-1.0F, 1.0F);
        localBitmap1 = localBitmap2;
        localMatrix.postScale(1.0F, -1.0F);
        continue;
        localBitmap1 = localBitmap2;
        if (paramBitmap.getConfig() != Bitmap.Config.ARGB_8888) {
          continue;
        }
        localBitmap1 = localBitmap2;
        MTDebug.Print("mirror bmpSrc.getConfig() == Config.ARGB_8888");
        continue;
        localBitmap1 = localBitmap2;
        if (localBitmap2.getConfig() != Bitmap.Config.ARGB_8888) {
          continue;
        }
        localBitmap1 = localBitmap2;
        MTDebug.Print("mirror mirrorPic.getConfig() == Config.ARGB_8888");
        continue;
        return null;
      }
      localBitmap1 = localBitmap2;
      localBitmap2 = Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), localMatrix, true);
      localBitmap1 = localBitmap2;
      if (localBitmap2.getConfig() != Bitmap.Config.RGB_565) {
        continue;
      }
      localBitmap1 = localBitmap2;
      MTDebug.Print("mirror mirrorPic.getConfig() == Config.RGB_565");
      localBitmap1 = localBitmap2;
      MTDebug.Print("mirrorPic w=" + localBitmap2.getWidth() + " h=" + localBitmap2.getHeight());
      localBitmap1 = localBitmap2;
      if (!paramBoolean) {
        return localBitmap1;
      }
      localBitmap1 = localBitmap2;
      paramBitmap.recycle();
      return localBitmap2;
      localBitmap1 = localBitmap2;
      localMatrix.preScale(1.0F, -1.0F);
    }
    return localBitmap1;
  }
  
  public static Bitmap resize(Bitmap paramBitmap, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    Bitmap localBitmap2 = null;
    localBitmap1 = localBitmap2;
    try
    {
      if (paramInt1 == paramBitmap.getWidth())
      {
        localBitmap1 = localBitmap2;
        if (paramInt2 == paramBitmap.getHeight())
        {
          localBitmap1 = localBitmap2;
          localBitmap2 = paramBitmap.copy(MyData.mConfig, true);
          localBitmap1 = localBitmap2;
          MTDebug.Print("FittingWindow copy");
        }
      }
      for (;;)
      {
        localBitmap1 = localBitmap2;
        if (!paramBoolean) {
          break;
        }
        localBitmap1 = localBitmap2;
        paramBitmap.recycle();
        return localBitmap2;
        localBitmap1 = localBitmap2;
        localBitmap2 = createScaledBitmap(paramBitmap, paramInt1, paramInt2, paramBitmap.getConfig());
      }
      return localBitmap1;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
  }
  
  public static Bitmap rotate(Bitmap paramBitmap, float paramFloat, boolean paramBoolean)
  {
    Bitmap localBitmap2 = null;
    Bitmap localBitmap1;
    if ((paramFloat == 0.0F) || (paramFloat == 360.0F)) {
      localBitmap1 = localBitmap2;
    }
    for (;;)
    {
      try
      {
        localBitmap2 = paramBitmap.copy(paramBitmap.getConfig(), true);
        localBitmap1 = localBitmap2;
        MTDebug.Print("FittingWindow copy");
        localBitmap1 = localBitmap2;
        if (!paramBoolean) {
          return localBitmap1;
        }
        localBitmap1 = localBitmap2;
        paramBitmap.recycle();
        return localBitmap2;
      }
      catch (Exception paramBitmap)
      {
        Matrix localMatrix;
        paramBitmap.printStackTrace();
      }
      localBitmap1 = localBitmap2;
      localMatrix = new Matrix();
      localBitmap1 = localBitmap2;
      localMatrix.preRotate(paramFloat);
      localBitmap1 = localBitmap2;
      localBitmap2 = Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), localMatrix, true);
      localBitmap1 = localBitmap2;
      MTDebug.printConfig(paramBitmap, "rotate src");
      localBitmap1 = localBitmap2;
      MTDebug.printConfig(localBitmap2, "rotate bmpDst");
    }
    return localBitmap1;
  }
  
  public static Bitmap rotate90(Bitmap paramBitmap, boolean paramBoolean)
  {
    Object localObject = null;
    try
    {
      Bitmap localBitmap = Bitmap.createBitmap(paramBitmap.getHeight(), paramBitmap.getWidth(), paramBitmap.getConfig());
      localObject = localBitmap;
      Canvas localCanvas = new Canvas(localBitmap);
      localObject = localBitmap;
      Paint localPaint = new Paint();
      localObject = localBitmap;
      localPaint.setDither(false);
      localObject = localBitmap;
      localPaint.setAntiAlias(true);
      localObject = localBitmap;
      localPaint.setFilterBitmap(true);
      localObject = localBitmap;
      Matrix localMatrix = new Matrix();
      localObject = localBitmap;
      int i = paramBitmap.getWidth();
      localObject = localBitmap;
      int j = paramBitmap.getHeight();
      localObject = localBitmap;
      localMatrix.preRotate(90.0F, i / 2, j / 2);
      localObject = localBitmap;
      localMatrix.postTranslate((j - i) / 2, -(j - i) / 2);
      localObject = localBitmap;
      localCanvas.drawBitmap(paramBitmap, localMatrix, localPaint);
      if (paramBoolean)
      {
        localObject = localBitmap;
        paramBitmap.recycle();
      }
      return localBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject;
  }
  
  public static Bitmap rotateAndResize(Bitmap paramBitmap, float paramFloat1, float paramFloat2)
  {
    Object localObject2 = null;
    Object localObject1 = localObject2;
    try
    {
      Matrix localMatrix = new Matrix();
      localObject1 = localObject2;
      localMatrix.preRotate(paramFloat1);
      localObject1 = localObject2;
      localMatrix.preScale(paramFloat2, paramFloat2);
      if ((paramFloat2 == 1.0F) && ((paramFloat1 == 0.0F) || (paramFloat1 == 360.0F)))
      {
        localObject1 = localObject2;
        paramBitmap = paramBitmap.copy(MyData.mConfig, true);
        localObject1 = paramBitmap;
        MTDebug.Print("FittingWindow copy");
        return paramBitmap;
      }
      localObject1 = localObject2;
      paramBitmap = Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), localMatrix, true);
      return paramBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  public static Bitmap rotateDirect(Bitmap paramBitmap, float paramFloat, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    Object localObject2 = null;
    Bitmap localBitmap1 = null;
    Object localObject1 = localObject2;
    try
    {
      MTDebug.Print("rotateResize direct=" + paramFloat);
      if ((paramFloat == 0.0F) || (paramFloat == 360.0F))
      {
        localObject1 = localObject2;
        localBitmap1 = paramBitmap.copy(paramBitmap.getConfig(), true);
        localObject1 = localBitmap1;
        MTDebug.Print("FittingWindow copy");
        localObject1 = localBitmap1;
        if (paramBoolean)
        {
          localObject1 = localBitmap1;
          paramBitmap.recycle();
          return localBitmap1;
        }
      }
      else
      {
        localObject1 = localObject2;
        Matrix localMatrix = new Matrix();
        Bitmap localBitmap2 = paramBitmap;
        if (paramFloat != 0.0F)
        {
          localObject1 = localObject2;
          MTDebug.Print("direct=" + paramFloat);
          localObject1 = localObject2;
          localMatrix.preRotate(paramFloat);
          localObject1 = localObject2;
          localBitmap2 = Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), localMatrix, true);
          localBitmap1 = paramBitmap;
          if (paramBoolean)
          {
            localObject1 = localObject2;
            paramBitmap.recycle();
            localBitmap1 = null;
          }
          localObject1 = localObject2;
          paramBitmap = FittingWindow(localBitmap2, paramInt1, paramInt2, true);
          localBitmap2 = localBitmap1;
          localBitmap1 = paramBitmap;
        }
        localObject1 = localBitmap1;
        MTDebug.printConfig(localBitmap2, "rotate src");
        localObject1 = localBitmap1;
        MTDebug.printConfig(localBitmap1, "rotate bmpDst");
        return localBitmap1;
      }
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject1;
  }
  
  public static Bitmap rotateRect(Bitmap paramBitmap, float paramFloat1, float paramFloat2, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3)
  {
    Bitmap localBitmap2 = null;
    Bitmap localBitmap1 = localBitmap2;
    float f1;
    try
    {
      i = paramBitmap.getWidth();
      localBitmap1 = localBitmap2;
      j = paramBitmap.getHeight();
      localBitmap1 = localBitmap2;
      i2 = i / 2;
      localBitmap1 = localBitmap2;
      i3 = j / 2;
      if (paramFloat1 < 0.0F) {}
      localBitmap1 = localBitmap2;
      f2 = (float)Math.atan(1.0F * j / i);
      localBitmap1 = localBitmap2;
      MTDebug.printAvilableMemery2("rotateRect0");
      localBitmap1 = localBitmap2;
      localBitmap2 = rotate(paramBitmap, paramFloat1, false);
      localBitmap1 = localBitmap2;
      MTDebug.printAvilableMemery2("rotateRect");
      if (paramBoolean2)
      {
        localBitmap1 = localBitmap2;
        paramBitmap.recycle();
      }
      localBitmap1 = localBitmap2;
      paramBitmap = new Rect();
      localBitmap1 = localBitmap2;
      n = (i - localBitmap2.getWidth()) / 2;
      localBitmap1 = localBitmap2;
      i1 = (j - localBitmap2.getHeight()) / 2;
      localBitmap1 = localBitmap2;
      MTDebug.Print("angle=" + paramFloat1);
      f1 = paramFloat1;
      if (paramFloat1 >= 0.0F) {
        break label483;
      }
      f1 = paramFloat1 * -1.0F;
    }
    catch (Exception paramBitmap)
    {
      int i;
      int j;
      int i2;
      int i3;
      float f2;
      int n;
      int i1;
      int m;
      int k;
      label460:
      paramBitmap.printStackTrace();
      return localBitmap1;
    }
    if (i < j)
    {
      localBitmap1 = localBitmap2;
      m = (int)(1.0F * i / 2.0F / Math.cos(f2 - f1 * 3.141592653589793D / 180.0D));
      localBitmap1 = localBitmap2;
      k = (int)(m * Math.cos(f2));
      localBitmap1 = localBitmap2;
      m = (int)(m * Math.sin(f2));
      localBitmap1 = localBitmap2;
      paramBitmap.set(i2 - k, i3 - m, k + i2, m + i3);
      if (!paramBoolean1) {
        break label460;
      }
    }
    for (;;)
    {
      localBitmap1 = localBitmap2;
      paramBitmap = cutAndResizeRotate(localBitmap2, j, i, paramBitmap.left - n, paramBitmap.top - i1, paramBitmap.right - n, paramBitmap.bottom - i1, true, paramBoolean3);
      if ((paramFloat2 == 0.0F) || (paramFloat2 == 360.0F)) {
        break label532;
      }
      localBitmap1 = paramBitmap;
      return rotate(paramBitmap, paramFloat2, true);
      localBitmap1 = localBitmap2;
      m = (int)(1.0F * j / 2.0F / Math.cos(f2 + f1 * 3.141592653589793D / 180.0D - 1.570796326794897D));
      localBitmap1 = localBitmap2;
      k = (int)(m * Math.cos(f2));
      double d1 = m;
      localBitmap1 = localBitmap2;
      double d2 = Math.sin(f2);
      m = (int)(d1 * d2);
      break;
      k = j;
      j = i;
      i = k;
    }
    for (;;)
    {
      label483:
      if (f1 <= 360.0F)
      {
        paramFloat1 = f1;
        if (f1 > 180.0F) {
          paramFloat1 = 360.0F - f1;
        }
        f1 = paramFloat1;
        if (paramFloat1 <= 90.0F) {
          break;
        }
        f1 = 180.0F - paramFloat1;
        break;
        return paramBitmap;
      }
      label532:
      f1 -= 360.0F;
    }
  }
  
  public static Bitmap rotateResize(Bitmap paramBitmap, float paramFloat1, float paramFloat2, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    for (;;)
    {
      try
      {
        MTDebug.Print("rotateResize direct=" + paramFloat1 + " degress=" + paramFloat2);
        if ((paramFloat2 == 0.0F) || (paramFloat2 == 360.0F))
        {
          localObject2 = paramBitmap.copy(paramBitmap.getConfig(), true);
          localObject1 = localObject2;
        }
        try
        {
          MTDebug.Print("FittingWindow copy");
          if (paramBoolean)
          {
            localObject1 = localObject2;
            paramBitmap.recycle();
          }
          return localObject2;
        }
        catch (Exception paramBitmap) {}
        localObject1 = new Matrix();
        if (paramFloat1 == 0.0F) {
          continue;
        }
        MTDebug.Print("direct=" + paramFloat1);
        ((Matrix)localObject1).preRotate(paramFloat1);
        localObject2 = Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), (Matrix)localObject1, true);
        localBitmap1 = paramBitmap;
        if (paramBoolean)
        {
          paramBitmap.recycle();
          localBitmap1 = null;
        }
        paramBitmap = FittingWindow((Bitmap)localObject2, paramInt1, paramInt2, true);
        if (paramFloat2 == 0.0F) {
          continue;
        }
        MTDebug.Print("degress=" + paramFloat2);
        ((Matrix)localObject1).reset();
        ((Matrix)localObject1).preRotate(paramFloat2);
        localObject2 = Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), (Matrix)localObject1, true);
        localObject1 = localObject2;
        paramBitmap.recycle();
        localObject1 = localObject2;
        MTDebug.printConfig(localBitmap1, "rotate src");
        localObject1 = localObject2;
        MTDebug.printConfig((Bitmap)localObject2, "rotate bmpDst");
        return localObject2;
      }
      catch (Exception paramBitmap)
      {
        Object localObject2;
        Bitmap localBitmap1;
        Bitmap localBitmap2;
        Object localObject1 = null;
        continue;
      }
      paramBitmap.printStackTrace();
      return localObject1;
      localObject2 = paramBitmap;
      continue;
      ((Matrix)localObject1).reset();
      ((Matrix)localObject1).preRotate(paramFloat2);
      localBitmap2 = Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), (Matrix)localObject1, true);
      localBitmap1 = paramBitmap;
      localObject2 = localBitmap2;
      if (paramBoolean)
      {
        localObject1 = localBitmap2;
        paramBitmap.recycle();
        localBitmap1 = null;
        localObject2 = localBitmap2;
      }
    }
  }
  
  public static Bitmap saturation(Bitmap paramBitmap, float paramFloat, boolean paramBoolean)
  {
    localObject = null;
    try
    {
      Bitmap localBitmap = Bitmap.createBitmap(paramBitmap.getWidth(), paramBitmap.getHeight(), paramBitmap.getConfig());
      localObject = localBitmap;
      if (localBitmap.getConfig() == Bitmap.Config.RGB_565)
      {
        localObject = localBitmap;
        MTDebug.Print("saturation bmpDst.getConfig() == Config.RGB_565");
      }
      for (;;)
      {
        localObject = localBitmap;
        Canvas localCanvas = new Canvas(localBitmap);
        localObject = localBitmap;
        Paint localPaint = new Paint();
        localObject = localBitmap;
        ColorMatrix localColorMatrix = new ColorMatrix();
        localObject = localBitmap;
        localColorMatrix.setSaturation(paramFloat);
        localObject = localBitmap;
        localPaint.setColorFilter(new ColorMatrixColorFilter(localColorMatrix));
        localObject = localBitmap;
        localPaint.setAntiAlias(true);
        localObject = localBitmap;
        localPaint.setDither(false);
        localObject = localBitmap;
        localPaint.setFilterBitmap(true);
        localObject = localBitmap;
        localCanvas.drawBitmap(paramBitmap, 0.0F, 0.0F, localPaint);
        localObject = localBitmap;
        if (!paramBoolean) {
          break;
        }
        localObject = localBitmap;
        paramBitmap.recycle();
        return localBitmap;
        localObject = localBitmap;
        if (localBitmap.getConfig() == Bitmap.Config.ARGB_8888)
        {
          localObject = localBitmap;
          MTDebug.Print("saturation bmpDst.getConfig() == Config.ARGB_8888");
        }
      }
      return localObject;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
  }
  
  public static void savePic(String paramString, Bitmap paramBitmap, int paramInt)
  {
    paramString = new File(paramString);
    for (;;)
    {
      try
      {
        paramString = new BufferedOutputStream(new FileOutputStream(paramString));
        if (paramInt == 1)
        {
          paramBitmap.compress(Bitmap.CompressFormat.JPEG, 85, paramString);
          MTDebug.Print("savepic jpeg 95");
        }
      }
      catch (FileNotFoundException paramString)
      {
        paramString.printStackTrace();
        return;
      }
      try
      {
        paramString.flush();
        paramString.close();
        return;
      }
      catch (IOException paramString)
      {
        paramString.printStackTrace();
      }
      if (paramInt == 2) {
        paramBitmap.compress(Bitmap.CompressFormat.PNG, 100, paramString);
      }
    }
  }
  
  public static void savePic2(String paramString, Bitmap paramBitmap, int paramInt)
  {
    paramString = new File(paramString);
    for (;;)
    {
      try
      {
        paramString = new FileOutputStream(paramString);
        if (paramInt == 1) {}
        try
        {
          Bitmap localBitmap = paramBitmap.copy(MyData.mConfig, true);
          paramBitmap.recycle();
          localBitmap.compress(Bitmap.CompressFormat.JPEG, 85, paramString);
        }
        catch (FileNotFoundException paramString) {}
      }
      catch (FileNotFoundException paramString)
      {
        continue;
      }
      try
      {
        paramString.flush();
        paramString.close();
        return;
      }
      catch (IOException paramString)
      {
        paramString.printStackTrace();
        return;
      }
      if (paramInt == 2) {
        paramBitmap.compress(Bitmap.CompressFormat.PNG, 100, paramString);
      }
    }
    paramString.printStackTrace();
  }
  
  public static void savePicHigh(String paramString, Bitmap paramBitmap, int paramInt) {}
  
  public static Bitmap scale(Bitmap paramBitmap, float paramFloat, boolean paramBoolean)
  {
    Bitmap localBitmap2 = null;
    localBitmap1 = localBitmap2;
    try
    {
      new Matrix().postScale(paramFloat, paramFloat);
      if (paramFloat == 1.0F)
      {
        localBitmap1 = localBitmap2;
        localBitmap2 = paramBitmap.copy(MyData.mConfig, true);
        localBitmap1 = localBitmap2;
        MTDebug.Print("FittingWindow copy");
      }
      for (;;)
      {
        localBitmap1 = localBitmap2;
        if (!paramBoolean) {
          break;
        }
        localBitmap1 = localBitmap2;
        paramBitmap.recycle();
        return localBitmap2;
        localBitmap1 = localBitmap2;
        localBitmap2 = createScaledBitmap(paramBitmap, (int)(paramBitmap.getWidth() * paramFloat), (int)(paramBitmap.getHeight() * paramFloat), paramBitmap.getConfig());
      }
      return localBitmap1;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
  }
  
  public static Bitmap test(Bitmap paramBitmap)
  {
    for (;;)
    {
      int k;
      try
      {
        arrayOfByte = bitmap2ByteARGB(paramBitmap);
        i = 0;
        j = 0;
        if (i < paramBitmap.getHeight()) {
          break label79;
        }
        return bytesARGB2Bimap(arrayOfByte, paramBitmap.getWidth(), paramBitmap.getHeight());
      }
      catch (Exception paramBitmap)
      {
        byte[] arrayOfByte;
        int i;
        int j;
        paramBitmap.printStackTrace();
        return null;
      }
      if (k >= paramBitmap.getWidth())
      {
        i += 1;
      }
      else
      {
        arrayOfByte[(j + 0)] = 0;
        arrayOfByte[(j + 1)] = 0;
        j += 4;
        k += 1;
        continue;
        label79:
        k = 0;
      }
    }
  }
  
  public static Bitmap toARGB(Bitmap paramBitmap)
  {
    Object localObject = null;
    try
    {
      Bitmap localBitmap = Bitmap.createBitmap(paramBitmap.getWidth(), paramBitmap.getHeight(), paramBitmap.getConfig());
      localObject = localBitmap;
      Canvas localCanvas = new Canvas(localBitmap);
      localObject = localBitmap;
      Paint localPaint = new Paint();
      localObject = localBitmap;
      localPaint.setAntiAlias(true);
      localObject = localBitmap;
      localCanvas.drawBitmap(paramBitmap, 0.0F, 0.0F, localPaint);
      return localBitmap;
    }
    catch (Exception paramBitmap)
    {
      paramBitmap.printStackTrace();
    }
    return localObject;
  }
}
